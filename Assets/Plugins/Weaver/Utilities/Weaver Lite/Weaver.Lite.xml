<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weaver.Lite</name>
    </assembly>
    <members>
        <member name="T:Weaver.AssetListBase">
            <summary>
            A <see cref="T:UnityEngine.ScriptableObject"/> containing a list which is automatically populated with all assets of a given
            type in a specific folder. Gathering takes place in the Unity Editor so the list can be loaded efficiently at
            runtime and the target assets do not need to be in a Resources folder.
            </summary>
            <remarks>
            Unfortunately, Editor-Only fields (such as the target <see cref="P:Weaver.AssetListBase.Directory"/> and <see cref="P:Weaver.AssetListBase.Recursive"/> flag)
            can't be declared in a pre-compiled assembly or generic type. This complicates the structure of Weaver's source
            code since <see cref="T:Weaver.AssetListBase"/> needs to be inside Weaver.dll to integrate with other systems while the
            other classes (<c>AssetList</c>, <c>AssetList&lt;T&gt;</c>, <c>LazyAssetList&lt;T&gt;</c>, and
            <c>MetaAssetList&lt;TAsset, TMeta&gt;</c>) need to be out in the Unity project for Unity to compile them itself.
            </remarks>
        </member>
        <member name="P:Weaver.AssetListBase.Count">
            <summary>The number of assets in this list.</summary>
        </member>
        <member name="M:Weaver.AssetListBase.Clear">
            <summary>Clears all the assets from this list.</summary>
        </member>
        <member name="P:Weaver.AssetListBase.AssetType">
            <summary>The type of assets in this list.</summary>
        </member>
        <member name="P:Weaver.AssetListBase.IsLazy">
            <summary>If true: this list will only load its assets as they are needed rather than on startup.</summary>
        </member>
        <member name="P:Weaver.AssetListBase.MetaDataType">
            <summary>The type of meta data in this list.</summary>
        </member>
        <member name="M:Weaver.AssetListBase.GetRandomIndex">
            <summary>Returns a random index in this list.</summary>
        </member>
        <member name="P:Weaver.AssetListBase.Directory">
            <summary>[Editor-Only]
            The directory from which this list will gather assets.
            </summary>
        </member>
        <member name="M:Weaver.AssetListBase.GetAndVerifyDirectoryPath">
            <summary>[Editor-Only]
            Returns the path of the target <see cref="P:Weaver.AssetListBase.Directory"/> relative to the project root or null if a valid
            folder isn't assigned.
            </summary>
        </member>
        <member name="P:Weaver.AssetListBase.Recursive">
            <summary>[Editor-Only]
            If true: this list will gather assets in any sub-directories as well as the target directory.
            </summary>
        </member>
        <member name="M:Weaver.AssetListBase.Reset">
            <summary>[Editor-Only]
            Assigns the currently selected object as the <see cref="P:Weaver.AssetListBase.Directory"/> if possible.
            </summary>
        </member>
        <member name="M:Weaver.AssetListBase.SetDirty">
            <summary>[Editor-Only]
            Indicates that this list has been modified and should re-gather its assets next time it is accessed or
            serialized.
            </summary>
        </member>
        <member name="M:Weaver.AssetListBase.OnDisable">
            <summary>[Editor-Only]
            Called by Unity when this list is unloaded.
            Ensures that all assets in the target <see cref="P:Weaver.AssetListBase.Directory"/> are gathered so they can be serialized.
            </summary>
        </member>
        <member name="M:Weaver.AssetListBase.GatherAssetsIfDirty">
            <summary>[Editor-Only]
            Gathers the assets in the target <see cref="P:Weaver.AssetListBase.Directory"/> if they might have changed since this method was
            last called.
            </summary>
        </member>
        <member name="M:Weaver.AssetListBase.GatherAssets">
            <summary>[Editor-Only]
            Override to gather the assets in the target <see cref="P:Weaver.AssetListBase.Directory"/>.
            </summary>
        </member>
        <member name="M:Weaver.AssetListBase.GatherAssets``1(System.Collections.Generic.List{``0}@)">
            <summary>[Editor-Only]
            Gathers all assets in the target <see cref="P:Weaver.AssetListBase.Directory"/> into the `assets` list.
            </summary>
        </member>
        <member name="M:Weaver.AssetListBase.GatherAssets``1(System.Collections.Generic.List{``0},System.String,System.Boolean)">
            <summary>[Editor-Only]
            Gathers all assets in the target <see cref="P:Weaver.AssetListBase.Directory"/> into the `assets` list.
            </summary>
        </member>
        <member name="M:Weaver.AssetListBase.GatherResources``1(System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{``0})">
            <summary>[Editor-Only]
            Gathers all assets and their resource paths in the target <see cref="P:Weaver.AssetListBase.Directory"/>.
            </summary>
        </member>
        <member name="M:Weaver.AssetListBase.OnPostprocessAllAssets(System.String[],System.String[],System.String[],System.String[])">
            <summary>[Editor-Only]
            Calls <see cref="M:Weaver.AssetListBase.SetDirty"/> if any of the changed assets are (or should now be) included in this list.
            </summary>
        </member>
        <member name="M:Weaver.AssetListBase.ContainsAssets(System.String,System.String[])">
            <summary>[Editor-Only]
            Indicates whether any of the `assetPaths` starts with the `directoryPath`.
            </summary>
        </member>
        <member name="P:Weaver.AssetListBase.Tooltip">
            <summary>[Editor-Only]
            The text to use to describe this list when showing a tooltip in the <see cref="T:Weaver.Editor.Window.WeaverWindow"/>.
            </summary>
        </member>
        <member name="M:Weaver.AssetListBase.DoDetailsGUI">
            <summary>[Editor-Only]
            Draws the details of this list in the inspector.
            </summary>
        </member>
        <member name="M:Weaver.AssetListBase.Weaver#Editor#Window#WeaverWindow#IItem#GetPanelType(System.Type@)">
            <summary>[Editor-Only]
            All asset lists are shown in the 'Asset Lists' panel in the Weaver Window.
            </summary>
        </member>
        <member name="M:Weaver.AssetListBase.OnEnable">
            <summary>[Editor-Only]
            Ensures that this list is in the global collection of all lists so it can be displayed in the Weaver Window
            and can show project window overlays on its target assets.
            </summary>
        </member>
        <member name="M:Weaver.AssetListBase.AddToGlobalList">
            <summary>[Editor-Only]
            Adds the `list` to a global collection of all lists.
            </summary>
        </member>
        <member name="M:Weaver.AssetListBase.RemoveMissingLists">
            <summary>[Editor-Only]
            Removes anything from <see cref="F:Weaver.AssetListBase.AllLists"/> that has been destroyed or failed to load.
            </summary>
        </member>
        <member name="M:Weaver.AssetListBase.SetListTypes(System.Type,System.Type,System.Type)">
            <summary>[Editor-Only]
            Assigns the list types that need to be defined outside this assembly so they c an be used internally.
            </summary>
            <remarks>
            This method should only be called by Weaver.AssetList.
            </remarks>
        </member>
        <member name="T:Weaver.Editor.AssetListEditor">
            <summary>[Editor-Only] A custom <see cref="T:UnityEditor.Editor"/> for <see cref="T:Weaver.AssetListBase"/>.</summary>
        </member>
        <member name="P:Weaver.Editor.AssetListEditor.Target">
            <summary>The list being inspected.</summary>
        </member>
        <member name="P:Weaver.Editor.AssetListEditor.ScriptProperty">
            <summary>The script property of the target list (used to change its type).</summary>
        </member>
        <member name="P:Weaver.Editor.AssetListEditor.DirectoryProperty">
            <summary>The <see cref="P:Weaver.AssetListBase.Directory"/> property of the target list.</summary>
        </member>
        <member name="P:Weaver.Editor.AssetListEditor.RecursiveProperty">
            <summary>The <see cref="P:Weaver.AssetListBase.Recursive"/> property of the target list.</summary>
        </member>
        <member name="F:Weaver.Editor.AssetListEditor._IsDirty">
            <summary>
            Indicates whether the <see cref="P:Weaver.Editor.AssetListEditor.Target"/> has been modified and may need to be re-cast from the base
            <see cref="P:UnityEditor.Editor.target"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.AssetListEditor.OnInspectorGUI">
            <summary>
            Called by Unity to draw the target object's inspector.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Window.AssetListsPanel">
            <summary>[Editor-Only, Internal]
            A <see cref="T:Weaver.Editor.Window.WeaverWindowPanel"/> which manages asset lists.
            </summary>
        </member>
        <member name="F:Weaver.Editor.Window.AssetListsPanel.UsedListTypes">
            <summary>
            All types derived from <see cref="T:Weaver.AssetListBase"/> which have at least one instance in the project.
            </summary>
        </member>
        <member name="F:Weaver.Editor.Window.AssetListsPanel.SavedAssetLists">
            <summary>
            A subset of <see cref="F:Weaver.AssetListBase.AllLists"/> containing lists that are currently saved as assets.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Window.AssetListsPanel.Name">
            <summary>The display name of this panel.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.AssetListsPanel.Initialize(System.Int32)">
            <summary>Sets up the initial state of this panel.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.AssetListsPanel.DoHeaderGUI">
            <summary>
            Draws the Header GUI for this panel which is displayed regardless of whether it is expanded or not.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Window.AssetListsPanel.PopulateHeaderContextMenu(UnityEditor.GenericMenu)">
            <summary>Adds functions to the header context menu.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.AssetListsPanel.DoBodyGUI">
            <summary>
            Draws the Body GUI for this panel which is only displayed while it is expanded.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Window.AnimationsPanel">
            <summary>[Editor-Only, Internal]
            A <see cref="T:Weaver.Editor.Window.ProceduralScriptPanel"/> containing the details of the procedural Animations script.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Window.AnimationsPanel.Name">
            <summary>The display name of this panel.</summary>
        </member>
        <member name="P:Weaver.Editor.Window.AnimationsPanel.Settings">
            <summary>The base settings for the procedural script this panel manages.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.AnimationsPanel.PopulateHeaderContextMenu(UnityEditor.GenericMenu)">
            <summary>Adds functions to the header context menu.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.AnimationsPanel.DoBodyGUI">
            <summary>
            Draws the Body GUI for this panel which is only displayed while it is expanded.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Window.CustomMaskListGUI`1">
            <summary>[Editor-Only, Internal]
            A GUI for a list of <see cref="T:Weaver.Editor.Procedural.CustomLayerMask"/>.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Window.LayersPanel">
            <summary>[Editor-Only, Internal]
            A <see cref="T:Weaver.Editor.Window.ProceduralScriptPanel"/> containing the details of the procedural Layers script.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Window.LayersPanel.Name">
            <summary>The display name of this panel.</summary>
        </member>
        <member name="P:Weaver.Editor.Window.LayersPanel.Settings">
            <summary>The base settings for the procedural script this panel manages.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.LayersPanel.Initialize(System.Int32)">
            <summary>Sets up the initial state of this panel.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.LayersPanel.PopulateHeaderContextMenu(UnityEditor.GenericMenu)">
            <summary>Adds functions to the header context menu.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.LayersPanel.DoBodyGUI">
            <summary>
            Draws the Body GUI for this panel which is only displayed while it is expanded.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Window.LayersPanel.OnDisable">
            <summary>
            Called by <see cref="T:Weaver.Editor.Window.WeaverWindow"/>.OnDisable().
            </summary>
        </member>
        <member name="T:Weaver.Editor.Window.NavAreasPanel">
            <summary>[Editor-Only, Internal]
            A <see cref="T:Weaver.Editor.Window.ProceduralScriptPanel"/> containing the details of the procedural NavAreas script.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Window.NavAreasPanel.Name">
            <summary>The display name of this panel.</summary>
        </member>
        <member name="P:Weaver.Editor.Window.NavAreasPanel.Settings">
            <summary>The base settings for the procedural script this panel manages.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.NavAreasPanel.Initialize(System.Int32)">
            <summary>Sets up the initial state of this panel.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.NavAreasPanel.PopulateHeaderContextMenu(UnityEditor.GenericMenu)">
            <summary>Adds functions to the header context menu.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.NavAreasPanel.DoBodyGUI">
            <summary>
            Draws the Body GUI for this panel which is only displayed while it is expanded.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Window.NavAreasPanel.OnDisable">
            <summary>
            Called by <see cref="T:Weaver.Editor.Window.WeaverWindow"/>.OnDisable().
            </summary>
        </member>
        <member name="T:Weaver.Editor.Window.ScenesPanel">
            <summary>[Editor-Only, Internal]
            A <see cref="T:Weaver.Editor.Window.ProceduralScriptPanel"/> containing the details of the procedural Scenes script.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Window.ScenesPanel.Name">
            <summary>The display name of this panel.</summary>
        </member>
        <member name="P:Weaver.Editor.Window.ScenesPanel.Settings">
            <summary>The base settings for the procedural script this panel manages.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.ScenesPanel.PopulateHeaderContextMenu(UnityEditor.GenericMenu)">
            <summary>Adds functions to the header context menu.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.ScenesPanel.DoBodyGUI">
            <summary>
            Draws the Body GUI for this panel which is only displayed while it is expanded.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Window.ShadersPanel">
            <summary>[Editor-Only, Internal]
            A <see cref="T:Weaver.Editor.Window.ProceduralScriptPanel"/> containing the details of the procedural Shaders script.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Window.ShadersPanel.Name">
            <summary>The display name of this panel.</summary>
        </member>
        <member name="P:Weaver.Editor.Window.ShadersPanel.Settings">
            <summary>The base settings for the procedural script this panel manages.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.ShadersPanel.PopulateHeaderContextMenu(UnityEditor.GenericMenu)">
            <summary>Adds functions to the header context menu.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.ShadersPanel.DoBodyGUI">
            <summary>
            Draws the Body GUI for this panel which is only displayed while it is expanded.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Window.TagsPanel">
            <summary>[Editor-Only, Internal]
            A <see cref="T:Weaver.Editor.Window.ProceduralScriptPanel"/> containing the details of the procedural Tags script.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Window.TagsPanel.Name">
            <inheritdoc/>
        </member>
        <member name="P:Weaver.Editor.Window.TagsPanel.Settings">
            <inheritdoc/>
        </member>
        <member name="M:Weaver.Editor.Window.TagsPanel.PopulateHeaderContextMenu(UnityEditor.GenericMenu)">
            <inheritdoc/>
        </member>
        <member name="M:Weaver.Editor.Window.TagsPanel.DoBodyGUI">
            <inheritdoc/>
        </member>
        <member name="T:Weaver.Editor.Window.InjectionPanel">
            <summary>[Editor-Only, Internal]
            A <see cref="T:Weaver.Editor.Window.WeaverWindowPanel"/> containing the details of all asset injection attributes in the project
            except for procedural assets which use the <see cref="T:Weaver.Editor.Window.ProceduralPanel"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Window.InjectionPanel.Name">
            <summary>The display name of this panel.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.InjectionPanel.PopulateHeaderContextMenu(UnityEditor.GenericMenu)">
            <summary>Adds functions to the header context menu.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.InjectionPanel.DoBodyGUI">
            <summary>
            Draws the Body GUI for this panel which is only displayed while it is expanded.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Window.MiscPanel">
            <summary>[Editor-Only, Internal]
            A <see cref="T:Weaver.Editor.Window.WeaverWindowPanel"/> containing things that don't fit in other panels.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Window.MiscPanel.Name">
            <summary>The display name of this panel.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.MiscPanel.DoBodyGUI">
            <summary>
            Draws the Body GUI for this panel which is only displayed while it is expanded.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Window.MiscPanel.DoDeleteWeaverButton">
            <summary>Draws a button to delete Weaver and returns true if the user clicks and confirms it.</summary>
        </member>
        <member name="T:Weaver.Editor.Window.ProceduralPanel">
            <summary>[Editor-Only, Internal]
            A <see cref="T:Weaver.Editor.Window.WeaverWindowPanel"/> containing the details of all procedural assets in the project.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Window.ProceduralPanel.Name">
            <summary>The display name of this panel.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.ProceduralPanel.PopulateHeaderContextMenu(UnityEditor.GenericMenu)">
            <summary>Adds functions to the header context menu.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.ProceduralPanel.DoBodyGUI">
            <summary>
            Draws the Body GUI for this panel which is only displayed while it is expanded.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Window.ProceduralScriptPanel">
            <summary>[Editor-Only, Internal]
            A base <see cref="T:Weaver.Editor.Window.WeaverWindowPanel"/> class for panels specific to a certain procedural script.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Window.ProceduralScriptPanel.Settings">
            <summary>The base settings for the procedural script this panel manages.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.ProceduralScriptPanel.DoHeaderGUI">
            <summary>
            Draws the Header GUI for this panel which is displayed regardless of whether it is expanded or not.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Window.ShowInPanelAttribute">
            <summary>[Editor-Only] Indicates which <see cref="T:Weaver.Editor.Window.WeaverWindowPanel"/> something should be shown in.</summary>
        </member>
        <member name="F:Weaver.Editor.Window.ShowInPanelAttribute.PanelType">
            <summary>The type of the <see cref="T:Weaver.Editor.Window.WeaverWindowPanel"/> to show the target in.</summary>
        </member>
        <member name="P:Weaver.Editor.Window.ShowInPanelAttribute.ShowInMain">
            <summary>Indicates whether the injector should be shown in its regular panel as well.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.ShowInPanelAttribute.#ctor(System.Type)">
            <summary>Creates a new <see cref="T:Weaver.Editor.Window.ShowInPanelAttribute"/> with the specified <see cref="F:Weaver.Editor.Window.ShowInPanelAttribute.PanelType"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.ShowInPanelAttribute.GetPanelType(Weaver.InjectionAttribute,System.Type@)">
            <summary>Returns the <see cref="F:Weaver.Editor.Window.ShowInPanelAttribute.PanelType"/> associated with the `injector`.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.ShowInPanelAttribute.GetDefaultPanelType(Weaver.InjectionAttribute)">
            <summary>Returns the default <see cref="F:Weaver.Editor.Window.ShowInPanelAttribute.PanelType"/> of the `injector`.</summary>
        </member>
        <member name="T:Weaver.Editor.Window.WeaverWindow">
            <summary>[Editor-Only, Internal]
            The main <see cref="T:UnityEditor.EditorWindow"/> which provides access to <see cref="N:Weaver"/>'s features and settings.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Window.WeaverWindow.IItem">
            <summary>
            An object that can be shown in the <see cref="T:Weaver.Editor.Window.WeaverWindow"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Window.WeaverWindow.IItem.GetPanelType(System.Type@)">
            <summary>
            Returns the type of the main <see cref="T:Weaver.Editor.Window.WeaverWindowPanel"/> that this object should be shown in and
            optionally a secondary panel where it will also be shown. When pinging the object, it will be
            highlighted in the main panel.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Window.WeaverWindow.OnSelectionChanged">
            <summary>
            Deletage registered to <see cref="F:UnityEditor.Selection.selectionChanged"/>.
            </summary>
            <remarks>
            <see cref="T:UnityEditor.EditorWindow"/> actually has an OnSelectionChange event they receive from Unity, but it only
            gets called while the window is visible and we need it to get called while hidden to return focus back to
            this window so we use Selection.selectionChanged instead.
            </remarks>
        </member>
        <member name="T:Weaver.Editor.Window.WeaverWindowPanel">
            <summary>[Editor-Only]
            A collapsible panel in the <see cref="T:Weaver.Editor.Window.WeaverWindow"/>.
            </summary>
        </member>
        <member name="F:Weaver.Editor.Window.WeaverWindowPanel.Injectors">
            <summary>
            All the <see cref="T:Weaver.InjectionAttribute"/>s have been classified for this panel.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Window.WeaverWindowPanel.Name">
            <summary>The display name of this panel.</summary>
        </member>
        <member name="P:Weaver.Editor.Window.WeaverWindowPanel.IsExpanded">
            <summary>
            Determines whether this panel is currently expanded by comparing the index specified in
            <see cref="M:Weaver.Editor.Window.WeaverWindowPanel.Initialize(System.Int32)"/> with <see cref="F:Weaver.Editor.WeaverWindowSettings.currentPanel"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Window.WeaverWindowPanel.Initialize(System.Int32)">
            <summary>Sets up the initial state of this panel.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.WeaverWindowPanel.DoGUI">
            <summary>
            Draws the GUI for this panel.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Window.WeaverWindowPanel.DoHeaderGUI">
            <summary>
            Draws the Header GUI for this panel which is displayed regardless of whether it is expanded or not.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Window.WeaverWindowPanel.CheckHeaderContextMenu">
            <summary>Opens a context menu if the current event is a Right Click.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.WeaverWindowPanel.PopulateHeaderContextMenu(UnityEditor.GenericMenu)">
            <summary>Adds functions to the header context menu.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.WeaverWindowPanel.DoBodyGUI">
            <summary>Draws the Body GUI for this panel which is only displayed while it is expanded.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.WeaverWindowPanel.OnDisable">
            <summary>
            Called by <see cref="T:Weaver.Editor.Window.WeaverWindow"/>.OnDisable().
            </summary>
        </member>
        <member name="P:Weaver.Editor.Window.WeaverWindowPanel.VisibleInjectorCount">
            <summary>The number of <see cref="T:Weaver.InjectionAttribute"/>s that are shown in this panel.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.WeaverWindowPanel.DoInjectorListGUI">
            <summary>Draws each element in the <see cref="F:Weaver.Editor.Window.WeaverWindowPanel.Injectors"/> list.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.WeaverWindowPanel.DoGroupedInjectorListGUI">
            <summary>
            Draws the <see cref="F:Weaver.Editor.Window.WeaverWindowPanel.Injectors"/> list, grouped by namespaces.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Window.WelcomePanel">
            <summary>[Editor-Only, Internal]
            A <see cref="T:Weaver.Editor.Window.WeaverWindowPanel"/> containing links to support and the examples for Weaver.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Window.WelcomePanel.Name">
            <summary>The display name of this panel.</summary>
        </member>
        <member name="M:Weaver.Editor.Window.WelcomePanel.DoHeaderGUI">
            <summary>
            Draws the Header GUI for this panel which is displayed regardless of whether it is expanded or not.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Window.WelcomePanel.DoBodyGUI">
            <summary>Draws the Body GUI for this panel which is only displayed while it is expanded.</summary>
        </member>
        <member name="T:Weaver.Editor.AssetListTypeChanger">
            <summary>[Editor-Only, Internal]
            Manages the GUI for changing the type of an <see cref="T:Weaver.AssetListBase"/>.
            </summary>
        </member>
        <member name="T:Weaver.Editor.AssetListTypeInfo">
            <summary>[Editor-Only, Internal]
            Information about a type deriving from <see cref="T:Weaver.AssetListBase"/>.
            </summary>
        </member>
        <member name="T:Weaver.Editor.MetaDataUtils">
            <summary>[Editor-Only] Various utilities for managing meta-data.</summary>
        </member>
        <member name="M:Weaver.Editor.MetaDataUtils.GetMetaData``2(``0,System.Reflection.ConstructorInfo)">
            <summary>
            Gets the meta-data of the specified `asset`, either by passing it as a parameter into the specified
            `metaConstructor` or by accessing its <see cref="P:Weaver.IMetaDataProvider`1.MetaData"/> (if it can be cast).
            </summary>
        </member>
        <member name="M:Weaver.Editor.MetaDataUtils.GetSingleParameterConstructor(System.Type,System.Type)">
            <summary>
            Returns a constructor of the specified `type` which takes a single `parameterType` parameter (or null).
            </summary>
        </member>
        <member name="M:Weaver.Editor.MetaDataUtils.GetMetaDataTypes(System.Type)">
            <summary>
            Returns a list of all potential meta-data types of the specified `type`.
            </summary>
        </member>
        <member name="T:Weaver.Editor.AssetInjectionData">
            <summary>[Editor-Only, Internal]
            Details about an <see cref="T:Weaver.AssetInjectionAttribute"/> and the asset is is linked to.
            </summary>
        </member>
        <member name="F:Weaver.Editor.AssetInjectionData._DeclaringType">
            <summary>
            The <see cref="P:System.Type.FullName"/> and <see cref="P:System.Reflection.AssemblyName.Name"/> of the type in which the attributed
            property is declared.
            </summary>
        </member>
        <member name="F:Weaver.Editor.AssetInjectionData._Member">
            <summary>The name of the attributed member.</summary>
        </member>
        <member name="P:Weaver.Editor.AssetInjectionData.Asset">
            <summary>The asset linked to the attribute.</summary>
        </member>
        <member name="F:Weaver.Editor.AssetInjectionData._GUID">
            <summary>The GUID of the <see cref="P:Weaver.Editor.AssetInjectionData.Asset"/>.</summary>
        </member>
        <member name="F:Weaver.Editor.AssetInjectionData._LocalID">
            <summary>The local ID of the <see cref="P:Weaver.Editor.AssetInjectionData.Asset"/> inside its file.</summary>
        </member>
        <member name="P:Weaver.Editor.AssetInjectionData.Attribute">
            <summary>
            When an <see cref="T:Weaver.AssetInjectionAttribute"/> initializes, it claimes its saved data so that other
            assets can skip over it and so old data from attributes which no longer exist can be removed.
            </summary>
        </member>
        <member name="P:Weaver.Editor.AssetInjectionData.Index">
            <summary>
            The index of this data in the list containing it.
            </summary>
        </member>
        <member name="M:Weaver.Editor.AssetInjectionData.IsTarget(System.Reflection.MemberInfo)">
            <summary>
            Returns true if this <see cref="T:Weaver.Editor.AssetInjectionData"/> hasn't yet been claimed and references the `member`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.AssetInjectionData.GetOrCreateData(System.Collections.Generic.List{Weaver.Editor.AssetInjectionData}@,Weaver.AssetInjectionAttribute,System.Boolean@)">
            <summary>
            Gets the <see cref="T:Weaver.Editor.AssetInjectionData"/> associated with the specified `attribute` or creates a new one.
            </summary>
        </member>
        <member name="M:Weaver.Editor.AssetInjectionData.GetData(System.Collections.Generic.List{Weaver.Editor.AssetInjectionData},Weaver.AssetInjectionAttribute)">
            <summary>
            Gets the <see cref="T:Weaver.Editor.AssetInjectionData"/> associated with the specified `attribute` or creates a new one.
            </summary>
        </member>
        <member name="M:Weaver.Editor.AssetInjectionData.NewData(System.Collections.Generic.List{Weaver.Editor.AssetInjectionData}@,Weaver.AssetInjectionAttribute)">
            <summary>
            Stores a reference to the property (by name) and the asset so it can be found next time without searching
            the whole project. If there is no settings file, this method does nothing.
            </summary>
        </member>
        <member name="M:Weaver.Editor.AssetInjectionData.ClearUnclaimedData(System.Boolean@)">
            <summary>
            Removes any data for attributes which no longer exist and returns true if the list was changed.
            </summary>
        </member>
        <member name="T:Weaver.Editor.IInjector">
            <summary>[Editor-Only, Internal]
            An object that can be used for dependency injection.
            </summary>
        </member>
        <member name="P:Weaver.Editor.IInjector.EditorOnly">
            <summary>Indicates whether this injector should be excluded from runtime builds.</summary>
        </member>
        <member name="P:Weaver.Editor.IInjector.InEditMode">
            <summary>
            Indicates whether injection should be performed in Edit Mode, otherwise it will only be performed in play
            mode and on startup in a build.
            </summary>
        </member>
        <member name="M:Weaver.Editor.IInjector.Inject">
            <summary>Executes the dependency injection.</summary>
        </member>
        <member name="T:Weaver.Editor.WeaverEditorUtilities">
            <summary>[Editor-Only] A variety of miscellaneous utility methods.</summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.CanInject(Weaver.Editor.IInjector)">
            <summary>[Editor-Only, Internal]
            Indicates whether injection is allowed for this injector based on the current state of the Unity Editor.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.SetHideFlagsRecursive(UnityEngine.Transform,UnityEngine.HideFlags)">
            <summary>
            Sets <c>transform.hideFlags = flags</c> and does the same for all the children of `transform`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.EditorStartCoroutine(System.Collections.IEnumerator)">
            <summary>[Editor-Only]
            Starts a coroutine to run in the editor update loop.
            The coroutine can be cancelled by removing the returned delegate from
            <see cref="F:UnityEditor.EditorApplication.update"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.WeaverEditorUtilities.IsPreprocessingBuild">
            <summary>[Editor-Only]
            <see cref="P:UnityEditor.BuildPipeline.isBuildingPlayer"/> isn't true during
            <see cref="M:UnityEditor.Build.IPreprocessBuildWithReport.OnPreprocessBuild(UnityEditor.Build.Reporting.BuildReport)"/> so we use this value instead.
            </summary>
        </member>
        <member name="P:Weaver.Editor.WeaverEditorUtilities.IsBuilding">
            <summary>[Editor-Only]
            Indicates whether a runtime build is currently being compiled.
            </summary>
        </member>
        <member name="P:Weaver.Editor.WeaverEditorUtilities.ForceGenerate">
            <summary>[Editor-Only]
            Some assets (such as scripts) don't always need to regenerate.
            This property is set to true when the user generates a single asset rather than a group.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.IsEditorOnly(System.Type)">
            <summary>[Editor-Only] Tries to determine whether the `type` is only available in the Unity Editor.</summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.GetGameObject(UnityEngine.Object,UnityEngine.Component@)">
            <summary>[Editor-Only]
            If `obj` is a <see cref="T:UnityEngine.GameObject"/> this method casts and returns it.
            Or if it is a <see cref="T:UnityEngine.Component"/> this method returns its <see cref="P:UnityEngine.Component.gameObject"/> and
            outputs the `component`.
            Otherwise it returns null.
            </summary>
        </member>
        <member name="F:Weaver.Editor.WeaverEditorUtilities.WarningColor">
            <summary>[Editor-Only] The <see cref="T:UnityEngine.Color"/> used to indicate a warning.</summary>
        </member>
        <member name="F:Weaver.Editor.WeaverEditorUtilities.ErrorColor">
            <summary>[Editor-Only] The <see cref="T:UnityEngine.Color"/> used to indicate an error.</summary>
        </member>
        <member name="P:Weaver.Editor.WeaverEditorUtilities.DontExpandWidth">
            <summary>[Editor-Only]
            The cached result of <see cref="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)"/> with a false parameter.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.TempContent(System.String,System.String,UnityEngine.Texture)">
            <summary>
            Returns a <see cref="T:UnityEngine.GUIContent"/> containing the specified parameters. The same object is returned every
            time so it can be reused without causing garbage collection.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.TempTypeContent(System.Type)">
            <summary>[Editor-Only]
            Returns a <see cref="T:UnityEngine.GUIContent"/> using the type name as the text, full name as the tooltip, and
            <see cref="T:UnityEditor.AssetPreview"/> icon as the image (if it has one). The same object is returned every time so it
            can be reused without causing garbage collection.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.DoToggle(System.Boolean@,System.String,System.String)">
            <summary>[Editor-Only]
            Draws a <see cref="M:UnityEngine.GUILayout.Toggle(System.Boolean,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])"/> and returns true if the value
            is changed.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.DoLayoutListFixed(UnityEditorInternal.ReorderableList,UnityEngine.GUILayoutOption[])">
            <summary>[Editor-Only]
            Works like <see cref="M:UnityEditorInternal.ReorderableList.DoLayoutList"/> but doesn't screw up the padding while a fade group
            is animating.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.GUIDsToAssetPaths(System.String[])">
            <summary>
            Replaces each GUID in an array with the corresponding asset path using
            <see cref="M:UnityEditor.AssetDatabase.GUIDToAssetPath(System.String)"/>
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.FindAsset``1">
            <summary>
            Returns an asset of the specified type from anywhere in the project.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.FindAsset``1(System.String)">
            <summary>
            Returns an asset of the specified type from anywhere in the project.
            Checks the `assetPathHint` before searching the rest of the project.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.IsResource(System.String,System.Int32@)">
            <summary>
            Returns true if the specified path includes a "Resources" folder, along with the character index at which
            the resource path starts (the character after the "Resources" folder).
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.AssetToResourcePath(System.String,System.Int32)">
            <summary>
            Returns the resource path substring of the `assetPath` starting at the `resourcePathStart` and ending
            without the file extension.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.DeleteEmptyDirectories(System.String)">
            <summary>[Editor-Only]
            Deletes the specified directory if it is empty (ignoring metadata files), then does the same recursively
            for each parent directory. Refreshes the <see cref="T:UnityEditor.AssetDatabase"/> if anything was deleted.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.ContainsNonMetaFiles(System.String,System.String[]@)">
            <summary>[Editor-Only]
            Checks if the specified directory contains any files which don't end with ".meta".
            </summary>
        </member>
        <member name="P:Weaver.Editor.WeaverEditorUtilities.WeaverPluginsDirectory">
            <summary>
            The asset path of the folder containing the Weaver assembly. "Assets/Plugins/Weaver" by default.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.FindAllAssetPaths(System.Type)">
            <summary>
            Returns the paths of all assets of the specified `type`.
            <para></para>
            The result is cached for efficiency and can be cleared by <see cref="M:Weaver.Editor.WeaverEditorUtilities.ClearAssetPathCache"/>.
            <para></para>
            If the `type` is a <see cref="T:UnityEngine.Component"/>, this method returns the paths of all prefabs so they will need
            to be checked for that component individually.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.ClearAssetPathCache">
            <summary>
            Clears all paths cached by <see cref="M:Weaver.Editor.WeaverEditorUtilities.FindAllAssetPaths(System.Type)"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.GetDefaultFileExtension(System.Type)">
            <summary>[Editor-Only] Returns the default file extension for a type derived from <see cref="T:UnityEngine.Object"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.CreateNewAsset(System.Type,System.String)">
            <summary>Creates a new asset of the specified `type` at the specified `assetPath`.</summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.SaveSubAssets(UnityEngine.Object,UnityEngine.Object)">
            <summary>
            [Editor-Only] After you save the scene object `obj` as an asset file and load it as `asset`, this method
            goes through all the serialized <see cref="T:UnityEngine.Object"/> fields which weren't saved and adds them
            as sub-assets. Returns true if any sub-assets were saved.
            <para></para>
            For example, creating a procedural <see cref="T:UnityEngine.Mesh"/>, assigning it to a <see cref="T:UnityEngine.MeshFilter"/>, and
            saving the object as a prefab would not save the mesh anywhere unless you call this method or
            <see cref="M:UnityEditor.AssetDatabase.AddObjectToAsset(UnityEngine.Object,UnityEngine.Object)"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.DestroySubAssets(System.String)">
            <summary>[Editor-Only] Destroys all sub-assets which are part of the specified asset.</summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.OpenRelativeURL(System.String)">
            <summary>
            Opens the specified `url`. If it begins with a '/' it is treated as a path relative to the
            <see cref="F:Weaver.WeaverUtilities.DocumentationURL"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.AddLinkToURL(UnityEditor.GenericMenu,System.String,System.String)">
            <summary>
            Adds a function to open the specified `url`. If it begins with a '/' it is treated as a path relative to
            the <see cref="F:Weaver.WeaverUtilities.DocumentationURL"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.GetAttributeDisplayString(System.Type)">
            <summary>
            Returns a friendly display string for the specified attribute `type` surrounded by square brackets.
            <para></para>
            For example, <see cref="T:Weaver.AssetReferenceAttribute"/> would return "[AssetReference]".
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.GetFullNameWithoutNamespace(System.Type)">
            <summary>
            Returns the full name of the `type` and any types it is nested inside, but without the namespace prefix.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverEditorUtilities.GetPathWithoutExtension(System.String)">
            <summary>
            Returns a copy of the `path` with the file extension removed from the end and caches the result.
            </summary>
        </member>
        <member name="T:Weaver.Editor.InjectionSettings">
            <summary>[Editor-Only, Internal]
            Settings relating to dependency injection.
            </summary>
        </member>
        <member name="F:Weaver.Editor.InjectionSettings.enableRuntimeInjection">
            <summary>
            Indicates whether the procedural injector script should be generated so that injection attributes can be
            used in runtime code.
            </summary>
        </member>
        <member name="F:Weaver.Editor.InjectionSettings.showProjectWindowOverlays">
            <summary>
            Indicates whether overlay icons should be shown in the Project window for assets that are being used by
            or could be used by <see cref="T:Weaver.AssetInjectionAttribute"/>s.
            </summary>
        </member>
        <member name="F:Weaver.Editor.InjectionSettings.autoFindAssets">
            <summary>
            Indicates whether the system should automatically search for appropriate assets for any
            <see cref="T:Weaver.AssetInjectionAttribute"/>s.
            </summary>
        </member>
        <member name="F:Weaver.Editor.InjectionSettings.logAssetFound">
            <summary>
            Indicates whether a message should be logged when a new asset is found for an <see cref="T:Weaver.AssetInjectionAttribute"/>.
            </summary>
        </member>
        <member name="F:Weaver.Editor.InjectionSettings.catchInjectorExceptions">
            <summary>
            Indicates whether the procedural injector script should have try/catch blocks around the code for each
            <see cref="T:Weaver.InjectionAttribute"/> so that an exception caused by one won't prevent others from initialising.
            </summary>
        </member>
        <member name="F:Weaver.Editor.InjectionSettings.timeInjectorCode">
            <summary>
            Indicates whether the procedural injector script should time its execution and log a message.
            </summary>
        </member>
        <member name="F:Weaver.Editor.InjectionSettings.logInjectorCode">
            <summary>
            Indicates whether the procedural injector script should log a message whenever it interacts with user code
            to aid in debugging.
            </summary>
        </member>
        <member name="T:Weaver.Editor.InjectorManager">
            <summary>[Editor-Only, Internal]
            Manages the gathering of all dependency injectors and allows global access to them.
            </summary>
        </member>
        <member name="P:Weaver.Editor.InjectorManager.AllInjectors">
            <summary>
            All valid <see cref="T:Weaver.Editor.IInjector"/>s that have been gathered from the currently loaded assemblies.
            </summary>
        </member>
        <member name="P:Weaver.Editor.InjectorManager.AllInjectionAttributes">
            <summary>
            All valid <see cref="T:Weaver.InjectionAttribute"/>s that have been gathered from the currently loaded assemblies.
            </summary>
        </member>
        <member name="P:Weaver.Editor.InjectorManager.AllEvents">
            <summary>
            All valid <see cref="T:Weaver.OnInjectionCompleteAttribute"/>s that have been gathered from the currently loaded assemblies.
            </summary>
        </member>
        <member name="P:Weaver.Editor.InjectorManager.HasInitialized">
            <summary>
            Indicates whether the initialisation process is complete.
            </summary>
        </member>
        <member name="M:Weaver.Editor.InjectorManager.AssertIsInitialized">
            <summary>
            Logs an error if the initialisation process it not yet complete.
            </summary>
        </member>
        <member name="M:Weaver.Editor.InjectorManager.GatherAttributes(System.Type)">
            <summary>
            Iterates through all non-generic types in the `assembly` and gathers any properties with
            <see cref="T:Weaver.InjectionAttribute"/>s.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.InjectorScriptBuilder">
            <summary>[Editor-Only]
            A system for handling the build process so that members with <see cref="T:Weaver.InjectionAttribute"/>s can be
            initialized efficiently in a runtime build.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.InjectorScriptBuilder.GatherScriptDetails">
            <summary>Gathers the element details of this script.</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.AnimationsScriptBuilder">
            <summary>[Editor-Only, Internal]
            Scans your project for all <see cref="T:UnityEditor.Animations.AnimatorController"/> assets to gather the hashes of all states and
            parameters then procedurally generates a script containing constants wrapper methods for each of them.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.AnimationsScriptBuilder.Enabled">
            <summary>Indicates whether this script should be generated.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AnimationsScriptBuilder.#ctor(System.Action{System.Text.StringBuilder})">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.AnimationsScriptBuilder"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AnimationsScriptBuilder.GatherScriptDetails">
            <summary>Gather the animation assets in the project and build the script structure.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AnimationsScriptBuilder.AddHashConstant(Weaver.Editor.Procedural.Scripting.TypeBuilder,System.Collections.Generic.Dictionary{System.Int32,Weaver.Editor.Procedural.Scripting.FieldBuilder},System.String,System.Int32,System.Int32)">
            <summary>Adds a <c>const int</c> field containing the `hash` value.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AnimationsScriptBuilder.GetCompiledHashToString(System.Int32)">
            <summary>
            Calls the HashToString method in the currently compiled Animations class.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AnimationsScriptBuilder.AppendScript(System.Text.StringBuilder)">
            <summary>Appends the declaration of the elements of this script in C# code to the specified `text`.</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.AssetGeneratorAttribute">
            <summary>[Editor-Only]
            Specifies which asset type can be generated by the attributed class (which must inherit from
            <see cref="T:Weaver.Editor.Procedural.AssetGenerator"/>).
            </summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.AssetGeneratorAttribute.AssetType">
            <summary>The type of assets that can be generated by the attributed class.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetGeneratorAttribute.#ctor(System.Type)">
            <summary>Indicates that the attributed class can generate the specified `assetType`.</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.AssetGenerator">
            <summary>[Editor-Only]
            Base class for systems which manage aspects of procedural asset generation that are unique to certain asset
            types: determining the asset path, finding and invoking the generator method, and saving the generated asset.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetGenerator.GetAssetPathAndDestroyOldSubAssets(Weaver.Editor.Procedural.ProceduralAsset)">
            <summary>
            Gets the asset path of the existing asset and destroys all of its sub-assets.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.AssetGenerator.DefaultFileExtension">
            <summary>.asset</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetGenerator.GetGeneratorMethod(System.Reflection.MemberInfo)">
            <summary>Attempts to find the generator method assofiated with `assetField`.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetGenerator.GetGeneratorMethod(System.Reflection.MemberInfo,System.String)">
            <summary>
            Finds the generator method associated with a particular procedural asset.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetGenerator.GetMethod(System.Reflection.MemberInfo,System.String,System.Type[])">
            <summary>
            Finds the generator method associated with a particular procedural asset.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.AssetGenerator.GeneratorMethodReturnType">
            <summary>The default return type for generator methods used by this generator.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetGenerator.ValidateGeneratorReturnType(System.Type)">
            <summary>Checks if return type of a generator method is valid for this generator type.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.AssetGenerator.GeneratorMethodParameterTypes">
            <summary>
            The parameter types of a generator method for this asset type. When overriding this property, consider
            using <see cref="M:Weaver.ReflectionUtilities.OneType(System.Type)"/> or <see cref="M:Weaver.ReflectionUtilities.TwoTypes(System.Type,System.Type)"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetGenerator.InvokeGeneratorMethod(Weaver.Editor.Procedural.ProceduralAsset)">
            <summary>Invokes `asset.GeneratorMethod` with the correct parameters for this <see cref="T:Weaver.Editor.Procedural.AssetGenerator"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetGenerator.SaveDefaultAsset(System.String)">
            <summary>Creates and saves an empty default asset to save sub assets inside while the asset is still generating.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetGenerator.Save(UnityEngine.Object@,System.String,System.Boolean@)">
            <summary>
            Saves `obj` as an asset file at `assetPath`. If successful, the `obj` is destroyed and the reference is
            replaced with the newly saved asset.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetGenerator.Destroy(UnityEngine.Object)">
            <summary>
            Destroys the specified `obj`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetGenerator.UseTempScene(Weaver.Editor.Procedural.ProceduralAsset)">
            <summary>
            Indicates whether a temporary scene should be opened while generating the specified `asset`.
            Default is false.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetGenerator.AppendFullDescription(System.Text.StringBuilder)">
            <summary>Appends the full description of this <see cref="T:Weaver.Editor.Procedural.AssetGenerator"/> and how it is to be used.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.AssetGenerator.HowToCancel">
            <summary>Explains how to cancel the generation of an asset (for <see cref="M:Weaver.Editor.Procedural.AssetGenerator.AppendFullDescription(System.Text.StringBuilder)"/>).</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetGenerator.AddItemsToMenu(UnityEditor.GenericMenu,Weaver.Editor.Procedural.ProceduralAsset)">
            <summary>Populates `menu` with various items for the context menu of `asset`.</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.AssetGenerators">
            <summary>[Editor-Only, Internal]
            Gathers all <see cref="T:Weaver.Editor.Procedural.AssetGenerator"/> types and allows them to be accessed via the asset type they can each
            generate.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.AssetListGenerator">
            <summary>[Editor-Only] An <see cref="T:Weaver.Editor.Procedural.AssetGenerator"/> which saves asset lists.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetListGenerator.UseTempScene(Weaver.Editor.Procedural.ProceduralAsset)">
            <summary>
            Indicates whether a temporary scene should be opened while generating the specified `asset`.
            Uses the return value of the generator used for the individual elements of the list.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.AssetListGenerator.GeneratorMethodReturnType">
            <summary>The default return type for generator methods used by this generator.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetListGenerator.ValidateGeneratorReturnType(System.Type)">
            <summary>Checks if return type of a generator method is valid for this generator type.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetListGenerator.InvokeGeneratorMethod(Weaver.Editor.Procedural.ProceduralAsset)">
            <summary>Invokes `asset.GeneratorMethod` with the correct parameters for this <see cref="T:Weaver.Editor.Procedural.AssetGenerator"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetListGenerator.SaveDefaultAsset(System.String)">
            <summary>Does nothing.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetListGenerator.Save(UnityEngine.Object@,System.String,System.Boolean@)">
            <summary>Saves `obj` at the specified `assetPath`.</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.PrefabGenerator">
            <summary>[Editor-Only]
            An <see cref="T:Weaver.Editor.Procedural.AssetGenerator"/> which saves <see cref="T:UnityEngine.GameObject"/>s and <see cref="T:UnityEngine.Component"/>s as prefabs.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.PrefabGenerator.UseTempScene(Weaver.Editor.Procedural.ProceduralAsset)">
            <summary>
            Indicates whether a temporary scene should be opened while generating the specified `asset`.
            Returns true because prefabs should always be generated in a temporary scene.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.PrefabGenerator.DefaultFileExtension">
            <summary>.prefab</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.PrefabGenerator.GeneratorMethodReturnType">
            <summary>The default return type for generator methods used by this generator.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.PrefabGenerator.ValidateGeneratorReturnType(System.Type)">
            <summary>Checks if return type of a generator method is valid for this generator type.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.PrefabGenerator.InvokeGeneratorMethod(Weaver.Editor.Procedural.ProceduralAsset)">
            <summary>Invokes `asset.GeneratorMethod` with the correct parameters for this <see cref="T:Weaver.Editor.Procedural.AssetGenerator"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.PrefabGenerator.SaveDefaultAsset(System.String)">
            <summary>Creates and saves an empty prefab to save sub assets inside while the asset is still generating.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.PrefabGenerator.Save(UnityEngine.Object@,System.String,System.Boolean@)">
            <summary>Saves `obj` as a prefab at `assetPath`.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.PrefabGenerator.Destroy(UnityEngine.Object)">
            <summary>
            Destroys the specified `obj`.
            If it is a <see cref="T:UnityEngine.Component"/>, this method destroys its <see cref="P:UnityEngine.Component.gameObject"/> instead.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.ScriptGenerator">
            <summary>[Editor-Only]
            An <see cref="T:Weaver.Editor.Procedural.AssetGenerator"/> which saves <see cref="T:UnityEditor.MonoScript"/>s as ".cs" text files.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.ScriptGenerator.DefaultFileExtension">
            <summary>.cs</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.ScriptGenerator.SaveMessage">
            <summary>The contents of this <see cref="T:System.Text.StringBuilder"/> will be logged and cleared once the current script finishes generating.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ScriptGenerator.InvokeGeneratorMethod(Weaver.Editor.Procedural.ProceduralAsset)">
            <summary>
            Invokes `asset.GeneratorMethod` with the correct parameters for this <see cref="T:Weaver.Editor.Procedural.AssetGenerator"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ScriptGenerator.DisableSaveMessage">
            <summary>
            Prevents the "Generated Procedural Script: ..." message from being logged for the currently generating
            script.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ScriptGenerator.AppendHeader(System.Text.StringBuilder,Weaver.Editor.Procedural.ProceduralAsset)">
            <summary>Appends "// This file was procedurally generated by ...".</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ScriptGenerator.OnSaveText(Weaver.Editor.Procedural.ProceduralAsset)">
            <summary>Logs the <see cref="P:Weaver.Editor.Procedural.ScriptGenerator.SaveMessage"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ScriptGenerator.LogRebuildReason(System.String,System.String)">
            <summary>Adds the `reason` that the script at the specified `assetPath` should be rebuilt to the save message.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ScriptGenerator.AddItemsToMenu(UnityEditor.GenericMenu,Weaver.Editor.Procedural.ProceduralAsset)">
            <summary>Populates `menu` with various items for the context menu of `asset`.</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.ScriptGenerator.AliasAttribute">
            <summary>
            Replaces the method name used in the "This file was procedurally generated by ... Any modifications will be
            overwritten." comment at the top of a procedural script.
            </summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.ScriptGenerator.AliasAttribute.GeneratedBy">
            <summary>The name to use.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ScriptGenerator.AliasAttribute.#ctor(System.String)">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.ScriptGenerator.AliasAttribute"/> and sets the <see cref="F:Weaver.Editor.Procedural.ScriptGenerator.AliasAttribute.GeneratedBy"/> field.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ScriptGenerator.AliasAttribute.GetAlias(System.Reflection.MethodInfo)">
            <summary>
            Returns the alias of the specified `script` if it has an <see cref="T:Weaver.Editor.Procedural.ScriptGenerator.AliasAttribute"/>, otherwise
            the full name of its generator method is used.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.TextGenerator">
            <summary>[Editor-Only]
            An <see cref="T:Weaver.Editor.Procedural.AssetGenerator"/> which saves <see cref="T:UnityEngine.TextAsset"/>s as ".txt" text files.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.TextGenerator.DefaultFileExtension">
            <summary>.txt</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.TextGenerator.GeneratorMethodReturnType">
            <summary>The default return type for generator methods used by this generator.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.TextGenerator.GeneratorMethodParameterTypes">
            <summary>
            The parameter types of a generator method for this asset type. When overriding this property, consider
            using <see cref="M:Weaver.ReflectionUtilities.OneType(System.Type)"/> or <see cref="M:Weaver.ReflectionUtilities.TwoTypes(System.Type,System.Type)"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.TextGenerator.InvokeGeneratorMethod(Weaver.Editor.Procedural.ProceduralAsset)">
            <summary>Invokes `asset.GeneratorMethod` with the correct parameters for this <see cref="T:Weaver.Editor.Procedural.AssetGenerator"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.TextGenerator.SaveAndRelease(System.Text.StringBuilder,System.String)">
            <summary>
            Writes the contents of the `text` to the specified file `path` and releases the <see cref="T:System.Text.StringBuilder"/> for later reuse.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.TextGenerator.AppendHeader(System.Text.StringBuilder,Weaver.Editor.Procedural.ProceduralAsset)">
            <summary>Override to append any default text at the top of every file.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.TextGenerator.OnSaveText(Weaver.Editor.Procedural.ProceduralAsset)">
            <summary>Called after the asset is saved.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.TextGenerator.Save(UnityEngine.Object@,System.String,System.Boolean@)">
            <summary>Does nothing because <see cref="T:UnityEngine.TextAsset"/>s are saved inside <see cref="M:Weaver.Editor.Procedural.TextGenerator.InvokeGeneratorMethod(Weaver.Editor.Procedural.ProceduralAsset)"/>.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.TextGenerator.HowToCancel">
            <summary>Explains how to cancel the generation of an asset.</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.TextureGenerator">
            <summary>[Editor-Only]
            An <see cref="T:Weaver.Editor.Procedural.AssetGenerator"/> which saves <see cref="T:UnityEngine.Texture2D"/>s as ".png" image files.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.TextureGenerator.DefaultFileExtension">
            <summary>.png</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.TextureGenerator.GeneratorMethodReturnType">
            <summary>The default return type for generator methods used by this generator.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.TextureGenerator.Save(UnityEngine.Texture2D,System.String)">
            <summary>Saves `texture` as a PNG at `assetPath`.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.TextureGenerator.Save(UnityEngine.Object@,System.String,System.Boolean@)">
            <summary>Saves `asset` as a texture at `assetPath`.</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.AssetGeneratorWindow">
            <summary>[Editor-Only, Internal]
            An <see cref="T:UnityEditor.EditorWindow"/> which executes the generation of procedural assets.
            </summary>
        </member>
        <member name="E:Weaver.Editor.Procedural.AssetGeneratorWindow.OnComplete">
            <summary>
            Called when all assets are finished generating.
            The parameter indicates whether generation was successful.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetGeneratorWindow.RefreshSelection">
            <summary>
            Refreshes the selection if any of the generated assets are currently selected in the Project Window.
            This ensures that any previews are refreshed immediately.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AssetGeneratorWindow.VerifyAssetDependancy(Weaver.Editor.Procedural.ProceduralAsset)">
            <summary>
            Verifies that the `dependancy` has been generated before the current asset.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.AutoGenerateOnSave">
            <summary>[Editor-Only, Internal]
            Automatically generates all procedural assets with <see cref="P:Weaver.ProceduralAssetAttribute.AutoGenerateOnSave"/>
            when assets are saved (such as when the user presses Ctrl + S to save the scene).
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.AutoGenerateOnSave.AutoGenerateAll(System.Boolean)">
            <summary>
            Generates all procedural assets which use <see cref="T:Weaver.Editor.Procedural.SimpleScriptBuilder"/>s if their
            <see cref="P:Weaver.ProceduralAssetAttribute.AutoGenerateOnSave"/> property is true.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.CustomLayerMask">
            <summary>[Editor-Only, Internal]
            A custom bit mask corresponding to the project's physics layers.
            </summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.CustomLayerMask.layers">
            <summary>
            Bit mask corresponding to <see cref="P:UnityEditorInternal.InternalEditorUtility.layers"/> (not the actual
            value of this <see cref="T:Weaver.Editor.Procedural.CustomLayerMask"/>).
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.CustomLayerMask.Value">
            <summary>The actual bit mask value of this <see cref="T:Weaver.Editor.Procedural.CustomLayerMask"/>.</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.LayerManager">
            <summary>[Editor-Only, Internal]
            The central point for the <see cref="T:Weaver.Editor.Procedural.LayersScriptBuilder"/> to access the details it needs.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.LayersScriptBuilder">
            <summary>[Editor-Only, Internal]
            Procedurally generates a script containing constants corresponding to the physics layers in your project.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.LayersScriptBuilder.Enabled">
            <summary>Indicates whether this script should be generated.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.LayersScriptBuilder.AppendScript(System.Text.StringBuilder)">
            <summary>Appends the declaration of the elements of this script in C# code to the specified `text`.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.LayersScriptBuilder.AppendSaveMessage">
            <summary>Appends the details of the current script to the <see cref="P:Weaver.Editor.Procedural.ScriptGenerator.SaveMessage"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.LayersScriptBuilder.#ctor(System.Action{System.Text.StringBuilder},System.String[])">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.LayersScriptBuilder"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.LayersScriptBuilder.#ctor(System.Action{System.Text.StringBuilder})">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.LayersScriptBuilder"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.LayersScriptBuilder.GatherScriptDetails">
            <summary>Gathers the element details of this script.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.LayersScriptBuilder.GatherExtraMembers">
            <summary>Gathers the details of members in addition to the main layers.</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.CustomNavAreaMask">
            <summary>[Editor-Only, Internal]
            A custom bit mask corresponding to the project's navigation areas.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.NavAreaManager">
            <summary>[Editor-Only, Internal]
            The central point for the <see cref="T:Weaver.Editor.Procedural.NavigationAreasScriptBuilder"/> to access the details it needs.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.NavigationAreasScriptBuilder">
            <summary>[Editor-Only, Internal]
            Procedurally generates a script containing constants corresponding to the navigation areas in your project.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.NavigationAreasScriptBuilder.AppendSaveMessage">
            <summary>Appends the details of the current script to the <see cref="P:Weaver.Editor.Procedural.ScriptGenerator.SaveMessage"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.NavigationAreasScriptBuilder.#ctor(System.Action{System.Text.StringBuilder})">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.NavigationAreasScriptBuilder"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.NavigationAreasScriptBuilder.GatherExtraMembers">
            <summary>Gathers the details of members in addition to the main layers.</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.AccessModifiers">
            <summary>[Editor-Only] The C# access modifiers of a member.</summary>
            <remarks>Public/Internal/Protected/Private are sorted from least to most restrictive.</remarks>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.CSharpProcedural">
            <summary>[Editor-Only] A variety of methods relating to procedurally generating C# code.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.Contains(Weaver.Editor.Procedural.Scripting.AccessModifiers,Weaver.Editor.Procedural.Scripting.AccessModifiers)">
            <summary>
            Returns true if `modifiers` contains all of the flags specified in `contains`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendDeclaration(Weaver.Editor.Procedural.Scripting.AccessModifiers,System.Text.StringBuilder)">
            <summary>
            Appends the C# declaration of the specified access `modifiers` to the `text`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.GetDeclaration(Weaver.Editor.Procedural.Scripting.AccessModifiers)">
            <summary>
            Returns the C# declaration of the specified access `modifiers`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.HasModifiers(System.Type,Weaver.Editor.Procedural.Scripting.AccessModifiers)">
            <summary>
            Returns true if the specified `type` has the specified access `modifiers`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.HasModifiers(System.Reflection.FieldInfo,Weaver.Editor.Procedural.Scripting.AccessModifiers)">
            <summary>
            Returns true if the specified `field` has the specified access `modifiers`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.HasModifiers(System.Reflection.MethodBase,Weaver.Editor.Procedural.Scripting.AccessModifiers)">
            <summary>
            Returns true if the specified `method` has the specified access `modifiers`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.HasModifiers(System.Reflection.PropertyInfo,Weaver.Editor.Procedural.Scripting.AccessModifiers,Weaver.Editor.Procedural.Scripting.AccessModifiers)">
            <summary>
            Returns true if the specified `property` has the specified access `modifiers`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.HasModifiers(System.Reflection.PropertyInfo,Weaver.Editor.Procedural.Scripting.AccessModifiers)">
            <summary>
            Returns true if the specified `property` has the specified access `modifiers`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.GetRestrictivenessModifier(System.Reflection.MethodInfo)">
            <summary>
            Returns the restrictiveness modifier (public/private/protected/internal) of the specified `method`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.OpenScope(System.Text.StringBuilder,System.Int32@)">
            <summary><c>text.Indent(indent++).AppendLineConst("{");</c></summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.CloseScope(System.Text.StringBuilder,System.Int32@)">
            <summary><c>text.Indent(--indent).AppendLineConst("}");</c></summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.CloseScopeFully(System.Text.StringBuilder,System.Int32)">
            <summary>Appends closing brackets and new lines until the nestCount reaches 0.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendForLoop(System.Text.StringBuilder,System.Int32,System.String,System.String)">
            <summary>
            Appends the opening of a for loop: for (int i = 0; i &lt; length; i++).
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendDefault``1(System.Text.StringBuilder)">
            <summary>Appends "null" for classes or "default(T)" for structs.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendDefault(System.Text.StringBuilder,System.Type)">
            <summary>Appends "null" for classes or "default(type)" for structs.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendRegion(System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Indents the text by the specified amount and appends #region regionName.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendEndRegion(System.Text.StringBuilder,System.Int32)">
            <summary>
            Indents the text by the specified amount and appends #endregion.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendSingleLineXmlComment(System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Appends `comment` inside summary tags as appropriate for a C# XML comment.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendInterfaceMethodCall(System.Text.StringBuilder,System.Type,System.Type,System.String,System.String)">
            <summary>
            Appends a call to the specified `methodName`. If the method is non-public, the object is casted to the
            `interfaceType` to call an explicitly implemented method.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.ToStringCS(System.Boolean)">
            <summary>
            Returns a string representation of the `value` as a C# literal: either "true" or "false" instead of the
            uppercase forms returned by <see cref="M:System.Boolean.ToString"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendUnderscoredFullName(System.Text.StringBuilder,System.Type)">
            <summary>
            Appends the full name of the given type with underscores instead of any characters that wouldn't be valid
            in a symbol name.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.IsValidInMemberName(System.Char)">
            <summary>Checks if the specified char can be used in a C# symbol name.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.ValidateMemberName(System.String,System.Boolean)">
            <summary>
            Converts the specified string into a valid member name by skipping any invalid characters or replacing them with underscores.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.ValidateMemberName(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts the specified sub-string into a valid member name by skipping any invalid characters or replacing them with underscores.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendStringLiteral(System.Text.StringBuilder,System.String)">
            <summary>Appends the `literal` with escape characters inserted as necessary.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.GetInitializer(System.Object)">
            <summary>
            Tries to return a string which could be used as a C# field initializer to give the field the specified `value`.
            Returns null if the 'value is null or if unable to determine the appropriate field initializer.
            <para></para>
            If the value is a custom type with a static string GetInitializer(T value) method, that method will be called to determine the result.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendObsoleteDeclaration(System.Text.StringBuilder,System.Int32,System.Reflection.MemberInfo,System.String,System.Boolean)">
            <summary>
            Appends the C# declaration of a member with a signature matching the specified `member` and an [Obsolete] attribute.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendObsoleteDeclaration(System.Text.StringBuilder,System.Int32,System.Type,System.String,System.Boolean)">
            <summary>
            Appends the C# declaration of a type with a signature matching the specified `type` and an [Obsolete] attribute.
            <para></para>
            Also calls <see cref="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendObsoleteDeclaration(System.Text.StringBuilder,System.Int32,System.Reflection.MemberInfo,System.String,System.Boolean)"/> for each of the type's members.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendObsoleteDeclaration(System.Text.StringBuilder,System.Int32,System.Reflection.ConstructorInfo,System.String,System.Boolean)">
            <summary>
            Appends the C# declaration of a constructor with a signature matching the specified `constructor` and an [Obsolete] attribute.
            <para></para>
            The body of the constructor will simply throw a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendObsoleteDeclaration(System.Text.StringBuilder,System.Int32,System.Reflection.FieldInfo,System.String,System.Boolean)">
            <summary>
            Appends the C# declaration of a field with a signature matching the specified `field` and an [Obsolete] attribute.
            <para></para>
            If the field is static and <see cref="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.GetInitializer(System.Object)"/> is able to determine the initializer for
            its current value, that initializer will also be included.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendObsoleteDeclaration(System.Text.StringBuilder,System.Int32,System.Reflection.PropertyInfo,System.String,System.Boolean)">
            <summary>
            Appends the C# declaration of a property with a signature matching the specified `property` and an [Obsolete] attribute.
            <para></para>
            The body of the property will simply throw a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendObsoleteDeclaration(System.Text.StringBuilder,System.Int32,System.Reflection.MethodInfo,System.String,System.Boolean)">
            <summary>
            Appends the C# declaration of a method with a signature matching the specified `method` and an [Obsolete] attribute.
            <para></para>
            The body of the method will simply throw a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendObsoleteAttribute(System.Text.StringBuilder,System.Int32,System.String,System.Boolean)">
            <summary>
            Appends an [<see cref="T:System.ObsoleteAttribute"/>] with the specified message in its constructor.
            <para></para>
            If `message` is null, this method does nothing.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendUnhandledMember(System.Text.StringBuilder,System.Int32,System.Reflection.MemberInfo)">
            <summary>
            Appends and logs a message indicating that the specified `member` was not handled.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.AppendObsoleteMethodBody(System.Text.StringBuilder,System.Reflection.MemberInfo,System.String)">
            <summary>
            Appends a method body which throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.GetKeyword(Weaver.Editor.Procedural.Scripting.ParameterModifier)">
            <summary>Gets the C# keyword associated with the `modifier`.</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.CachedTypeInfo">
            <summary>[Editor-Only]
            Encapsulates information about a <see cref="F:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.Type"/> for easy access and efficient reuse.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.Get(System.Type)">
            <summary>
            Returns a <see cref="T:Weaver.Editor.Procedural.Scripting.CachedTypeInfo"/> which encapsulates the specified `type` and caches it for efficient reuse.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.Get(System.String)">
            <summary>
            Returns a <see cref="T:Weaver.Editor.Procedural.Scripting.CachedTypeInfo"/> which encapsulates the <see cref="F:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.Type"/> with the specified `fullname`
            and caches it for efficient reuse.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.FindExistingType(System.String,System.String,System.Boolean@)">
            <summary>
            Tries to find and return the info for a type with the specified `fullName`. Otherwise searches for a type
            with the `name` in any namespace.
            </summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.Type">
            <summary>The encapsulated <see cref="F:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.Type"/>.</summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.Members">
            <summary>
            The members of the encapsulated <see cref="F:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.Type"/>.
            This list will be null if there are no members.
            </summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.NestedTypes">
            <summary>
            The <see cref="T:Weaver.Editor.Procedural.Scripting.CachedTypeInfo"/> for the types nested in the encapsulated <see cref="F:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.Type"/>.
            This list will be null if there are no nested types.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.GetNestedType(System.String)">
            <summary>
            Returns the nested type with the specified `name` (if one exists).
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.HasAnyObsoleteMembers">
            <summary>
            Returns true if any of the members in the encapsulated type or any nested type are marked with an
            [<see cref="T:System.ObsoleteAttribute"/>].
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.GetDescription">
            <summary>
            Returns a description of the encapsulated <see cref="F:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.Type"/> and its <see cref="F:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.Members"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.AppendDescription(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends a description of the encapsulated <see cref="F:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.Type"/> and its <see cref="F:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.Members"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.ToString">
            <summary>
            Returns <see cref="F:Weaver.Editor.Procedural.Scripting.CachedTypeInfo.Type"/>.ToString().
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.ConstructorBuilder">
            <summary>[Editor-Only]
            Manages the details for building a constructor in a procedural C# script.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.Parameters">
            <summary>This method's parameters. Corresponds to the <see cref="M:System.Reflection.MethodBase.GetParameters"/>.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.BodyBuilder">
            <summary>The delegate used to build the body of this method.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.AppendBaseParameters">
            <summary>
            Appends the parameters passed into the base constructor, I.E.
            "... : base(<see cref="P:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.AppendBaseParameters"/>)".
            </summary>
            <remarks>This value is not considered when determining if the script needs to be regenerated.</remarks>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.ExistingConstructor">
            <summary>
            The <see cref="T:System.Reflection.ConstructorInfo"/> of the method with the same parameters as this builder.
            This property is gathered by <see cref="M:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.IsExistingMember(System.Reflection.MemberInfo,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.ExistingMember">
            <summary>
            The <see cref="T:System.Reflection.ConstructorInfo"/> of the method with the same parameters as this builder.
            This property is gathered by <see cref="M:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.IsExistingMember(System.Reflection.MemberInfo,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.MemberType">
            <summary>This is a <see cref="F:System.Reflection.MemberTypes.Constructor"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.GetDefaultCommentBuilder">
            <summary>
            Returns the default method to use to build XML comments for this member. Called once by the constructor.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.#ctor">
            <summary>
            Creates a new <see cref="T:Weaver.Editor.Procedural.Scripting.ConstructorBuilder"/> with default values.
            <para></para>
            Consider using one of the overloads of Get instead, in order to utilise object pooling to minimise memory
            allocation and garbage collection.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.Get(Weaver.Editor.Procedural.Scripting.TypeBuilder,Weaver.Editor.Procedural.Scripting.ParameterBuilder[],Weaver.Editor.Procedural.Scripting.AppendFunction)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.ConstructorBuilder"/> from the object pool and initialize it with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.Get(Weaver.Editor.Procedural.Scripting.TypeBuilder,Weaver.Editor.Procedural.Scripting.AppendFunction)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.ConstructorBuilder"/> from the object pool and initialize it with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.ReleaseToPool">
            <inheritdoc/>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.IsExistingMember(System.Reflection.MemberInfo,System.Boolean@)">
            <summary>
            Checks if the <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Name"/>, <see cref="P:Weaver.Editor.Procedural.Scripting.MemberBuilder.Modifiers"/>, and parameters match
            the `existingMember`.
            <para></para>
            If the member matches, this method returns true and the member can be accessed via <see cref="P:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.ExistingMember"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ConstructorBuilder.AppendScript(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends the declaration of this method in C# code to the specified `text`.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.ElementBuilder">
            <summary>[Editor-Only] Base class for building any element in a procedural script such as namespaces, types, fields, etc.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.ScriptBuilder">
            <summary>
            The <see cref="T:Weaver.Editor.Procedural.Scripting.ScriptBuilder"/> in which this element is currently being used.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Parent">
            <summary>The builder of the type in which this element will be declared.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.NameSource">
            <summary>The source string which will be used to determine the actual <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Name"/> of this element.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Name">
            <summary>
            The actual <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Name"/> of this element.
            This value is derived from <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.NameSource"/> during <see cref="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.PrepareToBuild(System.Boolean,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.IsFallbackName">
            <summary>
            Indicates whether the current <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Name"/> of this element is the primary name derived from the
            <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.NameSource"/>. A value of false means that there was a name conflict between this element and
            another, and the <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Name"/> was re-derived using <see cref="M:Weaver.Editor.Procedural.Scripting.ScriptBuilder.GetFallbackMemberName(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.CompilationSymbolIndex">
            <summary>
            The index in <see cref="P:Weaver.Editor.Procedural.Scripting.ScriptBuilder.CompilationSymbols"/> of the symbol in which this element will be declared, I.E. #if SYMBOL.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.RegionIndex">
            <summary>
            The index in <see cref="P:Weaver.Editor.Procedural.Scripting.ScriptBuilder.Regions"/> of the region in which this element will be declared, I.E. #region Region Name.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.CommentBuilder">
            <summary>
            This delegate is used to append the XML comment for this element. By default it will simply append the <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.NameSource"/>.
            </summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.Scripting.ElementBuilder.DefaultCommentBuilder">
            <summary>
            The default delegate to use to build the XML comment for this element.
            Assigned using the return value of <see cref="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.GetDefaultCommentBuilder"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.GetDefaultCommentBuilder">
            <summary>
            Returns the default method to use to build XML comments for this element. Called once by the constructor.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.MemberType">
            <summary>
            The type of member which this element builds.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Namespace">
            <summary>The name of the <see cref="T:Weaver.Editor.Procedural.Scripting.NamespaceBuilder"/> containing this type (or null if there isn't one).</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.FullName">
            <summary>
            Returns the full name of this element, including its <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Parent"/> (and any types and namespaces it
            is nested inside).
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.AppendFullName(System.Text.StringBuilder)">
            <summary>
            Appends the full name of this element, including its <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Parent"/> (and any types and namespaces it
            is nested inside).
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.HasExistingMember">
            <summary>
            Returns true if this element is associated with an existing <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.#ctor">
            <summary>
            Creates a new <see cref="T:Weaver.Editor.Procedural.Scripting.MemberBuilder"/> with the default values.
            <para></para>
            Consider using one of the overloads of Get instead, in order to utilise object pooling to minimise memory
            allocation and garbage collection.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.Initialize(Weaver.Editor.Procedural.Scripting.IElementBuilderGroup,System.String)">
            <summary>
            Assigns the specified parameters to this element and determines the <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Name"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.DetermineMemberName(Weaver.Editor.Procedural.Scripting.ScriptBuilder)">
            <summary>
            Uses the specified <see cref="M:Weaver.Editor.Procedural.Scripting.ScriptBuilder.GetMemberName(System.String,System.String,System.Boolean@)"/> to determine the <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Name"/> of this element.
            </summary>
            <param name="scriptBuilder"></param>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.IsExistingMember(System.Reflection.MemberInfo,System.Boolean@)">
            <summary>Checks if the `existingMember` corresponds to this element.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.Reset">
            <summary>Resets all of the fields and properties of this element to their default values.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.ReleaseToPool">
            <summary>Resets this element and adds it to its object pool to be reused later.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.AppendScript(System.Text.StringBuilder,System.Int32)">
            <summary>Appends the declaration of this element in C# code to the specified `text`.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.AppendHeader(System.Text.StringBuilder,System.Int32)">
            <summary>Appends a C# XML comment using the <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.CommentBuilder"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.SetName(System.String)">
            <summary>Sets the <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Name"/> and <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.NameSource"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.ToString">
            <summary>
            Returns a summary of this element including its type, <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.NameSource"/>, <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Name"/>, and <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.FullName"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.GetDescription">
            <summary>
            Gets a description of this element by calling <see cref="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.ToString"/> on it and any sub-members.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.AppendDescription(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends a description of this element by calling <see cref="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.ToString"/> on it.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.FieldBuilder">
            <summary>[Editor-Only] Manages the details for building a field in a procedural C# script.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.FieldBuilder.FieldType">
            <summary>The type of object this field holds. Corresponds to <see cref="P:System.Reflection.FieldInfo.FieldType"/>.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.FieldBuilder.Value">
            <summary>The initial value of the field.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.FieldBuilder.ValueEquals">
            <summary>
            Used to check if the specified <see cref="T:System.Object"/> is equal to the <see cref="P:Weaver.Editor.Procedural.Scripting.FieldBuilder.Value"/> of this field when
            determining if the script needs to be rebuilt. If null, the check will be skipped.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.FieldBuilder.AppendInitializerMethod">
            <summary>
            A delegate used to append the initializer for a field.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.FieldBuilder.AppendInitializer">
            <summary>
            A method which takes the following parameters and appends an appropriate field initializer:
            (<see cref="T:System.Text.StringBuilder"/> text, <see cref="T:System.Int32"/> indent, <see cref="T:System.Object"/> value).
            <para></para>
            By default, <see cref="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.GetInitializer(System.Object)"/> will be used.
            <para></para>
            Note that this delegate is called immediately after the field name and before the semicolon, so it must
            begin with " = " to assign a value and should not append a semicolon at the end.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.FieldBuilder.ExistingField">
            <summary>
            The <see cref="T:System.Reflection.FieldInfo"/> of the field with the same type and name as this builder.
            This property is gathered by <see cref="M:Weaver.Editor.Procedural.Scripting.FieldBuilder.IsExistingMember(System.Reflection.MemberInfo,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.FieldBuilder.ExistingMember">
            <summary>
            The <see cref="T:System.Reflection.FieldInfo"/> of the field with the same type and name as this builder.
            This property is gathered by <see cref="M:Weaver.Editor.Procedural.Scripting.FieldBuilder.IsExistingMember(System.Reflection.MemberInfo,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.FieldBuilder.MemberType">
            <summary>This is a <see cref="F:System.Reflection.MemberTypes.Field"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.FieldBuilder.Get(Weaver.Editor.Procedural.Scripting.TypeBuilder,System.String,Weaver.Editor.Procedural.Scripting.TypeName)">
            <summary>
            Returns a <see cref="T:Weaver.Editor.Procedural.Scripting.FieldBuilder"/> from the object pool and initialize it with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.FieldBuilder.Get(Weaver.Editor.Procedural.Scripting.TypeBuilder,System.String,System.Type)">
            <summary>
            Returns a <see cref="T:Weaver.Editor.Procedural.Scripting.FieldBuilder"/> from the object pool and initialize it with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.FieldBuilder.Get``1(Weaver.Editor.Procedural.Scripting.TypeBuilder,System.String,``0)">
            <summary>
            Returns a <see cref="T:Weaver.Editor.Procedural.Scripting.FieldBuilder"/> from the object pool and initialize it with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.FieldBuilder.#ctor">
            <summary>
            Creates a new <see cref="T:Weaver.Editor.Procedural.Scripting.FieldBuilder"/> with the default values.
            <para></para>
            Consider using one of the overloads of Get instead, in order to utilise object pooling to minimise memory
            allocation and garbage collection.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.FieldBuilder.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.FieldBuilder.ReleaseToPool">
            <inheritdoc/>
        </member>
        <member name="F:Weaver.Editor.Procedural.Scripting.FieldBuilder.DefaultAppendInitializer">
            <summary>
            The default delegate assigned to <see cref="P:Weaver.Editor.Procedural.Scripting.FieldBuilder.AppendInitializer"/>.
            It simply calls <see cref="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.GetInitializer(System.Object)"/> and appends the result if it isn't null.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.FieldBuilder.IsExistingMember(System.Reflection.MemberInfo,System.Boolean@)">
            <summary>
            Checks if the <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Name"/>, <see cref="P:Weaver.Editor.Procedural.Scripting.MemberBuilder.Modifiers"/>,
            <see cref="P:Weaver.Editor.Procedural.Scripting.FieldBuilder.FieldType"/>, and <see cref="P:Weaver.Editor.Procedural.Scripting.FieldBuilder.Value"/> match the `existingMember`.
            <para></para>
            If the member matches, this method returns true and the member can be accessed via <see cref="P:Weaver.Editor.Procedural.Scripting.FieldBuilder.ExistingMember"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.FieldBuilder.DefaultValueEquals(System.Object)">
            <summary>
            Uses <see cref="M:System.Object.Equals(System.Object,System.Object)"/> to determine if the <see cref="P:Weaver.Editor.Procedural.Scripting.FieldBuilder.Value"/> is equal to <paramref name="other"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.FieldBuilder.AppendScript(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends the declaration of this field in C# code to the specified `text`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.FieldBuilder.ToString">
            <summary>
            Returns a summary of this field including its type, <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.NameSource"/>,
            <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Name"/>, <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.FullName"/>, and <see cref="P:Weaver.Editor.Procedural.Scripting.FieldBuilder.Value"/>.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup">
            <summary>[Editor-Only] A manager for a list of <see cref="T:Weaver.Editor.Procedural.Scripting.ElementBuilder"/>s.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.ScriptBuilder">
            <summary>
            The <see cref="P:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.ScriptBuilder"/> used by this type and its members to determine
            <see cref="P:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.Name"/>s, as well as for #region names, #if symbols, and the messages used for
            obsolete members.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.Parent">
            <summary>The builder of the type in which this element will be declared.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.Name">
            <summary>The name of this member.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.Namespace">
            <summary>The full name of the <see cref="T:Weaver.Editor.Procedural.Scripting.NamespaceBuilder"/> containing this object (or null if there isn't one).</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.CompilationSymbolIndex">
            <summary>
            The index in <see cref="P:Weaver.Editor.Procedural.Scripting.ScriptBuilder.CompilationSymbols"/> of the symbol in which this element will be declared, I.E. #if SYMBOL.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.RegionIndex">
            <summary>
            The index in <see cref="P:Weaver.Editor.Procedural.Scripting.ScriptBuilder.Regions"/> of the region in which this element will be declared, I.E. #region Region Name.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.HasExistingMember">
            <summary>
            Returns true if this element is associated with an existing <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.Elements">
            <summary>The members to build in this type.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.AppendFullName(System.Text.StringBuilder)">
            <summary>
            Appends the full name of this member, including its <see cref="P:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.Parent"/> (and any types and namespaces it
            is nested inside).
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.ReleaseToPool">
            <summary>
            Resets this element and adds it to its object pool to be reused later.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.ReleaseElementsToPool">
            <summary>
            Releases all elements currently in this group back to their respective pools.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.GetDescription">
            <summary>
            Gets a description of this group and its elements.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.ElementBuilderGroupExtensions">
            <summary>
            Various extension methods for <see cref="T:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilderGroupExtensions.ResolveMemberNamingConflicts(Weaver.Editor.Procedural.Scripting.IElementBuilderGroup)">
            <summary>
            Calls <see cref="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.ResolveNamingConflicts(System.Collections.Generic.Dictionary{System.String,Weaver.Editor.Procedural.Scripting.ElementBuilder})"/> on all <see cref="P:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.Elements"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilderGroupExtensions.PrepareMembersToBuild(Weaver.Editor.Procedural.Scripting.IElementBuilderGroup,System.Boolean,System.Boolean@)">
            <summary>
            Calls <see cref="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.PrepareToBuild(System.Boolean,System.Boolean@)"/> on all <see cref="P:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.Elements"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilderGroupExtensions.SortElements(Weaver.Editor.Procedural.Scripting.IElementBuilderGroup,System.Comparison{Weaver.Editor.Procedural.Scripting.ElementBuilder})">
            <summary>
            Sorts the <see cref="P:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.Elements"/> list using the specified `comparison` and maintaining
            the order of any elements with an identical comparison (unlike the standard
            <see cref="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})"/> method).
            <para></para>
            This method is also called recursively for any nested groups.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilderGroupExtensions.MatchElementRegion(Weaver.Editor.Procedural.Scripting.IElementBuilderGroup)">
            <summary>
            If all members have the same <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.RegionIndex"/>, this type will be given
            the same value and this method returns true. This method is called on its nested groups as well.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilderGroupExtensions.MatchElementCompilationSymbol(Weaver.Editor.Procedural.Scripting.IElementBuilderGroup)">
            <summary>
            If all members have the same <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.CompilationSymbolIndex"/>, this type will be given
            the same value and this method returns true. This method is called on its nested groups as well.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilderGroupExtensions.AppendElements(Weaver.Editor.Procedural.Scripting.IElementBuilderGroup,System.Text.StringBuilder,System.Int32)">
            <summary>
            Calls <see cref="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.AppendScript(System.Text.StringBuilder,System.Int32)"/> on all <see cref="P:Weaver.Editor.Procedural.Scripting.IElementBuilderGroup.Elements"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilderGroupExtensions.ReleaseToPoolIfEmpty``1(``0@)">
            <summary>
            If the specified `type` has no members, remove it from its declaring type, call
            <see cref="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.ReleaseToPool"/>, and set the reference to null.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ElementBuilderGroupExtensions.ReleaseElementsToPool(System.Collections.Generic.List{Weaver.Editor.Procedural.Scripting.ElementBuilder})">
            <summary>
            Calls <see cref="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.ReleaseToPool"/> on each item in the list, then clears it.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.MemberBuilder">
            <summary>[Editor-Only] Base class for building a particular type of member in a procedural C# script.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.MemberBuilder.ExistingMember">
            <summary>
            The <see cref="T:System.Reflection.MemberInfo"/> of the member with the same type and name as this builder.
            This property is gathered during <see cref="M:Weaver.Editor.Procedural.Scripting.MemberBuilder.PrepareToBuild(System.Boolean,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.MemberBuilder.HasExistingMember">
            <summary>
            Returns true if this element is associated with an existing <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.MemberBuilder.Modifiers">
            <summary>The access modifiers of this member.</summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.Scripting.MemberBuilder.DefaultModifiers">
            <summary>The default access modifiers for this member.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.MemberBuilder.Attributes">
            <summary>The custom attribute types for this member.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.MemberBuilder.SetAttributes(System.Type[])">
            <summary>Sets the <see cref="P:Weaver.Editor.Procedural.Scripting.MemberBuilder.Attributes"/> array.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.MemberBuilder.AttributeConstructorBuilders">
            <summary>The methods used to build the constructor of each custom attribute for this member.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.MemberBuilder.SetAttributeConstructorBuilders(System.Action{System.Text.StringBuilder}[])">
            <summary>Sets the <see cref="P:Weaver.Editor.Procedural.Scripting.MemberBuilder.AttributeConstructorBuilders"/> array.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.MemberBuilder.#ctor(Weaver.Editor.Procedural.Scripting.AccessModifiers)">
            <summary>
            Creates a new <see cref="T:Weaver.Editor.Procedural.Scripting.MemberBuilder"/> with default values.
            <para></para>
            Consider using one of the overloads of Get instead, in order to utilise object pooling to minimise memory
            allocation and garbage collection.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.MemberBuilder.Reset">
            <summary>
            Reset all of the fields and properties of this member to their default values.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.MemberBuilder.IsExistingMember(System.Reflection.MemberInfo,System.Boolean@)">
            <summary>
            Checks if the <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Name"/> of this member matches the name of the `existingMember`.
            <para></para>
            Overrides of this method should check other factors to ensure that the existing member matches this builder
            (such as field type and access modifiers) and if so, cache the member so it can be returned by <see cref="P:Weaver.Editor.Procedural.Scripting.MemberBuilder.ExistingMember"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.MemberBuilder.AppendHeader(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends a C# XML comment using the <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.CommentBuilder"/> followed by any
            <see cref="P:Weaver.Editor.Procedural.Scripting.MemberBuilder.Attributes"/>.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.MethodBuilder">
            <summary>[Editor-Only] Manages the details for building a method in a procedural C# script.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.MethodBuilder.ReturnType">
            <summary>The type of object this method returns. Corresponds to <see cref="P:System.Reflection.MethodInfo.ReturnType"/>.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.MethodBuilder.Parameters">
            <summary>This method's parameters. Corresponds to the <see cref="M:System.Reflection.MethodBase.GetParameters"/>.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.MethodBuilder.BodyBuilder">
            <summary>
            This delegate is used to build the body of this method.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.MethodBuilder.ExistingMethod">
            <summary>
            The <see cref="T:System.Reflection.MethodInfo"/> of the method with the same type and name as this builder.
            This property is gathered by <see cref="M:Weaver.Editor.Procedural.Scripting.MethodBuilder.IsExistingMember(System.Reflection.MemberInfo,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.MethodBuilder.ExistingMember">
            <summary>
            The <see cref="T:System.Reflection.MethodInfo"/> of the method with the same type and name as this builder.
            This property is gathered by <see cref="M:Weaver.Editor.Procedural.Scripting.MethodBuilder.IsExistingMember(System.Reflection.MemberInfo,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.MethodBuilder.MemberType">
            <summary>This is a <see cref="F:System.Reflection.MemberTypes.Method"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.MethodBuilder.Get(Weaver.Editor.Procedural.Scripting.TypeBuilder,System.String,Weaver.Editor.Procedural.Scripting.TypeName,Weaver.Editor.Procedural.Scripting.ParameterBuilder[],Weaver.Editor.Procedural.Scripting.AppendFunction)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.MethodBuilder"/> from the object pool and initialize it with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.MethodBuilder.Get(Weaver.Editor.Procedural.Scripting.TypeBuilder,System.String,Weaver.Editor.Procedural.Scripting.TypeName,Weaver.Editor.Procedural.Scripting.AppendFunction)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.MethodBuilder"/> from the object pool and initialize it with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.MethodBuilder.Get(Weaver.Editor.Procedural.Scripting.TypeBuilder,System.String,Weaver.Editor.Procedural.Scripting.AppendFunction)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.MethodBuilder"/> from the object pool and initialize it with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.MethodBuilder.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.MethodBuilder.ReleaseToPool">
            <inheritdoc/>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.MethodBuilder.IsExistingMember(System.Reflection.MemberInfo,System.Boolean@)">
            <summary>
            Checks if the <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Name"/>, <see cref="P:Weaver.Editor.Procedural.Scripting.MemberBuilder.Modifiers"/>,
            <see cref="P:Weaver.Editor.Procedural.Scripting.MethodBuilder.ReturnType"/>, and parameters match the `existingMember`.
            <para></para>
            If the member matches, this method returns true and the member can be accessed via <see cref="P:Weaver.Editor.Procedural.Scripting.MethodBuilder.ExistingMember"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.MethodBuilder.AppendScript(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends the declaration of this method in C# code to the specified `text`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.MethodBuilder.AppendBody(System.Text.StringBuilder,System.Int32,Weaver.Editor.Procedural.Scripting.AppendFunction)">
            <summary>Appends a method body.</summary>
            <remarks>
            If the body starts with whitespace, it is surrounded by braces and given multiple lines:
            <para></para><code>
            ... Method(...)
            {
            Body
            }
            </code>
            Otherwise it is appended as an expression-bodied method:
            <para></para><code>
            ... Method(...) => Body;
            </code>
            </remarks>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.NamespaceBuilder">
            <summary>[Editor-Only] Manages the details for building a namespace in a procedural C# script.</summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.Elements">
            <summary>
            The members to build in this type, including <see cref="T:Weaver.Editor.Procedural.Scripting.TypeBuilder"/>s for any nested types.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.MemberType">
            <summary>Namespaces are not members, so this property returns <see cref="F:System.Reflection.MemberTypes.Custom"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.GetDefaultCommentBuilder">
            <summary>Namespaces are not generally allowed to have comments.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.Namespace">
            <inheritdoc/>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.Get(Weaver.Editor.Procedural.Scripting.ScriptBuilder,System.String)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.NamespaceBuilder"/> from the object pool and initialize it with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.Get(Weaver.Editor.Procedural.Scripting.IElementBuilderGroup,System.String)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.NamespaceBuilder"/> from the object pool and initialize it with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.IsExistingMember(System.Reflection.MemberInfo,System.Boolean@)">
            <summary>
            Returns false because namespaces don't have any <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.ReleaseToPool">
            <inheritdoc/>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.ReleaseElementsToPool">
            <summary>
            Releases all elements currently in this namespace back to their respective pools.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.PrepareForReuse">
            <summary>
            Reset this type and call <see cref="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.ReleaseToPool"/> on all its members so that it can be
            reused without releasing this type itself to the pool.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.AddMember``1(``0)">
            <summary>
            Adds the specified `member` to the <see cref="F:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.Elements"/> list and returns it.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.AddNamespace(System.String)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.ConstructorBuilder"/> from the object pool and initialize it with the specified parameters as a
            member of this namespace.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.AddType(System.String,Weaver.Editor.Procedural.Scripting.CachedTypeInfo)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.TypeBuilder"/> from the object pool and initialize it with the specified parameters as a
            member of this namespace.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.AddType(System.String,System.Type)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.TypeBuilder"/> from the object pool and initialize it with the specified parameters as a
            member of this namespace.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.AddType(System.String)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.TypeBuilder"/> from the object pool and initialize it with the specified parameters as a
            member of this namespace.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.AppendScript(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends the declaration of this namespace in C# code to the specified `text`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.AppendDescription(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends a description of this namespace and its <see cref="F:Weaver.Editor.Procedural.Scripting.NamespaceBuilder.Elements"/>.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.ParameterBuilder">
            <summary>[Editor-Only] The details of a procedural method parameter.</summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.Scripting.ParameterBuilder.Modifier">
            <summary>The prefix keyword of the parameter (.</summary>
            <remarks>This value is not considered when determining if a script needs to be regenerated.</remarks>
        </member>
        <member name="F:Weaver.Editor.Procedural.Scripting.ParameterBuilder.Type">
            <summary>The name of the parameter type.</summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.Scripting.ParameterBuilder.Name">
            <summary>The C# name of this parameter.</summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.Scripting.ParameterBuilder.DefaultValue">
            <summary>The default value of each of this parameter.</summary>
            <remarks>This value is not considered when determining if a script needs to be regenerated.</remarks>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ParameterBuilder.#ctor(Weaver.Editor.Procedural.Scripting.ParameterModifier,Weaver.Editor.Procedural.Scripting.TypeName,System.String,System.String)">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.Scripting.ParameterBuilder"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ParameterBuilder.#ctor(Weaver.Editor.Procedural.Scripting.TypeName,System.String,System.String)">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.Scripting.ParameterBuilder"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ParameterBuilder.IsParameter(System.Reflection.ParameterInfo)">
            <summary>Is this a match for the specified `parameter`?</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ParameterBuilder.AreParametersSame(System.Reflection.ParameterInfo[],Weaver.Editor.Procedural.Scripting.ParameterBuilder[])">
            <summary>Do all the `parameters` match the `builders`?</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ParameterBuilder.AppendDeclaration(System.Text.StringBuilder)">
            <summary>Appends the C# declaration of this parameter.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ParameterBuilder.AppendDeclaration(System.Text.StringBuilder,Weaver.Editor.Procedural.Scripting.ParameterBuilder[])">
            <summary>Appends the declaration of a set of method parameters.</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.ParameterModifier">
            <summary>A keyword that can go before a method parameter.</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.PropertyBuilder">
            <summary>[Editor-Only] Manages the details for building a property in a procedural C# script.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.PropertyBuilder.PropertyType">
            <summary>The type of object this property represents. Corresponds to <see cref="P:System.Reflection.PropertyInfo.PropertyType"/>.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.PropertyBuilder.GetterModifiers">
            <summary>The access modifiers of this property's getter. Matches those assigned to the property itself by default.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.PropertyBuilder.SetterModifiers">
            <summary>The access modifiers of this property's setter. Matches those assigned to the property itself by default.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.PropertyBuilder.GetterBuilder">
            <summary>The delegate used to build this property's getter. If null, this property has no getter.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.PropertyBuilder.SetterBuilder">
            <summary>The delegate used to build this property's setter. If null, this property has no setter.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.PropertyBuilder.ReturnValueEquals">
            <summary>
            If assigned, this delegate is used by <see cref="M:Weaver.Editor.Procedural.Scripting.PropertyBuilder.IsExistingMember(System.Reflection.MemberInfo,System.Boolean@)"/> to check the
            return value of the existing property's getter. Returning false indicates that the value is wrong and the
            script should be regenerated.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.PropertyBuilder.ExistingProperty">
            <summary>
            The <see cref="T:System.Reflection.PropertyInfo"/> of the property with the same type and name as this builder.
            This property is gathered by <see cref="M:Weaver.Editor.Procedural.Scripting.PropertyBuilder.IsExistingMember(System.Reflection.MemberInfo,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.PropertyBuilder.ExistingMember">
            <summary>
            The <see cref="T:System.Reflection.PropertyInfo"/> of the property with the same type and name as this builder.
            This property is gathered by <see cref="M:Weaver.Editor.Procedural.Scripting.PropertyBuilder.IsExistingMember(System.Reflection.MemberInfo,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.PropertyBuilder.MemberType">
            <summary>This is a <see cref="F:System.Reflection.MemberTypes.Property"/>.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.PropertyBuilder.Modifiers">
            <summary>
            The access modifiers of this property. Setting this value applies to both the getter and setter.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.PropertyBuilder.Get(Weaver.Editor.Procedural.Scripting.TypeBuilder,System.String,Weaver.Editor.Procedural.Scripting.TypeName,Weaver.Editor.Procedural.Scripting.AppendFunction,Weaver.Editor.Procedural.Scripting.AppendFunction)">
            <summary>Gets a <see cref="T:Weaver.Editor.Procedural.Scripting.PropertyBuilder"/> from the object pool and initializes it.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.PropertyBuilder.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.PropertyBuilder.ReleaseToPool">
            <inheritdoc/>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.PropertyBuilder.IsExistingMember(System.Reflection.MemberInfo,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.PropertyBuilder.AppendScript(System.Text.StringBuilder,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.ScriptBuilder">
            <summary>[Editor-Only]
            Determines the naming conventions for a procedural C# script, as well as for #region names, #if symbols, and
            the messages used for obsolete members.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ScriptBuilder.#ctor">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.Scripting.ScriptBuilder"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ScriptBuilder.LogRebuildReason(System.String)">
            <summary>Logs the `reason` that this script should be rebuilt.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ScriptBuilder.GetMemberName(System.String,System.String,System.Boolean@)">
            <summary>
            Converts the `nameSource` into a valid member name using <see cref="M:Weaver.Editor.Procedural.Scripting.ScriptBuilder.GetPrimaryMemberName(System.String)"/>. If the name
            is the same as the `declaringTypeName`, <see cref="M:Weaver.Editor.Procedural.Scripting.ScriptBuilder.GetFallbackMemberName(System.String,System.String)"/> will be used instead.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ScriptBuilder.GetPrimaryMemberName(System.String)">
            <summary>
            Converts the `nameSource` into a valid member name according to the desired naming convention.
            <para></para>
            By default, this method uses <see cref="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.ValidateMemberName(System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ScriptBuilder.GetFallbackMemberName(System.String,System.String)">
            <summary>
            Converts the `nameSource` into a valid member name according to the desired naming convention when the
            primary name returned by <see cref="M:Weaver.Editor.Procedural.Scripting.ScriptBuilder.GetPrimaryMemberName(System.String)"/> caused a naming conflict.
            <para></para>
            By default, this method uses <see cref="M:Weaver.Editor.Procedural.Scripting.CSharpProcedural.ValidateMemberName(System.String,System.Boolean)"/> with the
            `replaceWithUnderscores` parameter set to false.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ScriptBuilder.ObsoleteAttributeMessage">
            <summary>
            The message given to the [<see cref="T:System.ObsoleteAttribute"/>] constructor to be displayed whenever an
            obsolete member is referenced.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ScriptBuilder.ObsoleteMembersAreEditorOnly">
            <summary>
            If true, obsolete members will be contained in a #if UNITY_EDITOR region to ensure that the user removes
            all references to them prior to compiling a build (because otherwise they would get compile errors). By
            default this property returns true.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ScriptBuilder.CompilationSymbols">
            <summary>
            The conditional compilation symbols used in #if regions in the procedural script.
            The indices of these values are referenced by <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.CompilationSymbolIndex"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ScriptBuilder.Regions">
            <summary>
            The names used in #regions in the procedural script.
            The indices of these values are referenced by <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.RegionIndex"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ScriptBuilder.GetCompilationSymbolCount">
            <summary>
            Returns the number of <see cref="P:Weaver.Editor.Procedural.Scripting.ScriptBuilder.CompilationSymbols"/> .
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ScriptBuilder.GetRegionCount">
            <summary>
            Returns the number of <see cref="P:Weaver.Editor.Procedural.Scripting.ScriptBuilder.Regions"/> .
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.ScriptBuilder.HasBuildErrors">
            <summary>
            Returns true if any errors occurred during the last call to <see cref="M:Weaver.Editor.Procedural.Scripting.ElementBuilder.PrepareToBuild(System.Boolean,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.ScriptBuilder.PrepareToBuild(System.Boolean,System.Boolean)">
            <summary>
            Determines the <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Name"/> of this type's members, attempts to resolve any naming
            conflicts, matches existing <see cref="T:System.Reflection.MemberInfo"/>s with their appropriate members, and
            returns true if the script should be rebuilt for any reason (such as a member being added, removed, or renamed).
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.AppendFunction">
            <summary>[Editor-Only]
            A delegate which appends some text at the specified `indent` level.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.TypeBuilder">
            <summary>[Editor-Only] Manages the details for building a type in a procedural C# script.</summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.Scripting.TypeBuilder.Elements">
            <summary>
            The members to build in this type, including <see cref="T:Weaver.Editor.Procedural.Scripting.TypeBuilder"/>s for any nested types.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.TypeBuilder.DeclaringType">
            <summary>
            The <see cref="T:Weaver.Editor.Procedural.Scripting.TypeBuilder"/> which builds the type in which this type is nested (or null if this isn't nested).
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.TypeBuilder.ObsoleteMembers">
            <summary>
            During <see cref="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.PrepareToBuild(System.Boolean,System.Boolean@)"/> this type will compare all members in the existing
            <see cref="T:System.Type"/> with the <see cref="F:Weaver.Editor.Procedural.Scripting.TypeBuilder.Elements"/> to be built, and any that don't match up are kept in this
            list so they can be re-implemented as stubs and marked with the [<see cref="T:System.ObsoleteAttribute"/>] in order
            to avoid causing compile errors when members are removed or renamed when the script it rebuilt.
            <para></para>
            This list will be null if no obsolete members are found or if the `retainObsoleteMembers` parameter in
            <see cref="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.PrepareToBuild(System.Boolean,System.Boolean@)"/> is false.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.TypeBuilder.ExistingType">
            <summary>
            The <see cref="T:Weaver.Editor.Procedural.Scripting.CachedTypeInfo"/> of the type with the same type and name as this builder.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.TypeBuilder.ExistingMember">
            <summary>
            The <see cref="T:System.Type"/> of the type with the same type and name as this builder.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.TypeBuilder.MemberType">
            <summary>
            This builder is a <see cref="F:System.Reflection.MemberTypes.TypeInfo"/> if it has no <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Parent"/>,
            otherwise it is a <see cref="F:System.Reflection.MemberTypes.NestedType"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.TypeBuilder.BaseType">
            <summary>The <see cref="P:System.Type.BaseType"/> of the type being built.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.TypeBuilder.BaseTypeBuilder">
            <summary>The <see cref="T:Weaver.Editor.Procedural.Scripting.TypeBuilder"/> that will build the <see cref="P:Weaver.Editor.Procedural.Scripting.TypeBuilder.BaseType"/>.</summary>
            <remarks>Not used if the <see cref="P:Weaver.Editor.Procedural.Scripting.TypeBuilder.BaseType"/> is set.</remarks>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.TypeBuilder.AppendBaseType">
            <summary>Appends the name of the <see cref="P:System.Type.BaseType"/>.</summary>
            <remarks>Not used if the <see cref="P:Weaver.Editor.Procedural.Scripting.TypeBuilder.BaseType"/> or <see cref="P:Weaver.Editor.Procedural.Scripting.TypeBuilder.BaseTypeBuilder"/> are set.</remarks>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.Get(Weaver.Editor.Procedural.Scripting.ScriptBuilder,System.String)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.TypeBuilder"/> from the object pool and initialize it with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.Get(Weaver.Editor.Procedural.Scripting.IElementBuilderGroup,System.String)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.TypeBuilder"/> from the object pool and initialize it with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.Get(Weaver.Editor.Procedural.Scripting.IElementBuilderGroup,System.String,Weaver.Editor.Procedural.Scripting.CachedTypeInfo)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.TypeBuilder"/> from the object pool and initialize it with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.Get(Weaver.Editor.Procedural.Scripting.IElementBuilderGroup,System.String,System.Type)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.TypeBuilder"/> from the object pool and initialize it with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.Get(Weaver.Editor.Procedural.Scripting.TypeBuilder,System.String)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.TypeBuilder"/> from the object pool and initialize it with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.Reset">
            <inheritdoc/>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.ReleaseToPool">
            <inheritdoc/>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.ReleaseElementsToPool">
            <summary>
            Releases all elements currently in this type back to their respective pools.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.AddMember``1(``0)">
            <summary>
            Adds the specified `member` to the <see cref="F:Weaver.Editor.Procedural.Scripting.TypeBuilder.Elements"/> list and returns it.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.AddConstructor(Weaver.Editor.Procedural.Scripting.AppendFunction)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.ConstructorBuilder"/> from the object pool and initialize it with the specified parameters as a
            member of this type.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.AddConstructor(Weaver.Editor.Procedural.Scripting.ParameterBuilder[],Weaver.Editor.Procedural.Scripting.AppendFunction)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.ConstructorBuilder"/> from the object pool and initialize it with the specified parameters as a
            member of this type.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.AddField(System.String,System.Type)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.FieldBuilder"/> from the object pool and initialize it with the specified parameters as a
            member of this type.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.AddField(System.String,Weaver.Editor.Procedural.Scripting.TypeName)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.FieldBuilder"/> from the object pool and initialize it with the specified parameters as a
            member of this type.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.AddField``1(System.String,``0)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.FieldBuilder"/> from the object pool and initialize it with the specified parameters as a
            member of this type.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.AddProperty(System.String,Weaver.Editor.Procedural.Scripting.TypeName,Weaver.Editor.Procedural.Scripting.AppendFunction,Weaver.Editor.Procedural.Scripting.AppendFunction)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.PropertyBuilder"/> from the object pool and initialize it with the specified parameters as a
            member of this type.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.AddMethod(System.String,Weaver.Editor.Procedural.Scripting.AppendFunction)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.MethodBuilder"/> from the object pool and initialize it with the specified parameters as a
            member of this type.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.AddMethod(System.String,Weaver.Editor.Procedural.Scripting.TypeName,Weaver.Editor.Procedural.Scripting.AppendFunction)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.MethodBuilder"/> from the object pool and initialize it with the specified parameters as a
            member of this type.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.AddMethod(System.String,Weaver.Editor.Procedural.Scripting.TypeName,Weaver.Editor.Procedural.Scripting.ParameterBuilder[],Weaver.Editor.Procedural.Scripting.AppendFunction)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.MethodBuilder"/> from the object pool and initialize it with the specified parameters as a
            member of this type.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.AddNestedType(System.String)">
            <summary>
            Get a <see cref="T:Weaver.Editor.Procedural.Scripting.TypeBuilder"/> from the object pool and initialize it with the specified parameters as a
            member of this type.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.GetOrAddNestedTypesForDirectories(System.String)">
            <summary>
            Creates (if necessary) and returns a <see cref="T:Weaver.Editor.Procedural.Scripting.TypeBuilder"/> such that each directory in the specified
            `filePath` corresponds to a nested type.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.GetOrAddNestedTypesForDirectories(Weaver.Substring)">
            <summary>
            Creates (if necessary) and returns a <see cref="T:Weaver.Editor.Procedural.Scripting.TypeBuilder"/> such that each directory in the specified
            `filePath` corresponds to a nested type.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.GetOrAddNestedTypesForDirectories(Weaver.Substring,System.Int32)">
            <summary>
            Creates (if necessary) and returns a <see cref="T:Weaver.Editor.Procedural.Scripting.TypeBuilder"/> such that each directory in the specified
            `filePath` corresponds to a nested type.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.IsExistingMember(System.Reflection.MemberInfo,System.Boolean@)">
            <summary>
            Checks if the <see cref="P:Weaver.Editor.Procedural.Scripting.ElementBuilder.Name"/> and <see cref="P:Weaver.Editor.Procedural.Scripting.MemberBuilder.Modifiers"/> match the `existingMember`.
            <para></para>
            If the member matches, this method returns true and the member can be accessed via <see cref="P:Weaver.Editor.Procedural.Scripting.TypeBuilder.ExistingType"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.AppendScript(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends the declaration of this type in C# code to the specified `text`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeBuilder.AppendDescription(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends a description of this type and its <see cref="F:Weaver.Editor.Procedural.Scripting.TypeBuilder.Elements"/>.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.Scripting.TypeName">
            <summary>[Editor-Only] The name of a type.</summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.Scripting.TypeName.Type">
            <summary>The named <see cref="T:System.Type"/> (optional).</summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.Scripting.TypeName.Namespace">
            <summary>The <see cref="P:System.Type.Namespace"/>.</summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.Scripting.TypeName.Name">
            <summary>The <see cref="P:System.Reflection.MemberInfo.Name"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeName.#ctor(System.Type)">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.Scripting.TypeName"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeName.op_Implicit(System.Type)~Weaver.Editor.Procedural.Scripting.TypeName">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.Scripting.TypeName"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeName.#ctor(Weaver.Editor.Procedural.Scripting.TypeBuilder)">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.Scripting.TypeName"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeName.op_Implicit(Weaver.Editor.Procedural.Scripting.TypeBuilder)~Weaver.Editor.Procedural.Scripting.TypeName">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.Scripting.TypeName"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeName.#ctor(System.String)">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.Scripting.TypeName"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeName.op_Implicit(System.String)~Weaver.Editor.Procedural.Scripting.TypeName">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.Scripting.TypeName"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeName.#ctor(System.String,System.String)">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.Scripting.TypeName"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeName.op_Equality(Weaver.Editor.Procedural.Scripting.TypeName,Weaver.Editor.Procedural.Scripting.TypeName)">
            <summary>Does `a` match `b`?</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeName.op_Inequality(Weaver.Editor.Procedural.Scripting.TypeName,Weaver.Editor.Procedural.Scripting.TypeName)">
            <summary>Does `a` not match `b`?</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeName.op_Equality(Weaver.Editor.Procedural.Scripting.TypeName,System.Type)">
            <summary>Does the `name` match the `type`?</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeName.op_Inequality(Weaver.Editor.Procedural.Scripting.TypeName,System.Type)">
            <summary>Does the `name` not match the `type`?</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeName.op_Equality(System.Type,Weaver.Editor.Procedural.Scripting.TypeName)">
            <summary>Does the `name` match the `type`?</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeName.op_Inequality(System.Type,Weaver.Editor.Procedural.Scripting.TypeName)">
            <summary>Does the `name` not match the `type`?</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeName.Equals(System.Object)">
            <summary>Does this name match the `obj`?</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeName.AppendFullName(System.Text.StringBuilder)">
            <summary>Appends "<see cref="F:Weaver.Editor.Procedural.Scripting.TypeName.Namespace"/>.<see cref="F:Weaver.Editor.Procedural.Scripting.TypeName.Name"/>".</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.Scripting.TypeName.FullName">
            <summary>Returns "<see cref="F:Weaver.Editor.Procedural.Scripting.TypeName.Namespace"/>.<see cref="F:Weaver.Editor.Procedural.Scripting.TypeName.Name"/>".</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.Scripting.TypeName.ToString">
            <summary>Returns "<see cref="F:Weaver.Editor.Procedural.Scripting.TypeName.Namespace"/>.<see cref="F:Weaver.Editor.Procedural.Scripting.TypeName.Name"/>".</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.ProceduralAsset">
            <summary>
            A group of details relating to an <see cref="T:Weaver.AssetInjectionAttribute"/> which allow its target asset to be
            procedurally generated.
            </summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.ProceduralAsset.Injector">
            <summary>[Editor-Only] The target <see cref="T:Weaver.AssetInjectionAttribute"/>.</summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.ProceduralAsset.ProceduralAttribute">
            <summary>[Editor-Only] The target <see cref="T:Weaver.ProceduralAssetAttribute"/>.</summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.ProceduralAsset.AssetGenerator">
            <summary>[Editor-Only] The <see cref="F:Weaver.Editor.Procedural.ProceduralAsset.AssetGenerator"/> that will be used to generate and save the asset.</summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.ProceduralAsset.GeneratorMethod">
            <summary>[Editor-Only] The method that will be used to generate the asset.</summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.ProceduralAsset.ShouldGenerateFunc">
            <summary>[Editor-Only]
            A function that determines whether this asset should generate its asset at the moment.
            </summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.ProceduralAsset.ShouldShowFunc">
            <summary>[Editor-Only]
            A function that determines whether this asset should be shown in the <see cref="T:Weaver.Editor.Window.WeaverWindow"/> at
            the moment.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.TryCreate(Weaver.AssetInjectionAttribute,System.String@)">
            <summary>[Editor-Only]
            If the `injector`s attributed member has a <see cref="T:Weaver.ProceduralAssetAttribute"/> this method tries to find
            a suitable <see cref="T:Weaver.Editor.Procedural.AssetGenerator"/> and generator method. If successful, it creates and
            returns a <see cref="T:Weaver.Editor.Procedural.ProceduralAsset"/> containing those details.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.ShouldGenerate">
            <summary>[Editor-Only]
            Determines whether this asset should generate its asset at the moment.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.ShouldShow">
            <summary>[Editor-Only]
            Determines whether this asset should be shown in the <see cref="T:Weaver.Editor.Window.WeaverWindow"/> at the moment.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.ProceduralAsset.CurrentAssetPath">
            <summary>[Editor Only]
            The asset path at which the currently generating asset will be saved.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.GenerateAndSave">
            <summary>[Internal, Editor Only]
            Generates this asset and saves it in the project. Called by the <see cref="T:Weaver.Editor.Procedural.AssetGeneratorWindow"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.GetRealFileName">
            <summary>
            Returns the <see cref="P:Weaver.AssetInjectionAttribute.FileName"/> if one was specified. Otherwise returns the full
            name of the <see cref="P:Weaver.InjectionAttribute.Member"/>; with or without the namespace depending on the
            <see cref="F:Weaver.Editor.ProceduralAssetSettings.includeNamespaceInName"/> setting.
            </summary>
        </member>
        <member name="E:Weaver.Editor.Procedural.ProceduralAsset.OnImportAsset">
            <summary>[Editor-Only]
            This callback is cleared before generation begins and triggered after the asset generates and is saved.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.DoGUI">
            <summary>[Editor-Only]
            Draws the GUI for this attribute in the inspector.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.AddItemsToMenu(UnityEditor.GenericMenu)">
            <summary>[Editor-Only]
            Adds various functions for this asset to the `menu`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.ToString">
            <summary>[Editor-Only]
            Returns a string describing this <see cref="T:Weaver.Editor.Procedural.ProceduralAsset"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.ProceduralAsset.AllProceduralAssets">
            <summary>[Editor-Only]
            A list of every <see cref="T:Weaver.Editor.Procedural.ProceduralAsset"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.GetFromGenerator(System.Reflection.MethodInfo)">
            <summary>[Editor-Only]
            Returns the <see cref="T:Weaver.Editor.Procedural.ProceduralAsset"/> which uses the specified `generatorMethod` (if any).
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.GetFromGenerator(System.Delegate)">
            <summary>[Editor-Only]
            Returns the <see cref="T:Weaver.Editor.Procedural.ProceduralAsset"/> which uses the specified `generatorMethod` (if any).
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.Generate(System.Reflection.MethodInfo,System.Boolean)">
            <summary>[Editor-Only]
            Generates the procedural asset associated with the specified `generatorMethod`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.Generate(System.Boolean)">
            <summary>[Editor-Only]
            Generates this procedural asset.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.GenerateNamespace(System.String,System.Boolean)">
            <summary>[Editor-Only]
            Generates every procedural asset in the specified `nameSpace`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.GenerateAll(System.Boolean)">
            <summary>[Editor-Only]
            Generates every procedural asset in the project.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.CheckForMissingAssets">
            <summary>[Editor-Only]
            If there are any procedural assets which don't currently have a target asset, this method asks the user
            what they want to do about it.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.ProceduralAsset.Dependancies">
            <summary>[Editor-Only] Other assets which must always be generated before this one.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.MarkDependancy(System.Reflection.MethodInfo)">
            <summary>[Editor-Conditional]
            Marks the currently generating asset as requiring the specified `dependancy` so that whenever either is
            generated, the dependancy is generated first.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.MarkDependancy(System.Delegate)">
            <summary>[Editor-Conditional]
            Marks the currently generating asset as requiring the specified `dependancy` so that whenever either is
            generated, the dependancy is generated first.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.MarkDependancy``1(System.Func{``0})">
            <summary>[Editor-Conditional]
            Marks the currently generating asset as requiring the specified `dependancy` so that whenever either is
            generated, the dependancy is generated first.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.GrabDependancy``1(System.Reflection.MethodInfo)">
            <summary>
            Marks the currently generating asset as requiring the specified `dependancy` so that whenever either is
            generated, the dependancy is generated first. Then returns the target asset of that `dependancy`.
            <para></para>
            This method can only be called while an asset is being generated. Otherwise it throws an
            <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.GrabDependancy``1(System.Delegate)">
            <summary>
            Marks the currently generating asset as requiring the specified `dependancy` so that whenever either is
            generated, the dependancy is generated first. Then returns the target asset of that `dependancy`.
            <para></para>
            This method can only be called while an asset is being generated. Otherwise it throws an
            <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ProceduralAsset.GrabDependancy``1(System.Func{``0})">
            <summary>
            Marks the currently generating asset as requiring the specified `dependancy` so that whenever either is
            generated, the dependancy is generated first. Then returns the target asset of that `dependancy`.
            <para></para>
            This method can only be called while an asset is being generated. Otherwise it throws an
            <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.ScenesScriptBuilder">
            <summary>[Editor-Only, Internal]
            Procedurally generates a script containing constants corresponding to the scenes in your build settings.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ScenesScriptBuilder.#ctor(System.Action{System.Text.StringBuilder})">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.ScenesScriptBuilder"/>.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.ScenesScriptBuilder.Enabled">
            <summary>Indicates whether this script should be generated.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ScenesScriptBuilder.GatherScriptDetails">
            <summary>Gathers the element details of this script.</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.ShadersScriptBuilder">
            <summary>[Editor-Only, Internal]
            Procedurally generates a script containing constants corresponding to the properties and symbols in a set of
            shaders chosen in the <see cref="T:Weaver.Editor.Window.ShadersPanel"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ShadersScriptBuilder.#ctor(System.Action{System.Text.StringBuilder})">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.ShadersScriptBuilder"/>.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.ShadersScriptBuilder.Enabled">
            <summary>Indicates whether this script should be generated.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.ShadersScriptBuilder.GatherScriptDetails">
            <summary>Gathers the element details of this script.</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.SimpleScriptBuilder">
            <summary>[Editor-Only]
            A simple <see cref="T:Weaver.Editor.Procedural.Scripting.ScriptBuilder"/> which builds a script containing a single class.
            </summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.SimpleScriptBuilder.GeneratorMethod">
            <summary>The method used to generate the <see cref="P:Weaver.Editor.Procedural.SimpleScriptBuilder.ProceduralAsset"/>.</summary>
        </member>
        <member name="F:Weaver.Editor.Procedural.SimpleScriptBuilder._IsInitialized">
            <summary>Indicates whether the procedural asset has been gathered.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.SimpleScriptBuilder.ProceduralAsset">
            <summary>The <see cref="P:Weaver.Editor.Procedural.SimpleScriptBuilder.ProceduralAsset"/> which uses this builder.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.SimpleScriptBuilder.ExistingType">
            <summary>The information about an existing type with the same name as this script (if any).</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.SimpleScriptBuilder.RootType">
            <summary>The builder for the root type of the script.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.SimpleScriptBuilder.RetainObsoleteMembers">
            <summary>
            If true: the generated script will include all previous members that have been removed and give them
            [<see cref="T:System.ObsoleteAttribute"/>].
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.SimpleScriptBuilder.LogBuildErrors">
            <summary>If true, errors encountered while building the script will be logged. Default true.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.SimpleScriptBuilder.DisableAllWarnings">
            <summary>
            If true, <c>#pragma warning disable</c> will be put at the top of the script to disable all warnings.
            Default true.
            </summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.SimpleScriptBuilder.Namespace">
            <summary>The namespace to put the root type in.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.SimpleScriptBuilder.Enabled">
            <summary>Override to return false when you don't want the script to be generated.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.SimpleScriptBuilder.#ctor(System.Action{System.Text.StringBuilder})">
            <summary>
            Creates a new <see cref="T:Weaver.Editor.Procedural.SimpleScriptBuilder"/> which will be used to generate the procedural script
            associated with the specified `generatorMethod`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.SimpleScriptBuilder.BuildScript(System.Text.StringBuilder,System.Boolean)">
            <summary>If <see cref="M:Weaver.Editor.Procedural.SimpleScriptBuilder.ShouldBuild"/> returns true, this method calls <see cref="M:Weaver.Editor.Procedural.SimpleScriptBuilder.AppendScript(System.Text.StringBuilder)"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.SimpleScriptBuilder.ShouldBuild">
            <summary>Indicates whether the script should be rebuilt based on whether its contents need to be changed.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.SimpleScriptBuilder.GatherScriptDetails">
            <summary>Gathers the element details of this script.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.SimpleScriptBuilder.AppendScript(System.Text.StringBuilder)">
            <summary>Appends the declaration of the elements of this script in C# code to the specified `text`.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.SimpleScriptBuilder.ScriptExistsButIsntCompiled">
            <summary>Returns true if the target file exists but its root type cannot be retrieved via reflection.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.SimpleScriptBuilder.HasAnyObsoleteMembers">
            <summary>Returns true if there are any obsolete members in the existing root type.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.SimpleScriptBuilder.RebuildScriptWithoutObsoleteMembers">
            <summary>Rebuilds the script without any obsolete members.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.SimpleScriptBuilder.Generate">
            <summary>
            Generates the <see cref="P:Weaver.Editor.Procedural.SimpleScriptBuilder.ProceduralAsset"/> which uses this script builder.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.SimpleScriptBuilder.LogRebuildReason(System.String)">
            <summary>Logs the `reason` that this script should be rebuilt.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.SimpleScriptBuilder.GetBuilderInstance(System.Type)">
            <summary>Returns an instance of the specified <see cref="T:Weaver.Editor.Procedural.SimpleScriptBuilder"/> type.</summary>
        </member>
        <member name="T:Weaver.Editor.Procedural.TagsScriptBuilder">
            <summary>[Editor-Only, Internal]
            Procedurally generates a script containing constants corresponding to the properties and symbols in a set of
            shaders chosen in the <see cref="T:Weaver.Editor.Window.TagsPanel"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.TagsScriptBuilder.#ctor(System.Action{System.Text.StringBuilder})">
            <summary>Creates a new <see cref="T:Weaver.Editor.Procedural.TagsScriptBuilder"/>.</summary>
        </member>
        <member name="P:Weaver.Editor.Procedural.TagsScriptBuilder.Enabled">
            <summary>Indicates whether this script should be generated.</summary>
        </member>
        <member name="M:Weaver.Editor.Procedural.TagsScriptBuilder.GatherScriptDetails">
            <inheritdoc/>
        </member>
        <member name="T:Weaver.Editor.AnimationReferenceDrawer">
            <summary>[Editor-Only, Internal]
            A <see cref="T:UnityEditor.PropertyDrawer"/> used for fields marked with an <see cref="T:Weaver.AnimationReferenceAttribute"/>.
            </summary>
        </member>
        <member name="T:Weaver.Editor.AnimationSettings">
            <summary>[Editor-Only, Internal] Settings relating to the <see cref="T:Weaver.Editor.Procedural.AnimationsScriptBuilder"/>.</summary>
        </member>
        <member name="T:Weaver.Editor.BaseLayerSettings">
            <summary>[Editor-Only, Internal]
            Base class for settings relating to a procedural script based on a set of layers.
            </summary>
        </member>
        <member name="T:Weaver.Editor.LayerSettings">
            <summary>[Editor-Only, Internal]
            Settings relating to the <see cref="T:Weaver.Editor.Procedural.LayersScriptBuilder"/>.
            </summary>
        </member>
        <member name="T:Weaver.Editor.NavAreaSettings">
            <summary>[Editor-Only, Internal]
            Settings relating to the <see cref="T:Weaver.Editor.Procedural.NavigationAreasScriptBuilder"/>.
            </summary>
        </member>
        <member name="T:Weaver.Editor.ProceduralAssetData">
            <summary>[Editor-Only, Internal]
            Details about a <see cref="T:Weaver.Editor.Procedural.ProceduralAsset"/> and the asset is is linked to.
            </summary>
        </member>
        <member name="T:Weaver.Editor.ProceduralAssetListData">
            <summary>[Editor-Only, Internal]
            Details about the assets generated by a <see cref="T:Weaver.Editor.Procedural.ProceduralAsset"/> for an <see cref="T:Weaver.AssetListBase"/>.
            </summary>
        </member>
        <member name="T:Weaver.Editor.ProceduralAssetSettings">
            <summary>[Editor-Only, Internal]
            Settings relating to procedural assets.
            </summary>
        </member>
        <member name="P:Weaver.Editor.ProceduralAssetSettings.OutputDirectory">
            <summary>The directory to save new procedural assets in. Ends with a '/'.</summary>
        </member>
        <member name="T:Weaver.Editor.ProceduralScriptSettings">
            <summary>[Editor-Only, Internal]
            Base class for settings relating to a procedural script.
            </summary>
        </member>
        <member name="F:Weaver.Editor.ProceduralScriptSettings.enabled">
            <summary>Should the script be generated?</summary>
        </member>
        <member name="M:Weaver.Editor.ProceduralScriptSettings.DoGUI">
            <summary>Draws the GUI for these settings.</summary>
        </member>
        <member name="T:Weaver.Editor.SceneSettings">
            <summary>[Editor-Only, Internal]
            Settings relating to the <see cref="T:Weaver.Editor.Procedural.ScenesScriptBuilder"/>.
            </summary>
        </member>
        <member name="F:Weaver.Editor.SceneSettings.includeSceneIndices">
            <summary>
            If enabled: the generated script will contain a const int field holding the build settings index of each
            scene.
            </summary>
        </member>
        <member name="F:Weaver.Editor.SceneSettings.includeSceneNames">
            <summary>
            If enabled: the generated script will contain a const string field holding the name of each scene.
            </summary>
        </member>
        <member name="F:Weaver.Editor.SceneSettings.useFullPathNames">
            <summary>
            If enabled: fields will be named using the scene's full asset path instead of just the file name.
            </summary>
        </member>
        <member name="F:Weaver.Editor.SceneSettings.useNestedClasses">
            <summary>
            If enabled: the fields for each scene will be grouped inside nested classes corresponding to the
            directories in their asset path. Otherwise they will all be located in the root Scenes class.
            </summary>
        </member>
        <member name="T:Weaver.Editor.ShaderSettings">
            <summary>[Editor-Only, Internal]
            Settings relating to the <see cref="T:Weaver.Editor.Procedural.ShadersScriptBuilder"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.ShaderSettings.CleanList">
            <summary>
            Removes any null or duplicate elements from the <see cref="F:Weaver.Editor.ShaderSettings.shaders"/> list.
            </summary>
        </member>
        <member name="T:Weaver.Editor.TagSettings">
            <summary>[Editor-Only, Internal]
            Settings relating to the <see cref="T:Weaver.Editor.Procedural.TagsScriptBuilder"/>.
            </summary>
        </member>
        <member name="T:Weaver.Editor.AssetInjectionOverlay">
            <summary>[Editor-Only, Internal]
            A visual indicator in the project window for any asset linked to an <see cref="T:Weaver.AssetInjectionAttribute"/>.
            </summary>
        </member>
        <member name="F:Weaver.Editor.AssetInjectionOverlay.AssetToAttribute">
            <summary>Assets mapped to their injection attribute.</summary>
        </member>
        <member name="F:Weaver.Editor.AssetInjectionOverlay.AttributeToGUID">
            <summary>Injection attributes mapped to the GUID of their target asset.</summary>
        </member>
        <member name="F:Weaver.Editor.AssetInjectionOverlay.OverlayPool">
            <summary>A pool of spare overlays which can be reused.</summary>
        </member>
        <member name="F:Weaver.Editor.AssetInjectionOverlay.GuidToOverlay">
            <summary>Asset GUIDs mapped to the <see cref="T:Weaver.Editor.AssetInjectionOverlay"/> which wraps their <see cref="T:Weaver.AssetInjectionAttribute"/>.</summary>
        </member>
        <member name="F:Weaver.Editor.AssetInjectionOverlay.Attributes">
            <summary>
            The attributes which are currently targeting the asset GUID this overlay is responsible for.
            Usually there will only be one attribute targeting a particular asset, but there's no reason why more
            couldn't target the same one.
            </summary>
        </member>
        <member name="T:Weaver.Editor.AssetListOverlay">
            <summary>[Editor-Only, Internal]
            A visual indicator for assets that are included in an asset list.
            </summary>
        </member>
        <member name="T:Weaver.Editor.PotentialAssetInjectionOverlay">
            <summary>[Editor-Only, Internal]
            A visual indicator in the project window for any asset that could potentially be linked to an
            <see cref="T:Weaver.AssetInjectionAttribute"/>.
            <para></para>
            Prefabs use <see cref="T:Weaver.Editor.PotentialPrefabInjectionOverlay"/> instead.
            </summary>
        </member>
        <member name="T:Weaver.Editor.PotentialPrefabInjectionOverlay">
            <summary>[Editor-Only, Internal]
            A visual indicator in the project window for any prefab that could potentially be linked to an
            <see cref="T:Weaver.AssetInjectionAttribute"/>.
            </summary>
        </member>
        <member name="T:Weaver.Editor.ProjectWindowOverlays">
            <summary>[Editor-Only, Internal]
            A system which draws a visual indicator in the project window for any asset linked to an
            <see cref="T:Weaver.AssetInjectionAttribute"/>.
            </summary>
        </member>
        <member name="T:Weaver.Editor.AssetPathMatcher">
            <summary>[Editor-Only, Internal]
            A <see cref="T:Weaver.Editor.PathMatcher"/> specifically for Unity Assets.
            </summary>
        </member>
        <member name="T:Weaver.Editor.AssetPostprocessor">
            <summary>[Editor-Only, Internal]
            Exposes an event that is called whenever an asset is imported, deleted, or moved.
            </summary>
        </member>
        <member name="T:Weaver.Editor.AssetPostprocessor.PostprocessorMethod">
            <summary>A delegate corresponding to <see cref="M:Weaver.Editor.AssetPostprocessor.OnPostprocessAll(System.String[],System.String[],System.String[],System.String[])"/>.</summary>
        </member>
        <member name="E:Weaver.Editor.AssetPostprocessor.OnPostprocessAssets">
            <summary>An event triggered by <see cref="M:Weaver.Editor.AssetPostprocessor.OnPostprocessAll(System.String[],System.String[],System.String[],System.String[])"/>.</summary>
        </member>
        <member name="T:Weaver.Editor.BuildProcess">
            <summary>[Editor-Only, Internal]
            Automatically executes logic for asset injection, asset lists, and procedural assets during a build.
            </summary>
        </member>
        <member name="T:Weaver.Editor.Startup">
            <summary>[Editor-Only, Internal]
            In Edit Mode we inject everything using an [<see cref="T:UnityEditor.InitializeOnLoadMethodAttribute"/>].
            <para></para>
            In Play Mode we inject everything using [<see cref="T:UnityEngine.RuntimeInitializeOnLoadMethodAttribute"/>] so it can be applied
            before the scene is loaded.
            <para></para>
            During the build process we generate a procedural script and attach it to an object in the first scene so that
            it can inject everything efficiently on startup.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Startup.OnLoadInEditor">
            <summary>
            Called automatically by Unity whenever it reloads assemblies. Executes all
            <see cref="T:Weaver.InjectionAttribute"/>s to apply their values to their attributed members.
            </summary>
        </member>
        <member name="M:Weaver.Editor.Startup.InjectAll">
            <summary>
            Called automatically by Unity when entering Play Mode. Executes all <see cref="T:Weaver.InjectionAttribute"/>s to
            apply their values to their attributed members.
            <para></para>
            This would normally be called on startup in a runtime build as well, but runtime initialisation is handled
            by the procedural <see cref="!:InjectorScriptBuilder.Script"/>.
            </summary>
        </member>
        <member name="T:Weaver.Editor.GUIStyles">
            <summary>[Editor-Only, Internal] Various common GUI utilities.</summary>
        </member>
        <member name="T:Weaver.Editor.WeaverIcons">
            <summary>[Editor-Only, Internal] References to various textures that are used as icons.</summary>
        </member>
        <member name="P:Weaver.Editor.WeaverIcons.Instance">
            <summary>Singleton instance assigned using Asset Injection.</summary>
        </member>
        <member name="T:Weaver.Editor.PathMatcher">
            <summary>[Editor-Only]
            A utility for finding file paths that match certain targets as closely as possible.
            </summary>
        </member>
        <member name="F:Weaver.Editor.PathMatcher.TargetPaths">
            <summary>The paths this matcher is trying to find a match for.</summary>
        </member>
        <member name="P:Weaver.Editor.PathMatcher.MatchedPath">
            <summary>The best match that has been found so far.</summary>
        </member>
        <member name="P:Weaver.Editor.PathMatcher.MatchedTargetIndex">
            <summary>The index in the <see cref="F:Weaver.Editor.PathMatcher.TargetPaths"/> of the <see cref="P:Weaver.Editor.PathMatcher.MatchedPath"/>.</summary>
        </member>
        <member name="M:Weaver.Editor.PathMatcher.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a new <see cref="T:Weaver.Editor.PathMatcher"/> that tries to find paths as close to any of the specified
            `targetPaths` as possible, with paths earliest in ths list getting the highest priority.
            </summary>
        </member>
        <member name="M:Weaver.Editor.PathMatcher.Reset">
            <summary>
            Clears the <see cref="P:Weaver.Editor.PathMatcher.MatchedPath"/> and <see cref="P:Weaver.Editor.PathMatcher.MatchedTargetIndex"/>.
            </summary>
        </member>
        <member name="M:Weaver.Editor.PathMatcher.TryMatchFile(System.String)">
            <summary>
            If the specified `path` to see if it's a better match than the current <see cref="P:Weaver.Editor.PathMatcher.MatchedPath"/> this
            method sets it as the <see cref="P:Weaver.Editor.PathMatcher.MatchedPath"/> and returns true.
            </summary>
        </member>
        <member name="M:Weaver.Editor.PathMatcher.TryMatchEnd(System.String,System.String,System.String)">
            <summary>
            Returns true if the end of the `path` matches the `targetEnd` and outputs a score denoting how well
            any separators matched.
            </summary>
        </member>
        <member name="M:Weaver.Editor.PathMatcher.IsSeparator(System.Char)">
            <summary>
            Returns true if the specified value is a space or any of the following characters: ./+
            </summary>
        </member>
        <member name="M:Weaver.Editor.PathMatcher.FinalValidation(System.String)">
            <summary>
            Once a potentially better match is found, this method is called to verify that it is actually an acceptable
            target.
            </summary>
        </member>
        <member name="T:Weaver.Editor.UnityScripts">
            <summary>[Editor-Only] A variety of utility methods relating to script assets in Unity.</summary>
        </member>
        <member name="M:Weaver.Editor.UnityScripts.GetScript(System.Type)">
            <summary>
            Tries to get the script asset containing `type`.
            </summary>
        </member>
        <member name="M:Weaver.Editor.UnityScripts.GetSourcePath(System.Type,System.Boolean@)">
            <summary>
            Tries to get the path to the script asset containing `type`. If this fails, it instead gets the path to its
            assembly.
            </summary>
        </member>
        <member name="M:Weaver.Editor.UnityScripts.GetExecutionTime(System.Type)">
            <summary>
            Tries to get the execution time of the script asset containing `type`.
            </summary>
        </member>
        <member name="T:Weaver.Editor.WeaverSettingsBase">
            <summary>[Editor-Only, Internal]
            A <see cref="T:UnityEngine.ScriptableObject"/> which stores various data used by <see cref="N:Weaver"/>.
            </summary>
        </member>
        <member name="P:Weaver.Editor.WeaverSettingsBase.Instance">
            <summary>
            Searches for a <see cref="T:Weaver.Editor.WeaverSettingsBase"/> asset in the project, caches it, and returns it.
            </summary>
        </member>
        <member name="M:Weaver.Editor.WeaverSettingsBase.ForceReSerialize">
            <summary>
            When the type of an <see cref="T:Weaver.AssetListBase"/> is changed Unity needs to serialize all references to it and
            then deserialize them with the new type. Unfortunately it the type change isn't an intentional feature of
            the engine so it doesn't have a clean way to do so. This method modifies a <see cref="T:UnityEditor.SerializedProperty"/>
            for a dummy field to force Unity to recognise that the data has changed. This only works for references to
            the list in question inside <see cref="T:Weaver.Editor.WeaverSettingsBase"/> itself; unfortunately, other references will still
            hold their reference to the list object with the old type until assemblies are reloaded.
            </summary>
        </member>
        <member name="T:Weaver.Editor.WeaverWindowSettings">
            <summary>[Editor-Only, Internal]
            Settings relating to the <see cref="T:Weaver.Editor.Window.WeaverWindow"/>.
            </summary>
        </member>
        <member name="T:Weaver.IAssetList`1">
            <summary>A strongly typed asset list.</summary>
        </member>
        <member name="P:Weaver.IAssetList`1.Count">
            <summary>The number of items in the list.</summary>
        </member>
        <member name="P:Weaver.IAssetList`1.Item(System.Int32)">
            <summary>Gets the item at the specified `index` in the list.</summary>
        </member>
        <member name="T:Weaver.WeaverUtilities">
            <summary>A variety of miscellaneous utility methods.</summary>
            <summary>A variety of miscellaneous utility methods.</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.GetRandomElement``1(Weaver.IAssetList{``0})">
            <summary>Returns a random element from the `list`.</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.EnsureExists``1(``0@)">
            <summary>
            If `obj` is null this method assigns a new instance to it and calls <see cref="M:Weaver.IOnCreate.OnCreate"/>.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.GetReferenceTo``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Returns the first element in the `list` which has its <see cref="P:Weaver.IReferenceIndex.ReferencedIndex"/> == `index`.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.OnReferenceRemoved``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Elements in the specified `list` reference specific indices in another list.
            Call this method when removing an element from the other list to adjust the
            <see cref="P:Weaver.IReferenceIndex.ReferencedIndex"/> of the elements in this `list` accordingly.
            </summary>
        </member>
        <member name="T:Weaver.WeaverUtilities.CollectionPool`2">
            <summary>
            Maintains a pool of <see cref="T:System.Collections.Generic.ICollection`1"/> so they can be reused without garbage collection.
            </summary>
        </member>
        <member name="F:Weaver.WeaverUtilities.CollectionPool`2.Pool">
            <remarks>Not a Stack because it would create an unnecessary dependancy on System.dll.</remarks>
        </member>
        <member name="M:Weaver.WeaverUtilities.CollectionPool`2.Get">
            <summary>
            Returns an available collection from the pool or creates a new one if there are none.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.CollectionPool`2.Release(`0)">
            <summary>
            Clears a collection and puts it into the pool to be available for future use.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.GetList``1">
            <summary>
            Returns an available <see cref="T:System.Collections.Generic.List`1"/> from the pool or creates a new one if there are none.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.GetList``1(System.Collections.Generic.List{``0}@)">
            <summary>
            Assigns an available <see cref="T:System.Collections.Generic.List`1"/> from the pool or creates a new one if there are none.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.Release``1(System.Collections.Generic.List{``0})">
            <summary>
            Clears the `list` and puts it into the pool to be available for reuse.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.Release``1(System.Collections.Generic.List{``0}@)">
            <summary>
            Clears the `list` and puts it into the pool to be available for reuse, then sets the reference to null.
            <para></para>
            If `list` is already null, this method will do nothing.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.GetDictionary``2">
            <summary>
            Returns an available <see cref="T:System.Collections.Generic.Dictionary`2"/> from the pool or creates a new one if there are none.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.GetDictionary``2(System.Collections.Generic.Dictionary{``0,``1}@)">
            <summary>
            Assigns an available <see cref="T:System.Collections.Generic.Dictionary`2"/> from the pool or creates a new one if there are none.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.Release``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Clears the `dictionary` and puts it into the pool to be available for reuse.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.Release``2(System.Collections.Generic.Dictionary{``0,``1}@)">
            <summary>
            Clears the `dictionary` and puts it into the pool to be available for reuse, then sets the reference to null.
            <para></para>
            If `dictionary` is already null, this method will do nothing.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.GetHashSet``1">
            <summary>
            Returns an available <see cref="T:System.Collections.Generic.HashSet`1"/> from the pool or creates a new one if there are none.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.GetHashSet``1(System.Collections.Generic.HashSet{``0}@)">
            <summary>
            Assigns an available <see cref="T:System.Collections.Generic.HashSet`1"/> from the pool or creates a new one if there are none.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.Release``1(System.Collections.Generic.HashSet{``0})">
            <summary>
            Clears the `set` and puts it into the pool to be available for reuse.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.Release``1(System.Collections.Generic.HashSet{``0}@)">
            <summary>
            Clears the `set` and puts it into the pool to be available for reuse, then sets the reference to null.
            <para></para>
            If `set` is already null, this method will do nothing.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.ToBool(Weaver.OptionalBool,System.Boolean)">
            <summary>
            Returns the <see cref="T:System.Boolean"/> value corresponding to the specified `optional` value.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.ToOptionalBool(System.Boolean)">
            <summary>
            Returns the <see cref="T:Weaver.OptionalBool"/> value corresponding to the specified `value`.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.IsDependantOn``1(Weaver.IDependant{``0},``0)">
            <summary>
            Returns true if [on] is a dependancy of [dependant].
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.TopologicalSort``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Sorts a collection of <see cref="T:Weaver.IDependant`1"/>.
            If ItemA depends on ItemB, ItemA will be put later in the returned list.
            </summary>
            <param name="collection">The collection to sort. If any item depends on a type that isn't present, it will be added automatically.</param>
            <param name="ignoreCycles">If false, an <see cref="T:System.ArgumentException"/> will be thrown when a cyclic dependancy is encountered.</param>
        </member>
        <member name="M:Weaver.WeaverUtilities.TopologicalSort``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{Weaver.IDependant{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
            Sorts a collection according to a collection of dependants.
            If ItemA depends on ItemB, ItemA will be put later in the returned list.
            </summary>
            <param name="collection">The collection to sort. If any element depends on something that isn't present, it will be added automatically.</param>
            <param name="dependants">An array which specifies what each element is dependant on.</param>
            <param name="comparer">The equality comparer to use. Null will use the default comparer.</param>
            <param name="ignoreCycles">If false, an <see cref="T:System.ArgumentException"/> will be thrown when a cyclic dependancy is encountered</param>
        </member>
        <member name="M:Weaver.WeaverUtilities.TopologicalSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
            Sorts an array according to an array of dependants.
            If ItemA depends on ItemB, ItemA will be put later in the returned list.
            </summary>
            <param name="collection">The collection to sort. If any element depends on something that isn't present, it will be added automatically.</param>
            <param name="getDependancies">A delegate that can return the dependancies of any given element.</param>
            <param name="comparer">The equality comparer to use. Null will use the default comparer.</param>
            <param name="ignoreCycles">If false, an <see cref="T:System.ArgumentException"/> will be thrown when a cyclic dependancy is encountered</param>
        </member>
        <member name="M:Weaver.WeaverUtilities.TopologicalSort``1(System.Collections.Generic.List{``0},System.Int32,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
            Sorts an array according to an array of dependants.
            If ItemA depends on ItemB, ItemA will be put later in the returned list.
            </summary>
            <param name="list">The list to sort. If any element depends on something that isn't present, it will be added automatically.</param>
            <param name="skip">The index at which to start sorting. Everything before this index is kept in the same order as the input list.</param>
            <param name="getDependancies">A delegate that can return the dependancies of any given element.</param>
            <param name="comparer">The equality comparer to use. Null will use the default comparer.</param>
            <param name="ignoreCycles">If false, an <see cref="T:System.ArgumentException"/> will be thrown when a cyclic dependancy is encountered</param>
        </member>
        <member name="M:Weaver.WeaverUtilities.TopologicalSort``1(System.Collections.Generic.List{``0}@,System.Int32,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
            Sorts an array according to an array of dependants.
            If ItemA depends on ItemB, ItemA will be put later in the returned list.
            This method assigns a new list and releases the old one to the CollectionPool.
            </summary>
            <param name="list">The list to sort. If any element depends on something that isn't present, it will be added automatically.</param>
            <param name="skip">The index at which to start sorting. Everything before this index is kept in the same order as the input list.</param>
            <param name="getDependancies">A delegate that can return the dependancies of any given element.</param>
            <param name="comparer">The equality comparer to use. Null will use the default comparer.</param>
            <param name="ignoreCycles">If false, an <see cref="T:System.ArgumentException"/> will be thrown when a cyclic dependancy is encountered</param>
        </member>
        <member name="M:Weaver.WeaverUtilities.GetOrAddComponent``1(UnityEngine.GameObject)">
            <summary>
            Gets an instance of the specified component type on a game object or adds one if it doesn't have one.
            </summary>
            <typeparam name="T">The type of component to get.</typeparam>
            <param name="gameObject">The game object to get it from.</param>
            <returns>The component that was found or added.</returns>
        </member>
        <member name="M:Weaver.WeaverUtilities.IsNullOrEmpty``1(``0[])">
            <summary>Is the array <c>null</c> or its <see cref="P:System.Array.Length"/> 0?</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.Nullify``1(``0@)">
            <summary>
            Sets the reference to its default value (null for reference types) and returns the original value.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.LinearRescaleTo01(System.Single,System.Single,System.Single)">
            <summary>
            Re-scales `value` from the old range (`oldMin` to `oldMax`) to the new range (0 to 1).
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.LinearRescale(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Re-scales `value` from the old range (`oldMin` to `oldMax`) to the new range (`newMin` to `newMax`).
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.LinearRescaleClamped(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Re-scales `value` from the old range (`oldMin` to `oldMax`) to the new range (`newMin` to `newMax`) and
            clamps it within that range.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.EditorSetName(UnityEngine.Object,System.String)">
            <summary>[Editor-Conditional] <c>target.name = name</c></summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.EditorSetDefaultParent(UnityEngine.Transform,System.String)">
            <summary>[Editor-Conditional]
            Sets the <see cref="P:UnityEngine.Transform.parent"/> to a default object based on its name.
            <para></para>
            This keeps the hierarchy neat in the Unity Editor without wasting processing time on it at runtime.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.LogIfRestricted(System.String)">
            <summary>
            If <c>RESTRICT_USAGE</c> is defined, this method will log a warning. This is useful for verifying that
            certain methods are only used in certain contexts. For example, you might want to ensure that an
            inefficient method or class is not used in a release build of your application.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.SetSize``1(``0[]@,System.Int32)">
            <summary>
            If the `array` is null or its length isn't equal to the specified `size` this method replaces it with a new
            array of that `size`. Unlike <see cref="M:System.Array.Resize``1(``0[]@,System.Int32)"/> this method does not copy the elements from the old
            array into the new one.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.SetSize``1(``0[],System.Int32)">
            <summary>
            If the `array` is null or its length isn't equal to the specified `size` this method allocates a new array
            of that `size`, otherwise it just returns the `array`. Unlike <see cref="M:System.Array.Resize``1(``0[]@,System.Int32)"/> this method does
            not copy the elements from the old array into the new one.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.Get``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            If the dictionary contains a value for the given key, that value is returned.
            Otherwise the default value is returned.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.Pop``1(System.Collections.Generic.List{``0})">
            <summary>
            Removes and returns the last element in a list.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.PopLastOrCreate``1(System.Collections.Generic.List{``0})">
            <summary>
            Removes and returns the last element in a list or creates a new one if the list is empty.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.InsertAt``1(``0[],System.Int32,``0)">
            <summary>
            Returns a copy of `array` with `element` inserted at `index`.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.InsertAt``1(``0[],``0)">
            <summary>
            Returns a copy of `array` with `element` inserted at the end.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.RemoveAt``1(``0[],System.Int32)">
            <summary>
            Returns a copy of `array` with the element at `index` removed.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.AddIfNew``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            If `collection` doesn't already contain `value`, this method adds it and returns true.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.StableInsertionSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts `list`, maintaining the order of any elements with an identical comparison
            (unlike the standard <see cref="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})"/> method).
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.StableInsertionSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            Sorts `list`, maintaining the order of any elements with an identical comparison
            (unlike the standard <see cref="M:System.Collections.Generic.List`1.Sort"/> method).
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.InsertSorted``1(System.Collections.Generic.List{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Inserts a new value into a sorted list.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.RequireCapacity``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            If the <see cref="P:System.Collections.Generic.List`1.Capacity"/> is less than the specified value, it is increased to that value.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.SetCount``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Adds or removes items to bring the <see cref="P:System.Collections.Generic.List`1.Count"/> equal to the specified `count`.
            </summary>
        </member>
        <member name="F:Weaver.WeaverUtilities.UnityEditor">
            <summary>The conditional compilation symbol used in the Unity Editor.</summary>
        </member>
        <member name="F:Weaver.WeaverUtilities.DocumentationURL">
            <summary>The URL of the Weaver documentation.</summary>
        </member>
        <member name="F:Weaver.WeaverUtilities.ForumURL">
            <summary>The URL of the Weaver thread on the Unity Forum.</summary>
        </member>
        <member name="F:Weaver.WeaverUtilities.DeveloperEmail">
            <summary>[Editor-Only] The email address to contact for anything regarding Weaver.</summary>
        </member>
        <member name="F:Weaver.WeaverUtilities.WeaverWindowPath">
            <summary>[Editor-Only] The menu path of the Weaver Window.</summary>
        </member>
        <member name="F:Weaver.WeaverUtilities.NoRename">
            <summary>Disables member renaming in an [<see cref="T:System.Reflection.ObfuscationAttribute"/>].</summary>
        </member>
        <member name="F:Weaver.WeaverUtilities.AssetStoreProURL">
            <summary>The Asset Store URL of Weaver Pro.</summary>
        </member>
        <member name="F:Weaver.WeaverUtilities.IsWeaverPro">
            <summary>This is Weaver Lite.</summary>
        </member>
        <member name="F:Weaver.WeaverUtilities.Version">
            <summary>This is "Weaver Lite v6.2".</summary>
        </member>
        <member name="F:Weaver.WeaverUtilities.AssetStoreLiteURL">
            <summary>The Asset Store URL of Weaver Lite.</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.DeepToString(System.Collections.IEnumerable,System.String)">
            <summary>Returns a string containing the value of each element in `collection`.</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.DeepToString(System.Collections.IEnumerable)">
            <summary>Returns a string containing the value of each element in `collection` (each on a new line).</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.AppendDeepToString(System.Text.StringBuilder,System.Collections.IEnumerator,System.String)">
            <summary>Each element returned by `enumerator` is appended to `text`.</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.DeepToString(System.Collections.IEnumerator,System.String)">
            <summary>Returns a string containing the value of each element in `enumerator`.</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.DeepToString(System.Collections.IEnumerator)">
            <summary>Returns a string containing the value of each element in `enumerator` (each on a new line).</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.IndexOfLastSlash(System.String)">
            <summary>Returns the index of the last forward slash or back slash.</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.ReplaceSlashesForward(System.String)">
            <summary>Replaces back slashes with forward slashes (\ -> /).</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.ReplaceSlashesBack(System.String)">
            <summary>Replaces forward slashes with back slashes (/ -> \).</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.RemoveTrailingSlashes(System.String)">
            <summary>Returns `str` with any forward slashes removed from the end.</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.SkipWhiteSpace(System.String,System.Int32@)">
            <summary>
            Increments `index` until `str[index]` is no longer a whitespace character.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.SkipWhiteSpaceBackwards(System.String,System.Int32@)">
            <summary>
            Decrements `index` until `str[index]` is no longer a whitespace character.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.GetFileExtensionIndex(System.String)">
            <summary>
            Gets the index of the '.' at the start of the file extension of `path` (or -1 if it has no file extension).
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.CompareWithFilesBeforeFolders(System.String,System.String)">
            <summary>
            Compares two strings to sort files before sub folders.
            <para></para>Note: this method only interprets forward slashes.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.FriendlyFullName``1(``0)">
            <summary>Returns 'T'.`obj.ToString()`. Useful for enums.</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.AppendFriendlyFullName``1(System.Text.StringBuilder,``0)">
            <summary>Appends 'Type'.`obj.ToString()`. Useful for enums.</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.ConvertCamelCaseToFriendly(System.String,System.Boolean)">
            <summary>
            Adds spaces to `camelCase` before each uppercase letter.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.ConvertCamelCaseToFriendly(System.Text.StringBuilder,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Adds spaces to `camelCase` before each uppercase letter.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.ConvertFieldNameToFriendly(System.String,System.Boolean)">
            <summary>
            Adds spaces to `camelCase` before each uppercase letter and removes any underscores from the start.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.AppendXmlString(System.Text.StringBuilder,System.String)">
            <summary>Appends the specified string sanitized for XML.</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.ApplyBoldTagsToLastSection(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Inserts rich text bold tags around the last word in `text`.
            The following characters denote the start of a section: dot, slash, tab, new line.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.ColorToHex(UnityEngine.Color32)">
            <summary>Returns a string containing the hexadecimal representation of `color`.</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.AppendColorToHex(System.Text.StringBuilder,UnityEngine.Color32)">
            <summary>Appends the hexadecimal representation of `color`.</summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.AppendColorTag(System.Text.StringBuilder,UnityEngine.Color32,System.String)">
            <summary>Appends the a rich text color tag around `message`.</summary>
        </member>
        <member name="F:Weaver.WeaverUtilities.Tab">
            <summary>
            4 spaces.
            <para></para>
            Could be '\t', but this makes it easier to copy code into websites like Stack Overflow which use 4 spaces for tabs.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.Indent(System.Text.StringBuilder,System.Int32)">
            <summary>Appends <see cref="F:Weaver.WeaverUtilities.Tab"/> the specified number of times.</summary>
        </member>
        <member name="F:Weaver.WeaverUtilities.NewLine">
            <summary>
            Unity's profiler claims that each call to <see cref="P:System.Environment.NewLine"/> allocates 30 bytes of garbage
            so we cache the value here for AppendLineConst to use.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.AppendLineConst(System.Text.StringBuilder)">
            <summary>
            This method allocates no garbage unlike <see cref="M:System.Text.StringBuilder.AppendLine"/> which allocates 30 bytes
            of garbage per call for accessing <see cref="P:System.Environment.NewLine"/> (according to Unity's profiler).
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.AppendLineConst(System.Text.StringBuilder,System.String)">
            <summary>
            This method allocates no garbage unlike <see cref="M:System.Text.StringBuilder.AppendLine"/> which allocates 30 bytes
            of garbage per call for accessing <see cref="P:System.Environment.NewLine"/> (according to Unity's profiler).
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.AppendLineConst(System.Text.StringBuilder,System.Object)">
            <summary>
            This method allocates no garbage unlike <see cref="M:System.Text.StringBuilder.AppendLine"/> which allocates 30 bytes
            of garbage per call for accessing <see cref="P:System.Environment.NewLine"/> (according to Unity's profiler).
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.GetStringBuilder">
            <summary>
            Gets an available <see cref="T:System.Text.StringBuilder"/> from the pool in the Unity Editor but simply returns a new
            one at runtime.
            <para></para>
            Once you are done with it, give it back with <see cref="M:Weaver.WeaverUtilities.Release(System.Text.StringBuilder)"/> or <seealso cref="M:Weaver.WeaverUtilities.ReleaseToString(System.Text.StringBuilder)"/>
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.Release(System.Text.StringBuilder)">
            <summary>[Editor-Conditional]
            Gives a string builder back to the pool.
            Use <see cref="M:Weaver.WeaverUtilities.ReleaseToString(System.Text.StringBuilder)"/> if you also need its string.
            </summary>
        </member>
        <member name="M:Weaver.WeaverUtilities.ReleaseToString(System.Text.StringBuilder)">
            <summary>
            Gives a string builder to the pool and returns its string.
            Use <see cref="M:Weaver.WeaverUtilities.Release(System.Text.StringBuilder)"/> if you don't need its string.
            </summary>
        </member>
        <member name="T:Weaver.IMetaDataProvider`1">
            <summary>An object that can specify its own meta-data.</summary>
        </member>
        <member name="P:Weaver.IMetaDataProvider`1.MetaData">
            <summary>The meta-data of this object.</summary>
        </member>
        <member name="T:Weaver.AssetInjectionAttribute">
            <summary>An <see cref="T:Weaver.InjectionAttribute"/> for attributes that inject an asset reference.</summary>
        </member>
        <member name="P:Weaver.AssetInjectionAttribute.FileName">
            <summary>If set, this value will be used as the ideal file name when searching for the target asset.</summary>
        </member>
        <member name="P:Weaver.AssetInjectionAttribute.DisableAutoFind">
            <summary>If true, this attribute will not search for a target asset by name when it is first applied.</summary>
        </member>
        <member name="P:Weaver.AssetInjectionAttribute.ProceduralAsset">
            <summary>[Editor-Only] The <see cref="T:Weaver.Editor.Procedural.ProceduralAsset"/> associated with this attribute (if any).</summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.AcquireSavedData">
            <summary>[Editor-Only]
            Ensures that the <see cref="P:Weaver.AssetInjectionAttribute.SavedData"/> has been acquired. If new data was created due to none existing
            previously, this method also tries to find an appropriate asset to assign to this attribute based on the
            attributed member's name.
            </summary>
        </member>
        <member name="P:Weaver.AssetInjectionAttribute.Asset">
            <summary>[Editor-Only] The target asset.</summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.TryInitialize">
            <summary>[Editor-Only]
            Attempts to initialize this attribute and returns true if successful.
            <para></para>
            Specifically, this method ensures that the <see cref="P:Weaver.InjectionAttribute.MemberType"/> inherits from
            <see cref="T:UnityEngine.Object"/>.
            </summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.TryInitialize(System.Type)">
            <summary>[Editor-Only]
            Attempts to initialize this attribute and returns true if successful.
            <para></para>
            Specifically, this method ensures that the <see cref="P:Weaver.InjectionAttribute.MemberType"/> inherits from
            <see cref="T:UnityEngine.Object"/>.
            </summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.TrySetAsset(UnityEngine.Object)">
            <summary>[Editor-Only]
            Ensures that the specified `asset` can be injected by this attribute and assigns it to the
            <see cref="P:Weaver.AssetInjectionAttribute.Asset"/>. The return value indicates whether it was assigned.
            </summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.ValidateAsset(UnityEngine.Object)">
            <summary>[Editor-Only]
            Indicates whether the specified `asset` can be injected into the attributed
            <see cref="P:Weaver.InjectionAttribute.Member"/> by this attribute.
            </summary>
        </member>
        <member name="P:Weaver.AssetInjectionAttribute.AssetType">
            <summary>[Editor-Only]
            The type of asset which will be injected into the attributed <see cref="P:Weaver.InjectionAttribute.Member"/>.
            </summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.InjectValue">
            <summary>[Editor-Only]
            Assigns the appropriate value to the attributed property.
            </summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.GetMissingValueMessage">
            <summary>[Editor-Only]
            Returns a message indicating that no value has been assigned for this attribute.
            </summary>
        </member>
        <member name="P:Weaver.AssetInjectionAttribute.ShouldShow">
            <summary>[Editor-Only]
            Indicates whether this attribute should currently be visible in the <see cref="T:Weaver.Editor.Window.WeaverWindow"/>.
            </summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.DoInspectorGUI">
            <summary>[Editor-Only] Draws the inspector GUI for this attribute.</summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.DoAssetField">
            <summary>[Editor-Only]
            Draws an inspector field for the <see cref="P:Weaver.AssetInjectionAttribute.Asset"/>.
            </summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.GetInspectorTooltip">
            <summary>[Editor-Only]
            Builds, caches, and returns a tooltip message for this attribute.
            </summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.DoFindButton">
            <summary>[Editor-Only]
            Draws a button to attempt to find the target asset using an <see cref="T:Weaver.Editor.AssetPathMatcher"/>.
            </summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.DoCreateButton">
            <summary>[Editor-Only]
            Draws a button to attempt to create a default asset of the <see cref="P:Weaver.AssetInjectionAttribute.AssetType"/> in the procedural asset
            output directory.
            </summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.ManuallyAssignAsset(UnityEngine.Object)">
            <summary>[Editor-Only]
            Tries to set the <see cref="P:Weaver.AssetInjectionAttribute.Asset"/> and records an <see cref="T:UnityEditor.Undo"/> state for it.
            </summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.AddItemsToMenu(UnityEditor.GenericMenu)">
            <summary>[Editor-Only]
            Adds various functions for this attribute to the `menu`.
            </summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.AppendDetails(System.Text.StringBuilder,System.Boolean@)">
            <summary>[Editor-Only]
            Appends any optional properties that have been set on this attribute.
            </summary>
        </member>
        <member name="P:Weaver.AssetInjectionAttribute.AllAssetInjectors">
            <summary>[Editor-Only]
            A subset of <see cref="P:Weaver.Editor.InjectorManager.AllInjectionAttributes"/> containing only asset injectors.
            </summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.Get(System.Reflection.MemberInfo)">
            <summary>[Editor-Only]
            Returns the <see cref="T:Weaver.AssetInjectionAttribute"/> on the specified `member` (if any).
            </summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.SetValue(System.Object)">
            <summary>[Editor-Only]
            Tries to set the value of the attributed member. Catches and logs any exceptions.
            </summary>
        </member>
        <member name="M:Weaver.AssetInjectionAttribute.GetSourceAsset(System.Object)">
            <summary>[Editor-Only]
            Returns the original asset that was used to inject the specified `value` (if any).
            </summary>
        </member>
        <member name="T:Weaver.AssetInstanceAttribute">
            <summary>
            An <see cref="T:Weaver.AssetInjectionAttribute"/> which instantiates a copy of the target asset and assigns the copy to
            the attributed member.
            </summary>
        </member>
        <member name="P:Weaver.AssetInstanceAttribute.DontAssign">
            <summary>
            If set to true: when the instance is created it will not be assigned to the attributed member.
            This is useful if the instance doesn't need a static access point or if it will assign one itself.
            </summary>
        </member>
        <member name="P:Weaver.AssetInstanceAttribute.StartInactive">
            <summary>
            If set to true: the instance will be created with its <see cref="P:UnityEngine.GameObject.activeSelf"/> set to false.
            Only works for <see cref="T:UnityEngine.GameObject"/>s and <see cref="T:UnityEngine.Component"/>s.
            </summary>
        </member>
        <member name="P:Weaver.AssetInstanceAttribute.InEditMode">
            <summary>[Editor-Only]
            Returns false. Asset instances should not be created automatically in Edit Mode.
            </summary>
        </member>
        <member name="M:Weaver.AssetInstanceAttribute.GetValueToInject">
            <summary>[Editor-Only]
            Returns a value to be assigned to the attributed property.
            </summary>
        </member>
        <member name="M:Weaver.AssetInstanceAttribute.SetValue(System.Object)">
            <summary>[Editor-Only]
            Tries to set the value of the attributed member. Catches and logs any exceptions.
            </summary>
        </member>
        <member name="P:Weaver.AssetInstanceAttribute.Icon">
            <summary>[Editor-Only] The <see cref="T:UnityEngine.Texture"/> to use as an icon for this attribute.</summary>
        </member>
        <member name="M:Weaver.AssetInstanceAttribute.AppendDetails(System.Text.StringBuilder,System.Boolean@)">
            <summary>[Editor-Only]
            Appends any optional properties that have been set on this attribute.
            </summary>
        </member>
        <member name="T:Weaver.AssetPoolAttribute">
            <summary>
            An <see cref="T:Weaver.AssetInjectionAttribute"/> which assigns an <see cref="T:Weaver.ObjectPool`1"/> to the attributed member
            that creates new items by instantiating copies of the target asset.
            </summary>
        </member>
        <member name="P:Weaver.AssetPoolAttribute.PreAllocate">
            <summary>The injected pool immediately creates this many items.</summary>
        </member>
        <member name="P:Weaver.AssetPoolAttribute.DontReleaseOnSceneLoad">
            <summary>
            By default, the injected pool will automatically release all active items when a scene is loaded.
            Setting this to true disables that behaviour.
            </summary>
        </member>
        <member name="P:Weaver.AssetPoolAttribute.DontGetSharedPool">
            <summary>
            By default, the injected pool will be shared with any other pools using the target asset.
            Setting this to true disables that behaviour.
            </summary>
        </member>
        <member name="P:Weaver.AssetPoolAttribute.AssetType">
            <summary>[Editor-Only]
            The type of asset which will be injected into the attributed <see cref="P:Weaver.InjectionAttribute.Member"/>.
            </summary>
        </member>
        <member name="M:Weaver.AssetPoolAttribute.TryInitialize">
            <summary>[Editor-Only]
            Attempts to initialize this attribute and returns true if successful.
            <para></para>
            Specifically, this method ensures that the <see cref="P:Weaver.InjectionAttribute.MemberType"/> inherits from
            <see cref="T:Weaver.ObjectPool`1"/> and isn't abstract.
            </summary>
        </member>
        <member name="P:Weaver.AssetPoolAttribute.InEditMode">
            <summary>[Editor-Only]
            Returns false. Pools could potentially be injected in Edit Mode, but the instances would need to be
            destroyed manually and their ownership would be unclear.
            </summary>
        </member>
        <member name="M:Weaver.AssetPoolAttribute.GetValueToInject">
            <summary>[Editor-Only]
            Returns a value to be assigned to the attributed property.
            </summary>
        </member>
        <member name="P:Weaver.AssetPoolAttribute.Icon">
            <summary>[Editor-Only] The <see cref="T:UnityEngine.Texture"/> to use as an icon for this attribute.</summary>
        </member>
        <member name="M:Weaver.AssetPoolAttribute.AppendDetails(System.Text.StringBuilder,System.Boolean@)">
            <summary>[Editor-Only]
            Appends any optional properties that have been set on this attribute.
            </summary>
        </member>
        <member name="T:Weaver.AssetReferenceAttribute">
            <summary>
            An <see cref="T:Weaver.AssetInjectionAttribute"/> which assigns the target asset directly to the attributed member.
            </summary>
        </member>
        <member name="P:Weaver.AssetReferenceAttribute.IsWeaverAsset">
            <summary>[Editor-Only]
            Indicates whether the attributed member type is <see cref="T:Weaver.Asset`1"/>.
            </summary>
        </member>
        <member name="P:Weaver.AssetReferenceAttribute.AssetType">
            <summary>[Editor-Only]
            The type of asset which will be injected into the attributed <see cref="P:Weaver.InjectionAttribute.Member"/>.
            </summary>
        </member>
        <member name="P:Weaver.AssetReferenceAttribute.InEditMode">
            <summary>[Editor-Only]
            Returns true. Asset references can safely be assigned in Edit Mode.
            </summary>
        </member>
        <member name="M:Weaver.AssetReferenceAttribute.TryInitialize">
            <summary>[Editor-Only]
            Attempts to initialize this attribute and returns true if successful.
            </summary>
        </member>
        <member name="M:Weaver.AssetReferenceAttribute.ValidateAsset(UnityEngine.Object)">
            <summary>[Editor-Only]
            Indicates whether the specified `asset` can be injected into the attributed
            <see cref="P:Weaver.InjectionAttribute.Member"/> by this attribute.
            </summary>
        </member>
        <member name="M:Weaver.AssetReferenceAttribute.GetValueToInject">
            <summary>[Editor-Only] Returns a value to be assigned to the attributed property.</summary>
        </member>
        <member name="P:Weaver.AssetReferenceAttribute.Icon">
            <summary>[Editor-Only] The <see cref="T:UnityEngine.Texture"/> to use as an icon for this attribute.</summary>
        </member>
        <member name="T:Weaver.EditorPrefAttribute">
            <summary>
            An <see cref="T:Weaver.InjectionAttribute"/> which saves and loads the value of the attributed member in
            <see cref="T:UnityEditor.EditorPrefs"/>.
            </summary>
        </member>
        <member name="M:Weaver.EditorPrefAttribute.#ctor">
            <summary>[Editor-Only] Creates a new <see cref="T:Weaver.EditorPrefAttribute"/>.</summary>
        </member>
        <member name="M:Weaver.EditorPrefAttribute.GetValueToInject">
            <summary>[Editor-Only]
            Returns a value to be assigned to the attributed property.
            </summary>
        </member>
        <member name="M:Weaver.EditorPrefAttribute.IsSupportedPref(System.Type)">
            <summary>[Editor-Only]
            Indicates whether the specified `type` can be saved as a pref.
            </summary>
        </member>
        <member name="T:Weaver.InjectionAttribute">
            <summary>
            Base class for attributes which define behaviours for automatically injecting values into static properties.
            </summary>
        </member>
        <member name="P:Weaver.InjectionAttribute.EditorOnly">
            <summary>
            If set to true, this attribute won't be used in builds. Must be set for attributes inside
            <c>#if UNITY_EDITOR</c> regions since that fact can't be detected automatically.
            </summary>
        </member>
        <member name="P:Weaver.InjectionAttribute.Tooltip">
            <summary>
            A description of the purpose of the attributed property to be shown in the Unity Editor.
            </summary>
        </member>
        <member name="P:Weaver.InjectionAttribute.Optional">
            <summary>
            If set to true, this attribute will not give any errors when it is unable to initialize with an appropriate value.
            </summary>
        </member>
        <member name="P:Weaver.InjectionAttribute.Field">
            <summary>[Editor-Only]
            The field this attribute is attached to. Null if attached to a property.
            </summary>
        </member>
        <member name="P:Weaver.InjectionAttribute.Property">
            <summary>[Editor-Only]
            The property this attribute is attached to. Null if attached to a field.
            </summary>
        </member>
        <member name="P:Weaver.InjectionAttribute.Member">
            <summary>[Editor-Only]
            The <see cref="T:System.Reflection.FieldInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/> of the attributed member.
            </summary>
        </member>
        <member name="P:Weaver.InjectionAttribute.MemberType">
            <summary>[Editor-Only]
            The <see cref="P:System.Reflection.FieldInfo.FieldType"/> or <see cref="P:System.Reflection.PropertyInfo.PropertyType"/> of the attributed member.
            </summary>
        </member>
        <member name="P:Weaver.InjectionAttribute.HasGetter">
            <summary>[Editor-Only] Indicates whether the value of attributed member can be read.</summary>
        </member>
        <member name="P:Weaver.InjectionAttribute.HasPublicGetter">
            <summary>[Editor-Only] Indicates whether the value of attributed member can be read publicly.</summary>
        </member>
        <member name="P:Weaver.InjectionAttribute.HasPublicSetter">
            <summary>[Editor-Only] Indicates whether the value of attributed member can be written publicly.</summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.TryInitialize">
            <summary>[Editor-Only]
            Attempts to initialize this attribute and returns true if successful.
            </summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.LogThisInvalidAttribute(System.String)">
            <summary>[Editor-Only]
            Logs a message indicating that this attribute is invalid, followed by a `message` explaining why.
            Returns false.
            </summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.Equals(System.Object)">
            <summary>[Editor-Only] Uses <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/> instead of the default <see cref="M:System.Attribute.Equals(System.Object)"/>.</summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.op_Equality(Weaver.InjectionAttribute,System.Object)">
            <summary>[Editor-Only] Uses <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/> instead of the default <see cref="M:System.Attribute.Equals(System.Object)"/>.</summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.op_Inequality(Weaver.InjectionAttribute,System.Object)">
            <summary>[Editor-Only] Uses <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/> instead of the default <see cref="M:System.Attribute.Equals(System.Object)"/>.</summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.GetHashCode">
            <summary>[Editor-Only] Returns the hash code for this instance.</summary>
        </member>
        <member name="P:Weaver.InjectionAttribute.InEditMode">
            <summary>[Editor-Only]
            Indicates whether the attributed member's value should be assigned in Edit Mode, otherwise it will only
            be assigned in Play Mode and on startup in a build.
            </summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.GetValueToInject">
            <summary>[Editor-Only]
            Returns a value to be assigned to the attributed property.
            </summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.InjectValue">
            <summary>[Editor-Only]
            Assigns the appropriate value to the attributed property.
            </summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.GetMissingValueMessage">
            <summary>[Editor-Only]
            Returns a message indicating that no value has been assigned for this attribute.
            </summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.GetValue">
            <summary>[Editor-Only]
            Tries to get the value of the attributed member. Catches and logs any exceptions.
            </summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.SetValue(System.Object)">
            <summary>[Editor-Only]
            Tries to set the value of the attributed member. Catches and logs any exceptions.
            </summary>
        </member>
        <member name="P:Weaver.InjectionAttribute.ShouldShow">
            <summary>[Editor-Only]
            Indicates whether this attribute should currently be visible in the <see cref="T:Weaver.Editor.Window.WeaverWindow"/>.
            </summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.GetTempLabelContent">
            <summary>[Editor-Only]
            Returns a reusable <see cref="T:UnityEngine.GUIContent"/> containing the name, tooltip, and icon of this attribute.
            </summary>
        </member>
        <member name="F:Weaver.InjectionAttribute._InspectorTooltip">
            <summary>[Editor-Only]
            The cached tooltip of this attribute. Should only be read by <see cref="M:Weaver.InjectionAttribute.GetInspectorTooltip"/>.
            </summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.GetInspectorTooltip">
            <summary>[Editor-Only]
            Builds, caches, and returns a tooltip message for this attribute.
            </summary>
        </member>
        <member name="P:Weaver.InjectionAttribute.Icon">
            <summary>[Editor-Only] The <see cref="T:UnityEngine.Texture"/> to use as an icon for this attribute.</summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.DoInspectorGUI">
            <summary>[Editor-Only] Draws the inspector GUI for this attribute.</summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.CheckContextMenu">
            <summary>[Editor-Only]
            Calls <see cref="M:Weaver.InjectionAttribute.CheckContextMenu(UnityEngine.Rect)"/> with the last <see cref="T:UnityEngine.GUILayout"/> rect.
            </summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.CheckContextMenu(UnityEngine.Rect)">
            <summary>[Editor-Only]
            If the current event is a <see cref="F:UnityEngine.EventType.ContextClick"/> inside the `area`, this method builds a menu
            using <see cref="M:Weaver.InjectionAttribute.AddItemsToMenu(UnityEditor.GenericMenu)"/> and shows it.
            </summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.AddItemsToMenu(UnityEditor.GenericMenu)">
            <summary>[Editor-Only]
            Adds various functions for this attribute to the `menu`.
            </summary>
        </member>
        <member name="F:Weaver.InjectionAttribute._ToString">
            <summary>[Editor-Only] Cached return value of <see cref="M:Weaver.InjectionAttribute.ToString"/>.</summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.ToString">
            <summary>[Editor-Only] Returns a description of this attribute.</summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.AppendDetails(System.Text.StringBuilder,System.Boolean@)">
            <summary>[Editor-Only]
            Appends any optional properties that have been set on this attribute.
            </summary>
        </member>
        <member name="M:Weaver.InjectionAttribute.AppendDetail(System.Text.StringBuilder,System.Boolean@,System.String)">
            <summary>[Editor-Only]
            Appends an opening bracket or comma depending on `isFirst` followed by the specified `detail` and sets
            `isFirst` to false. Intended for use within <see cref="M:Weaver.InjectionAttribute.AppendDetails(System.Text.StringBuilder,System.Boolean@)"/>.
            </summary>
        </member>
        <member name="T:Weaver.OnInjectionCompleteAttribute">
            <summary>
            An <see cref="T:System.Attribute"/> for static parameterless methods to have Weaver invoke them once the static
            dependency injection is complete.
            </summary>
        </member>
        <member name="P:Weaver.OnInjectionCompleteAttribute.EditorOnly">
            <summary>
            If set to true, this attribute won't be used in builds. Must be set for attributes inside #if UNITY_EDITOR
            regions since that fact can't be detected automatically.
            </summary>
        </member>
        <member name="P:Weaver.OnInjectionCompleteAttribute.InEditMode">
            <summary>[Editor-Only]
            Indicates whether the attributed method should be invoked in Edit Mode, otherwise it will only be invoked
            in Play Mode and on startup in a build.
            </summary>
        </member>
        <member name="P:Weaver.OnInjectionCompleteAttribute.ExecutionTime">
            <summary>
            Determines the order in which the attributed method should be executed in relation to other injection
            events. Methods are executed from lowest <see cref="P:Weaver.OnInjectionCompleteAttribute.ExecutionTime"/> to highest.
            </summary>
        </member>
        <member name="M:Weaver.OnInjectionCompleteAttribute.CompareExecutionTime(Weaver.OnInjectionCompleteAttribute,Weaver.OnInjectionCompleteAttribute)">
            <summary>Compares the <see cref="P:Weaver.OnInjectionCompleteAttribute.ExecutionTime"/> of each attribute.</summary>
        </member>
        <member name="F:Weaver.OnInjectionCompleteAttribute._Method">
            <summary>[Editor-Only] The method this attribute is attached to.</summary>
        </member>
        <member name="M:Weaver.OnInjectionCompleteAttribute.Invoke">
            <summary>[Editor-Only]
            Invokes the attributed member. Catches and logs any exceptions.
            </summary>
        </member>
        <member name="M:Weaver.OnInjectionCompleteAttribute.ToString">
            <summary>[Editor-Only] Returns a description of this attribute and the attributed method.</summary>
        </member>
        <member name="M:Weaver.OnInjectionCompleteAttribute.OnInspectorGUI">
            <summary>[Editor-Only] Draws the GUI for this attribute in the inspector.</summary>
        </member>
        <member name="T:Weaver.PrefAttribute">
            <summary>
            An <see cref="T:Weaver.InjectionAttribute"/> which saves and loads the value of the attributed member in
            <see cref="T:UnityEngine.PlayerPrefs"/>.
            </summary>
        </member>
        <member name="P:Weaver.PrefAttribute.Key">
            <summary>
            The name that will be used to identify the saved value.
            If not set, it will use the attributed member's Namespace.DeclaringType.Name.
            </summary>
        </member>
        <member name="P:Weaver.PrefAttribute.OldKey">
            <summary>
            The <see cref="P:Weaver.PrefAttribute.Key"/> that the pref was previously saved with.
            </summary>
        </member>
        <member name="E:Weaver.PrefAttribute.OnSave">
            <summary>
            A callback which is invoked by <see cref="M:Weaver.PrefAttribute.SaveAll"/>.
            </summary>
        </member>
        <member name="M:Weaver.PrefAttribute.SaveAll">
            <summary>
            Writes the values of all prefs to their persistent storage.
            </summary>
        </member>
        <member name="P:Weaver.PrefAttribute.DefaultValue">
            <summary>[Editor-Only]
            The initial value of the attributed member before it was injected.
            </summary>
        </member>
        <member name="M:Weaver.PrefAttribute.TryInitialize">
            <summary>[Editor-Only]
            Attempts to initialize this attribute and returns true if successful.
            <para></para>
            Specifically, this method ensures that the <see cref="P:Weaver.InjectionAttribute.MemberType"/> is a supported pref
            type.
            </summary>
        </member>
        <member name="P:Weaver.PrefAttribute.InEditMode">
            <summary>[Editor-Only]
            Returns true. Prefs should always have their saved value.
            </summary>
        </member>
        <member name="M:Weaver.PrefAttribute.GetValueToInject">
            <summary>[Editor-Only]
            Returns a value to be assigned to the attributed property.
            </summary>
        </member>
        <member name="P:Weaver.PrefAttribute.Type">
            <summary>[Editor-Only] The <see cref="T:Weaver.PrefAttribute.PrefType"/> of the attributed member.</summary>
        </member>
        <member name="T:Weaver.PrefAttribute.PrefType">
            <summary>[Editor-Only] Denotes the way a particular pref will be saved and loaded.</summary>
        </member>
        <member name="M:Weaver.PrefAttribute.GetPrefType(System.Type)">
            <summary>[Editor-Only]
            Returns the <see cref="T:Weaver.PrefAttribute.PrefType"/> associated with the specified `type`.
            </summary>
        </member>
        <member name="M:Weaver.PrefAttribute.HasKey(System.String)">
            <summary>[Editor-Only] Indicates whether a value has been saved using the specified `key`.</summary>
        </member>
        <member name="M:Weaver.PrefAttribute.GetFloat(System.String)">
            <summary>[Editor-Only] Returns the float value saved with the specified `key`.</summary>
        </member>
        <member name="M:Weaver.PrefAttribute.GetInt(System.String)">
            <summary>[Editor-Only] Returns the int value saved with the specified `key`.</summary>
        </member>
        <member name="M:Weaver.PrefAttribute.GetString(System.String)">
            <summary>[Editor-Only] Returns the string value saved with the specified `key`.</summary>
        </member>
        <member name="M:Weaver.PrefAttribute.SetFloat(System.String,System.Single)">
            <summary>[Editor-Only] Saves the specified float `value` with the specified `key`.</summary>
        </member>
        <member name="M:Weaver.PrefAttribute.SetInt(System.String,System.Int32)">
            <summary>[Editor-Only] Saves the specified int `value` with the specified `key`.</summary>
        </member>
        <member name="M:Weaver.PrefAttribute.SetString(System.String,System.String)">
            <summary>[Editor-Only] Saves the specified string `value` with the specified `key`.</summary>
        </member>
        <member name="M:Weaver.PrefAttribute.IsSupportedPref(System.Type)">
            <summary>[Editor-Only]
            Indicates whether the specified `type` can be saved as a pref.
            </summary>
        </member>
        <member name="M:Weaver.PrefAttribute.DoInspectorGUI">
            <summary>[Editor-Only] Draws the inspector GUI for this attribute.</summary>
        </member>
        <member name="P:Weaver.PrefAttribute.Icon">
            <summary>[Editor-Only] The <see cref="T:UnityEngine.Texture"/> to use as an icon for this attribute.</summary>
        </member>
        <member name="M:Weaver.PrefAttribute.AppendDetails(System.Text.StringBuilder,System.Boolean@)">
            <summary>[Editor-Only]
            Appends any optional properties that have been set on this attribute.
            </summary>
        </member>
        <member name="M:Weaver.PrefAttribute.AddItemsToMenu(UnityEditor.GenericMenu)">
            <summary>[Editor-Only]
            Adds various functions for this attribute to the `menu`.
            </summary>
        </member>
        <member name="T:Weaver.AnimationReferenceAttribute">
            <summary>
            Marks a <see cref="T:System.String"/> or <see cref="T:System.Int32"/> field to show a popup menu in the inspector which lets you
            select an animation value name or hash respectively. Values include both states and parameters.
            <para></para>
            WARNING: selecting a value using this attribute does not link the field to that state or parameter. Renaming
            the state or parameter will NOT automatically update the value of the attributed field.
            <para></para>
            If you're interested in an animation system which avoids the need for these weak unsafe references entirely,
            you should check out <a href="https://kybernetik.com.au/animancer">Animancer</a>.
            </summary>
        </member>
        <member name="T:Weaver.ProceduralAssetAttribute">
            <summary>
            When placed alongside any kind of <see cref="T:Weaver.AssetInjectionAttribute"/>, this attribute allows the injected
            asset to be procedurally generated.
            </summary>
        </member>
        <member name="P:Weaver.ProceduralAssetAttribute.Generator">
            <summary>
            The name of the static method which is used to generate this procedural asset.
            </summary>
        </member>
        <member name="P:Weaver.ProceduralAssetAttribute.CheckShouldShow">
            <summary>
            The name of a static <see cref="T:System.Boolean"/> property or method which determines whether to show the asset in
            the <see cref="T:Weaver.Editor.Window.WeaverWindow"/>.
            </summary>
        </member>
        <member name="P:Weaver.ProceduralAssetAttribute.CheckShouldGenerate">
            <summary>
            The name of a static <see cref="T:System.Boolean"/> property or method which determines whether to generate the asset.
            </summary>
        </member>
        <member name="P:Weaver.ProceduralAssetAttribute.FileExtension">
            <summary>
            The file extension of the asset file.
            Should begin with a period.
            If not specified, the <see cref="P:Weaver.Editor.Procedural.AssetGenerator.DefaultFileExtension"/> will be used.
            </summary>
        </member>
        <member name="P:Weaver.ProceduralAssetAttribute.AutoGenerateOnBuild">
            <summary>
            Determines when the target asset should be automatically generated when compiling a build.
            If not set, the global setting will be used.
            </summary>
        </member>
        <member name="P:Weaver.ProceduralAssetAttribute.AutoGenerateOnSave">
            <summary>
            Determines when the target asset should be automatically generated whenever assets are saved.
            Default false.
            </summary>
        </member>
        <member name="P:Weaver.ProceduralAssetAttribute.UseTempScene">
            <summary>
            Indicates whether a temporary scene should be opened during the asset generation process.
            </summary>
        </member>
        <member name="T:Weaver.CSharp">
            <summary>A variety of methods relating to C# code.</summary>
        </member>
        <member name="M:Weaver.CSharp.HasKeyword(System.Type)">
            <summary>Returns true if the specified `type` is associated with a C# keyword such as <see cref="T:System.Int32"/>, <see cref="T:System.Single"/>, <see cref="T:System.String"/>, etc.</summary>
        </member>
        <member name="M:Weaver.CSharp.GetKeyword(System.Type)">
            <summary>
            Returns the C# keyword associated with the specified `type` such as <see cref="T:System.Int32"/>, <see cref="T:System.Single"/>, <see cref="T:System.String"/>, etc.
            Returns null if there is no associated keyword.
            </summary>
        </member>
        <member name="M:Weaver.CSharp.IsReservedKeyword(System.String)">
            <summary>
            Returns true if the `word` is reserved by the C# language.
            </summary>
        </member>
        <member name="T:Weaver.CSharp.NameVerbosity">
            <summary>Specifies how detailed the name returned by <see cref="M:Weaver.CSharp.GetNameCS(System.Type,Weaver.CSharp.NameVerbosity)"/> should be.</summary>
        </member>
        <member name="F:Weaver.CSharp.NameVerbosity.Basic">
            <summary>Similar to <see cref="P:System.Reflection.MemberInfo.Name"/>.</summary>
        </member>
        <member name="F:Weaver.CSharp.NameVerbosity.Nested">
            <summary>Similar to <see cref="F:Weaver.CSharp.NameVerbosity.Basic"/> but includes nested types.</summary>
        </member>
        <member name="F:Weaver.CSharp.NameVerbosity.Full">
            <summary>Similar to <see cref="P:System.Type.FullName"/>.</summary>
        </member>
        <member name="F:Weaver.CSharp.NameVerbosity.Global">
            <summary>Similar to <see cref="F:Weaver.CSharp.NameVerbosity.Full"/>, with the "global::" prefix.</summary>
        </member>
        <member name="M:Weaver.CSharp.GetNameCS(System.Type,Weaver.CSharp.NameVerbosity)">
            <summary>Returns the name of a `type` as it would appear in C# code. Results are cached.</summary>
            <example>
            <c>typeof(List&lt;float&gt;).FullName</c> would give:
            <c>System.Collections.Generic.List`1[[System.Single, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]</c>
            This method would instead return a different result depending on the specified `verbosity`:
            <list type="bullet">
            <item><see cref="F:Weaver.CSharp.NameVerbosity.Basic"/> would return <c>"List&lt;float&gt;"</c>.</item>
            <item><see cref="F:Weaver.CSharp.NameVerbosity.Nested"/> is like <see cref="F:Weaver.CSharp.NameVerbosity.Basic"/> but also includes nested types.</item>
            <item><see cref="F:Weaver.CSharp.NameVerbosity.Full"/> would return <c>"System.Collections.Generic.List&lt;float&gt;"</c>.</item>
            <item><see cref="F:Weaver.CSharp.NameVerbosity.Global"/> would return <c>"global::System.Collections.Generic.List&lt;float&gt;"</c>.</item>
            </list>
            </example>
        </member>
        <member name="M:Weaver.CSharp.AppendNameAndGenericArguments(System.Text.StringBuilder,System.Type,System.Type[],Weaver.CSharp.NameVerbosity,System.Int32)">
            <summary>
            Appends the name and generic arguments of `type` (after skipping the specified number).
            Returns the index of the last argument.
            </summary>
        </member>
        <member name="M:Weaver.CSharp.AppendNameAndGenericArguments(System.Text.StringBuilder,System.Type,Weaver.CSharp.NameVerbosity,System.Int32)">
            <summary>
            Appends the name and generic arguments of `type` (after skipping the specified number).
            Returns the index of the last argument.
            </summary>
        </member>
        <member name="M:Weaver.CSharp.GetNameCS(System.Reflection.MemberInfo,Weaver.CSharp.NameVerbosity)">
            <summary>
            Returns the full name of a `member` as it would appear in C# code.
            <para></para>
            For example, passing the <see cref="T:System.Reflection.MethodInfo"/> of this method in as its own parameter would return "<see cref="T:Weaver.CSharp"/>.GetNameCS".
            <para></para>
            Note that when `member` is a <see cref="T:System.Type"/>, this method calls <see cref="M:Weaver.CSharp.GetNameCS(System.Type,Weaver.CSharp.NameVerbosity)"/> instead.
            </summary>
        </member>
        <member name="M:Weaver.CSharp.CompareNamespaceTypeMember(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
            <summary>
            Compares the declaring type namespaces, then declaring type names, then member names.
            </summary>
        </member>
        <member name="M:Weaver.CSharp.GetNameCS(System.Delegate)">
            <summary>Returns the full name of a  `method` as it would appear in C# code. See: <see cref="M:Weaver.CSharp.GetNameCS(System.Reflection.MemberInfo,Weaver.CSharp.NameVerbosity)"/>.</summary>
        </member>
        <member name="M:Weaver.CSharp.GetNameCS(System.Action)">
            <summary>Returns the full name of a  `method` as it would appear in C# code. See: <see cref="M:Weaver.CSharp.GetNameCS(System.Reflection.MemberInfo,Weaver.CSharp.NameVerbosity)"/>.</summary>
        </member>
        <member name="M:Weaver.CSharp.GetNameCS``1(System.Action{``0})">
            <summary>Returns the full name of a  `method` as it would appear in C# code. See: <see cref="M:Weaver.CSharp.GetNameCS(System.Reflection.MemberInfo,Weaver.CSharp.NameVerbosity)"/>.</summary>
        </member>
        <member name="M:Weaver.CSharp.GetNameCS``1(System.Func{``0})">
            <summary>Returns the full name of a  `method` as it would appear in C# code. See: <see cref="M:Weaver.CSharp.GetNameCS(System.Reflection.MemberInfo,Weaver.CSharp.NameVerbosity)"/>.</summary>
        </member>
        <member name="M:Weaver.CSharp.GetNameCS``2(System.Func{``0,``1})">
            <summary>Returns the full name of a  `method` as it would appear in C# code. See: <see cref="M:Weaver.CSharp.GetNameCS(System.Reflection.MemberInfo,Weaver.CSharp.NameVerbosity)"/>.</summary>
        </member>
        <member name="M:Weaver.CSharp.GetNameCS``3(System.Func{``0,``1,``2})">
            <summary>Returns the full name of a  `method` as it would appear in C# code. See: <see cref="M:Weaver.CSharp.GetNameCS(System.Reflection.MemberInfo,Weaver.CSharp.NameVerbosity)"/>.</summary>
        </member>
        <member name="M:Weaver.CSharp.AppendSignature(System.Reflection.MethodInfo,System.Text.StringBuilder,Weaver.CSharp.NameVerbosity,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Appends the signature of `method` as it would appear in C# code.</summary>
        </member>
        <member name="M:Weaver.CSharp.GetSignature(System.Reflection.MethodInfo,Weaver.CSharp.NameVerbosity,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Returns the signature of `method` as it would appear in C# code.</summary>
        </member>
        <member name="M:Weaver.CSharp.AppendMethodSignature(System.Text.StringBuilder,System.Type,System.Type,System.String,System.Type[],System.Type[],Weaver.CSharp.NameVerbosity)">
            <summary>Appends the signature of a method with the specified details as it would appear in C# code.</summary>
        </member>
        <member name="M:Weaver.CSharp.AppendParameters(System.Text.StringBuilder,System.Reflection.ParameterInfo[],System.Boolean,Weaver.CSharp.NameVerbosity)">
            <summary>Appends the signature of `method` as it would appear in C# code.</summary>
        </member>
        <member name="T:Weaver.Asset`1">
             <summary>
             A wrapper which simplifies the process of lazy loading and caching resources and other assets, i.e. only
             loading them when they are first needed instead of on startup.
             </summary>
             <typeparam name="T">The type of asset being wrapped. Must derive from <see cref="T:UnityEngine.Object"/>.</typeparam>
             <example>
             This class can essentially replace the following code:
             <code>
             private static GameObject _Warrior;
             public static GameObject Warrior
             {
                 get
                 {
                     if (_Warrior == null)
                         _Warrior = Resources.Load&lt;GameObject&gt;("Creatures/Goblins/Warrior");
                     return _Warrior;
                 }
             }
             </code>
             With a single field:
             <code>
             public static readonly Asset&lt;GameObject&gt; Warrior = "Creatures/Goblins/Warrior";
             </code>
            
             <para></para>
             <list type="bullet">
               <item>
               You can either use an implicit conversion from string as shown above, or you can use a regular constructor
               like so: <c>new Asset&lt;GameObject&gt;("Creatures/Goblins/Warrior").</c>
               </item>
               <item>
               You can access the actual goblin warrior prefab using <c>Warrior.Target</c>. This will load the prefab
               the first time it is actually used and cache the value for better performance when you need the asset again
               in the future, just like the property in the above example.
               </item>
               <item>
               You can also implicitly cast the <c>Warrior</c> field to a <c>GameObject</c>. Unfortunately, you
               can’t use the basic <c>Object.Instantiate(Warrior)</c> due to ambiguity, but you can pass
               <c>Warrior.Target</c> into any of the other overloads or use <c>Warrior.Instantiate()</c>.
               </item>
               <item>
               If you specify a path that begins with <em>"Assets/"</em> and includes the file extension (such as
               <em>"Assets/Art/Creatures/Goblins/Warrior.fbx"</em>), it will use <c>AssetDatabase.LoadAssetAtPath</c>
               instead of <c>Resources.Load</c>. This allows you to target any asset in your project, though it won’t
               be able to load it at runtime once your project is built.
               </item>
             </list>
             </example>
        </member>
        <member name="F:Weaver.Asset`1.Path">
            <summary>The resource path or asset path of the asset.</summary>
        </member>
        <member name="M:Weaver.Asset`1.#ctor(System.String)">
            <summary>Creates an <see cref="T:Weaver.Asset`1"/> targeting the specified asset or resource path.</summary>
        </member>
        <member name="M:Weaver.Asset`1.op_Implicit(System.String)~Weaver.Asset{`0}">
            <summary>Creates an <see cref="T:Weaver.Asset`1"/> targeting the specified asset or resource path.</summary>
        </member>
        <member name="P:Weaver.Asset`1.Target">
            <summary>Loads, caches, and returns the asset.</summary>
        </member>
        <member name="M:Weaver.Asset`1.Load">
            <summary>Loads the asset into memory if it wasn't already loaded.</summary>
        </member>
        <member name="M:Weaver.Asset`1.Unload">
            <summary>Unloads the asset from memory using <see cref="M:UnityEngine.Resources.UnloadAsset(UnityEngine.Object)"/>.</summary>
        </member>
        <member name="M:Weaver.Asset`1.ForceReload">
            <summary>[Editor-Only] Reloads the asset, even if it was already loaded.</summary>
        </member>
        <member name="P:Weaver.Asset`1.Name">
            <summary>The file name of the asset (without the file extension).</summary>
        </member>
        <member name="P:Weaver.Asset`1.IsLoaded">
            <summary>Checks if the asset is currently loaded.</summary>
        </member>
        <member name="M:Weaver.Asset`1.op_Implicit(Weaver.Asset{`0})~`0">
            <summary>Returns the <see cref="P:Weaver.Asset`1.Target"/> asset.</summary>
        </member>
        <member name="P:Weaver.Asset`1.Icon">
            <summary>[Editor-Only] Used as an alternate icon by <see cref="T:Weaver.AssetReferenceAttribute"/>.</summary>
        </member>
        <member name="M:Weaver.Asset`1.Instantiate(UnityEngine.Transform,System.Boolean)">
            <summary>
            Clones the specified asset and returns the clone.
            Uses <see cref="M:UnityEngine.Object.Instantiate(UnityEngine.Object,UnityEngine.Transform,System.Boolean)"/>.
            In the Unity Editor, it uses PrefabUtility.InstantiatePrefab instead.
            </summary>
        </member>
        <member name="M:Weaver.Asset`1.Instantiate(UnityEngine.Transform)">
            <summary>
            Clones the specified asset and returns the clone.
            Uses <see cref="M:UnityEngine.Object.Instantiate(UnityEngine.Object,UnityEngine.Transform)"/>.
            In the Unity Editor, it uses PrefabUtility.InstantiatePrefab instead.
            </summary>
        </member>
        <member name="M:Weaver.Asset`1.Instantiate(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)">
            <summary>
            Clones the specified asset and returns the clone.
            Uses <see cref="M:UnityEngine.Object.Instantiate(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)"/>.
            In the Unity Editor, it uses PrefabUtility.InstantiatePrefab instead.
            </summary>
        </member>
        <member name="M:Weaver.Asset`1.Instantiate(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Clones the specified asset and returns the clone.
            Uses <see cref="M:UnityEngine.Object.Instantiate(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion)"/>.
            In the Unity Editor, it uses PrefabUtility.InstantiatePrefab instead.
            </summary>
        </member>
        <member name="T:Weaver.IOnCreate">
            <summary>
            Exposes a method to be called when a new instance is created by <see cref="M:Weaver.WeaverUtilities.EnsureExists``1(``0@)"/>.
            </summary>
        </member>
        <member name="M:Weaver.IOnCreate.OnCreate">
            <summary>
            Called when a new instance of the implementing type is created by <see cref="M:Weaver.WeaverUtilities.EnsureExists``1(``0@)"/>.
            </summary>
        </member>
        <member name="T:Weaver.IReferenceIndex">
            <summary>
            An object that references a particular index in another list.
            </summary>
        </member>
        <member name="P:Weaver.IReferenceIndex.ReferencedIndex">
            <summary>The index being referenced.</summary>
        </member>
        <member name="T:Weaver.MeshBuilder">
            <summary>
            Encapsulates lists of vertices, normals, etc. to simplify the procedural generation of meshes.
            <para></para>
            To use: simply add elements to the lists (<see cref="F:Weaver.MeshBuilder.Vertices"/>, <see cref="F:Weaver.MeshBuilder.Indices"/>, <see cref="F:Weaver.MeshBuilder.UVs"/>,
            etc.) then call any of the Compile() overloads. You can also implicitly cast a <see cref="T:Weaver.MeshBuilder"/> to a
            <see cref="T:UnityEngine.Mesh"/>.
            <para></para>
            You can efficiently reuse a <see cref="T:Weaver.MeshBuilder"/> by calling <see cref="M:Weaver.MeshBuilder.Clear"/>.
            </summary>
        </member>
        <member name="P:Weaver.MeshBuilder.Topology">
            <summary>The <see cref="T:UnityEngine.MeshTopology"/> with which the <see cref="T:UnityEngine.Mesh"/> will be compiled.</summary>
        </member>
        <member name="F:Weaver.MeshBuilder.Vertices">
            <summary>The vertex positions which will be used for <see cref="P:UnityEngine.Mesh.vertices"/>.</summary>
        </member>
        <member name="F:Weaver.MeshBuilder.Normals">
            <summary>The vertex normals which will be used for <see cref="P:UnityEngine.Mesh.normals"/>.</summary>
        </member>
        <member name="F:Weaver.MeshBuilder.UVs">
            <summary>The UV coordinates which will be used for <see cref="P:UnityEngine.Mesh.uv"/>.</summary>
        </member>
        <member name="F:Weaver.MeshBuilder.UVs2">
            <summary>The UV coordinates which will be used for <see cref="P:UnityEngine.Mesh.uv2"/>.</summary>
        </member>
        <member name="F:Weaver.MeshBuilder.UVs3">
            <summary>The UV coordinates which will be used for <see cref="P:UnityEngine.Mesh.uv3"/>.</summary>
        </member>
        <member name="F:Weaver.MeshBuilder.UVs4">
            <summary>The UV coordinates which will be used for <see cref="P:UnityEngine.Mesh.uv4"/>.</summary>
        </member>
        <member name="F:Weaver.MeshBuilder.Tangents">
            <summary>The vertex tangents which will be used for <see cref="P:UnityEngine.Mesh.tangents"/>.</summary>
        </member>
        <member name="F:Weaver.MeshBuilder.Colors">
            <summary>The vertex colors which will be used for <see cref="P:UnityEngine.Mesh.colors"/>.</summary>
        </member>
        <member name="F:Weaver.MeshBuilder.Indices">
            <summary>The mesh indices which will be used for <see cref="P:UnityEngine.Mesh.triangles"/> (though the topology isn't necessarily triangles).</summary>
        </member>
        <member name="P:Weaver.MeshBuilder.Indices0">
            <summary>The indices of the first sub-mesh.</summary>
        </member>
        <member name="P:Weaver.MeshBuilder.VertexCount">
            <summary>The number of vertices which have currently been built.</summary>
        </member>
        <member name="P:Weaver.MeshBuilder.IndexCount0">
            <summary>The number of indices which have currently been built in the first sub mesh.</summary>
        </member>
        <member name="P:Weaver.MeshBuilder.SubMeshCount">
            <summary>The number of sub meshes.</summary>
        </member>
        <member name="M:Weaver.MeshBuilder.#ctor(UnityEngine.MeshTopology)">
            <summary>Constructs a mesh builder with UVs and Normals using the specified `topology`.</summary>
        </member>
        <member name="M:Weaver.MeshBuilder.#ctor(System.Int32,System.Int32)">
            <summary>Constructs a mesh builder with UVs and Normals using <see cref="F:UnityEngine.MeshTopology.Triangles"/>.</summary>
        </member>
        <member name="M:Weaver.MeshBuilder.#ctor(System.Int32,System.Int32[])">
            <summary>Constructs a mesh builder with UVs and Normals using <see cref="F:UnityEngine.MeshTopology.Triangles"/>.</summary>
        </member>
        <member name="M:Weaver.MeshBuilder.#ctor(Weaver.MeshBuilder.MeshChannel,UnityEngine.MeshTopology)">
            <summary>Constructs a mesh builder with a specific set of data channels and topology.</summary>
        </member>
        <member name="M:Weaver.MeshBuilder.#ctor(Weaver.MeshBuilder.MeshChannel,UnityEngine.MeshTopology,System.Int32,System.Int32[])">
            <summary>Constructs a mesh builder with a specific set of data channels and topology.</summary>
        </member>
        <member name="T:Weaver.MeshBuilder.MeshChannel">
            <summary>
            Flags for each of the optional channels a <see cref="T:UnityEngine.Mesh"/> can contain.
            </summary>
        </member>
        <member name="F:Weaver.MeshBuilder.MeshChannel.UVs">
            <summary>First set of UV coordinates.</summary>
        </member>
        <member name="F:Weaver.MeshBuilder.MeshChannel.UVs2">
            <summary>Second set of UV coordinates.</summary>
        </member>
        <member name="F:Weaver.MeshBuilder.MeshChannel.UVs3">
            <summary>Third set of UV coordinates.</summary>
        </member>
        <member name="F:Weaver.MeshBuilder.MeshChannel.UVs4">
            <summary>Fourth set of UV coordinates.</summary>
        </member>
        <member name="F:Weaver.MeshBuilder.MeshChannel.Normals">
            <summary>Vertex normals.</summary>
        </member>
        <member name="F:Weaver.MeshBuilder.MeshChannel.Tangents">
            <summary>Vertex tangents.</summary>
        </member>
        <member name="F:Weaver.MeshBuilder.MeshChannel.Colors">
            <summary>Vertex colors.</summary>
        </member>
        <member name="F:Weaver.MeshBuilder.MeshChannel.Default">
            <summary>The default channels.</summary>
        </member>
        <member name="F:Weaver.MeshBuilder.MeshChannel.All">
            <summary>All optional channels.</summary>
        </member>
        <member name="M:Weaver.MeshBuilder.Clear">
            <summary>Clears this <see cref="T:Weaver.MeshBuilder"/> to be ready for reuse.</summary>
        </member>
        <member name="M:Weaver.MeshBuilder.IndexTriangle(System.Int32)">
            <summary>
            Adds indices for a triangle starting at the current vertex count: [+0][+1][+2].
            <para></para>You will generally want to call this method before adding the associated vertices.
            </summary>
        </member>
        <member name="M:Weaver.MeshBuilder.Index2Triangles(System.Int32)">
            <summary>
            Adds indices for 2 triangles starting at the current vertex count: [+0][+1][+2] and [+0][+2][+3].
            <para></para>You will generally want to call this method before adding the associated vertices.
            </summary>
        </member>
        <member name="M:Weaver.MeshBuilder.Index3Triangles(System.Int32)">
            <summary>
            Adds indices for 3 triangles in a fan starting at the current vertex count: [+0][+1][+2] and [+0][+2][+3] and [+0][+3][+4].
            <para></para>You will generally want to call this method before adding the associated vertices.
            </summary>
        </member>
        <member name="M:Weaver.MeshBuilder.IndexTriangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Adds the specified indices to the specified sub mesh.</summary>
        </member>
        <member name="M:Weaver.MeshBuilder.Index2Triangles(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Adds the specified indices to the specified sub mesh.</summary>
        </member>
        <member name="M:Weaver.MeshBuilder.Index3Triangles(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Adds the specified indices to the specified sub mesh.</summary>
        </member>
        <member name="M:Weaver.MeshBuilder.IndexLine(System.Int32)">
            <summary>
            Adds a pair of indices for a line starting at the current vertex count: [+0][+1].
            <para></para>You will generally want to call this method before adding the associated vertices.
            </summary>
        </member>
        <member name="M:Weaver.MeshBuilder.FillIncrementalIndices(System.Int32)">
            <summary>
            Fills all the indices for the specified sub mesh such that 'Indices[subMesh][i] == i' up to the capacity
            of that sub mesh.
            </summary>
        </member>
        <member name="M:Weaver.MeshBuilder.Compile(UnityEngine.Mesh)">
            <summary>
            Assigns the data from this <see cref="T:Weaver.MeshBuilder"/> to `mesh`.
            </summary>
        </member>
        <member name="M:Weaver.MeshBuilder.Compile(UnityEngine.Mesh@)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Mesh"/> if it is null and assigns the data from this <see cref="T:Weaver.MeshBuilder"/> to it.
            </summary>
        </member>
        <member name="M:Weaver.MeshBuilder.Compile(System.String)">
            <summary>
            Assigns the data from this <see cref="T:Weaver.MeshBuilder"/> to a new <see cref="T:UnityEngine.Mesh"/>.
            </summary>
        </member>
        <member name="M:Weaver.MeshBuilder.Compile(UnityEngine.MeshFilter)">
            <summary>
            Assigns the data from this <see cref="T:Weaver.MeshBuilder"/> to `meshFilter.mesh`.
            </summary>
        </member>
        <member name="M:Weaver.MeshBuilder.Compile(UnityEngine.MeshCollider)">
            <summary>
            Assigns the data from this <see cref="T:Weaver.MeshBuilder"/> to `meshCollider.mesh`.
            </summary>
        </member>
        <member name="M:Weaver.MeshBuilder.op_Implicit(Weaver.MeshBuilder)~UnityEngine.Mesh">
            <summary>Implicit conversion calls <see cref="M:Weaver.MeshBuilder.Compile(System.String)"/> and <see cref="M:UnityEngine.Mesh.RecalculateBounds"/>.</summary>
        </member>
        <member name="M:Weaver.MeshBuilder.LogData(System.String)">
            <summary>
            Logs all the mesh data in this <see cref="T:Weaver.MeshBuilder"/>. Also puts the message in the system copy buffer
            so you can paste it into a text editor because Unity's console truncates messages that are too long.
            </summary>
        </member>
        <member name="T:Weaver.MeshUtilities">
            <summary>Various utility methods for using the <see cref="T:Weaver.MeshBuilder"/> class.</summary>
        </member>
        <member name="M:Weaver.MeshUtilities.TranslateVertices(Weaver.MeshBuilder,UnityEngine.Vector3,System.Int32,System.Int32)">
            <summary>
            Adds the specified translation to all vertices in the specified range.
            </summary>
        </member>
        <member name="M:Weaver.MeshUtilities.TranslateVertices(Weaver.MeshBuilder,UnityEngine.Vector3,System.Int32)">
            <summary>
            Adds the specified translation to all vertices from the specified start index up to the current vertex count.
            </summary>
        </member>
        <member name="M:Weaver.MeshUtilities.TranslateVertices(Weaver.MeshBuilder,UnityEngine.Vector3)">
            <summary>
            Adds the specified translation to all vertices up to the current vertex count.
            </summary>
        </member>
        <member name="M:Weaver.MeshUtilities.RotateVertices(Weaver.MeshBuilder,UnityEngine.Quaternion)">
            <summary>
            Multiplies all vertices and normaly by `rotation`.
            </summary>
        </member>
        <member name="M:Weaver.MeshUtilities.ScaleVertices(Weaver.MeshBuilder,System.Single)">
            <summary>
            Multiplies all vertices by `scale`.
            </summary>
        </member>
        <member name="M:Weaver.MeshUtilities.DuplicateVertex(Weaver.MeshBuilder,System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector2)">
            <summary>
            Adds a new vertex with its position at 'builder.Vertices[vertex] + offset' and the specified `normal` and `uv` values.
            </summary>
        </member>
        <member name="M:Weaver.MeshUtilities.DuplicateVertex(Weaver.MeshBuilder,System.Int32,UnityEngine.Vector3,UnityEngine.Vector2)">
            <summary>
            Adds a new vertex with its position at `builder.Vertices[vertex]` and the specified `normal` and `uv` values.
            </summary>
        </member>
        <member name="M:Weaver.MeshUtilities.DuplicateVertex(Weaver.MeshBuilder,System.Int32,UnityEngine.Vector3)">
            <summary>
            Adds a new vertex with its position at `builder.Vertices[vertex]` and the specified `normal` value.
            </summary>
        </member>
        <member name="M:Weaver.MeshUtilities.PlaceQuadVertices(System.Collections.Generic.List{UnityEngine.Vector3},UnityEngine.Vector3,UnityEngine.Vector2)">
            <summary>
            Adds 4 vertices to form a quad.
            </summary>
        </member>
        <member name="M:Weaver.MeshUtilities.PlaceQuadUVs(System.Collections.Generic.List{UnityEngine.Vector2},UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Adds 4 UV values to planar map a quad.
            </summary>
        </member>
        <member name="M:Weaver.MeshUtilities.ShapeEquilateralPolygonXY(Weaver.MeshBuilder,System.Int32,UnityEngine.Vector3,System.Int32,System.Single,UnityEngine.Rect)">
            <summary>
            Adds indices, vertices, normals, and UVs for a polygon on the XY plane with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.MeshUtilities.ShapeEquilateralPolygonXY(Weaver.MeshBuilder,System.Int32,UnityEngine.Vector3,System.Int32,System.Single)">
            <summary>
            Adds indices, vertices, normals, and UVs for a polygon on the XY plane with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.MeshUtilities.ExtrudePolygon(Weaver.MeshBuilder,System.Int32,System.Int32,System.Int32,UnityEngine.Vector3)">
            <summary>
            Duplicates the vertex data of a polygon with the vertices offset by `extrusion` and adds indices to join
            them as faces to the original vertices.
            </summary>
        </member>
        <member name="M:Weaver.MeshUtilities.BuildRingXY(Weaver.MeshBuilder,System.Int32,System.Single,System.Single)">
            <summary>
            Adds indices, vertices, and normals to form a ring on the XY plane with the specified parameters.
            </summary>
        </member>
        <member name="M:Weaver.MeshUtilities.PlanarMapXY(Weaver.MeshBuilder,System.Int32,System.Int32,UnityEngine.Rect,UnityEngine.Rect)">
            <summary>
            Planar maps the UV values for a range of vertices into the `uvArea` based on their XY positions relative to `vertexArea`.
            </summary>
        </member>
        <member name="M:Weaver.MeshUtilities.PlanarMapXY(Weaver.MeshBuilder)">
            <summary>
            Planar maps the UV values for all vertices using their XY positions.
            </summary>
        </member>
        <member name="M:Weaver.MeshUtilities.SetCount``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Adds members to the list (or removes them) until the count reaches the specified value.
            </summary>
        </member>
        <member name="M:Weaver.MeshUtilities.VectorXYFromAngle(System.Single,System.Single,System.Single)">
            <summary>Generates a vector with the specified z value and length in the specified direction on the XY axis.</summary>
        </member>
        <member name="M:Weaver.MeshUtilities.GetUVs(Weaver.MeshBuilder,System.Int32)">
            <param name="builder">The <see cref="T:Weaver.MeshBuilder"/> to get the UV channel from.</param>
            <param name="channel">The channel number (must be 1, 2, 3, or 4).</param>
        </member>
        <member name="M:Weaver.MeshUtilities.CalculateNormals(Weaver.MeshBuilder,System.Int32,System.Int32,System.Int32)">
            <summary>
            Doesn't take into account vertices that are shared by multiple triangles.
            Only the last triangle to include each vertex will determine its normal.
            </summary>
        </member>
        <member name="T:Weaver.IPoolable">
            <summary>
            An object with a callback method for when it is released to an <see cref="T:Weaver.ObjectPool`1"/>.
            </summary>
        </member>
        <member name="M:Weaver.IPoolable.OnRelease">
            <summary>
            Called by an <see cref="T:Weaver.ObjectPool`1"/> when releasing this item back to the pool.
            </summary>
        </member>
        <member name="T:Weaver.ObjectPool">
            <summary>
            Various utilities and extension methods for <see cref="T:Weaver.ObjectPool`1"/>.
            <para></para>
            More detailed instructons on how to use this class and those related to it can be found at
            https://kybernetik.com.au/weaver/docs/misc/object-pooling.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool.CreateDefaultPool``1(System.Int32)">
            <summary>
            Creates an <see cref="T:Weaver.ObjectPool`1"/> that creates new items using a the default constructor of
            <typeparamref name="T"/> and uses a <see cref="T:System.Collections.Generic.HashSet`1"/> to keep track of its
            <see cref="F:Weaver.ObjectPool`1.ActiveObjects"/>.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool.CreateDefaultPool``1(System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            Creates an <see cref="T:Weaver.ObjectPool`1"/> that creates new items using a parameterless constructor.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool.CreateComponentPool``1(``0,System.Int32,System.Boolean)">
            <summary>
            Creates an <see cref="T:Weaver.ObjectPool`1"/> that creates new items by instantiating a specified
            <see cref="T:UnityEngine.Component"/>. The objects will not be destroyed by scene loading.
            <para></para>
            In the Unity Editor the instantiated objects will be grouped under a common parent to keep the hierarchy
            view tidy, but this step is skipped in runtime builds for efficiency.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool.GetSharedComponentPool``1(``0,System.Int32,System.Boolean)">
            <summary>
            The first time this method is called for a particular `original` it will call
            <see cref="M:Weaver.ObjectPool.CreateComponentPool``1(``0,System.Int32,System.Boolean)"/> and cache the returned pool so that subsequent calls using the same
            `original` will return the same pool.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool.CreatePrefabPool(UnityEngine.GameObject,System.Int32,System.Boolean)">
            <summary>
            Creates an <see cref="T:Weaver.ObjectPool`1"/> that creates new items by instantiating a specified
            <see cref="T:UnityEngine.GameObject"/>. The objects will not be destroyed by scene loading.
            <para></para>
            In the Unity Editor the instantiated objects will be grouped under a common parent to keep the hierarchy
            view tidy, but this step is skipped in runtime builds for efficiency.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool.GetSharedPrefabPool(UnityEngine.GameObject,System.Int32,System.Boolean)">
            <summary>
            The first time this method is called for a particular `original` it will call
            <see cref="M:Weaver.ObjectPool.CreatePrefabPool(UnityEngine.GameObject,System.Int32,System.Boolean)"/> and cache the returned pool so that subsequent calls using the same
            `original` will return the same pool.
            </summary>
        </member>
        <member name="T:Weaver.ObjectPool.SharedPools`1">
            <summary>
            A static dictionary which maps an original <see cref="T:UnityEngine.Object"/> such as a prefab to an
            <see cref="T:Weaver.ObjectPool`1"/> that creates new items by instantiating the original.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool.GetFunctionToInstantiateComponent``1(``0)">
            <summary>
            Creates a delegate that instantiates an inactive copy of the `original` object and calls
            <see cref="M:UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object)"/> on it.
            <para></para>
            In the Unity Editor the copies are also grouped under a parent object to keep the hierarchy view clean.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool.GetFunctionToInstantiatePrefab(UnityEngine.GameObject)">
            <summary>
            Creates a delegate that instantiates an inactive copy of the `original` object and calls
            <see cref="M:UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object)"/> on it.
            <para></para>
            In the Unity Editor the copies are also grouped under a parent object to keep the hierarchy view clean.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool.GetCurrentPool``1">
            <summary>
            Returns the pool currently creating a new item, or null at all other times.
            This allows the created item's constructor to determine which pool it came from (if any).
            <para></para>
            Also registers the <see cref="M:Weaver.IPoolable.OnRelease"/> of <typeparamref name="T"/> as the
            <see cref="P:Weaver.ObjectPool`1.OnRelease"/> callback if nothing was previously registered.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool.TryRelease``1(Weaver.ObjectPool{``0},``0)">
            <summary>
            If the `pool` isn't null this method gives the `item` to it and returns true.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool.TryReleaseOrDestroy``1(Weaver.ObjectPool{``0},``0)">
            <summary>
            If the `pool` isn't null this method gives the `item` to it and returns true.
            Otherwise this method destroys it and returns false.
            <para></para>
            Note that this method is likely not what you want to use for <see cref="T:UnityEngine.Component"/>s.
            Use <see cref="M:Weaver.ObjectPool.TryReleaseOrDestroyGameObject``1(Weaver.ObjectPool{``0},``0)"/> instead.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool.TryReleaseOrDestroyGameObject``1(Weaver.ObjectPool{``0},``0)">
            <summary>
            If the `pool` isn't null this method releases the `component` to it, disables its <see cref="T:UnityEngine.GameObject"/>,
            and returns true. Otherwise this method destroys the <see cref="T:UnityEngine.GameObject"/> and returns false.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool.TryReleaseOrDestroyGameObject``1(``0)">
            <summary>
            If the `behaviour` was created by an <see cref="T:Weaver.ObjectPool`1"/> this method releases the `behaviour` to
            it, disables its <see cref="T:UnityEngine.GameObject"/>, and returns true.
            Otherwise this method destroys the <see cref="T:UnityEngine.GameObject"/> and returns false.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool.TryReleaseOrDestroyGameObject(Weaver.ObjectPool{UnityEngine.GameObject},UnityEngine.GameObject)">
            <summary>
            If the `pool` isn't null this method gives the `component` to it, disables its <see cref="T:UnityEngine.GameObject"/>,
            and returns true. Otherwise this method destroys the <see cref="T:UnityEngine.GameObject"/> and returns false.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool.ReleaseAllOnSceneUnload``1(Weaver.ObjectPool{``0})">
            <summary>
            Registers a <see cref="E:UnityEngine.SceneManagement.SceneManager.sceneUnloaded"/> callback to call <see cref="M:Weaver.ObjectPool`1.ReleaseAll"/>.
            <para></para>
            The returned delegate can be stored to later unregister from the event if necessary.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool.DestroyExcess``1(Weaver.ObjectPool{``0},System.Int32)">
            <summary>
            Removes and destroys items from the pool until the <see cref="P:System.Collections.Generic.List`1.Count"/> reaches the
            `remainingSize`.
            </summary>
        </member>
        <member name="T:Weaver.ObjectPool`1">
            <summary>
            A collection of objects that can create new items as necessary.
            Get an object from the pool with <see cref="M:Weaver.ObjectPool`1.Acquire"/>.
            Return it to the pool with <see cref="M:Weaver.ObjectPool`1.Release(`0)"/>.
            <para></para>
            The non-generic <see cref="T:Weaver.ObjectPool"/> class contains some useful methods of creating commonly used pools.
            <para></para>
            More detailed instructons on how to use this class and those related to it can be found at
            https://kybernetik.com.au/weaver/docs/misc/object-pooling.
            </summary>
        </member>
        <member name="P:Weaver.ObjectPool`1.Current">
            <summary>
            Returns the pool currently creating a new item, or null at all other times.
            This allows the created item's constructor to determine which pool it came from (if any).
            <para></para>
            If <typeparamref name="T"/> implements <see cref="T:Weaver.IPoolable"/> you should use
            <see cref="M:Weaver.ObjectPool.GetCurrentPool``1"/> instead.
            </summary>
        </member>
        <member name="F:Weaver.ObjectPool`1.InactiveObjects">
            <summary>The objects currently in the pool waiting to be reused.</summary>
            <remarks>Not a Stack because it would create an unnecessary dependancy on System.dll.</remarks>
        </member>
        <member name="F:Weaver.ObjectPool`1.ActiveObjects">
            <summary>
            The objects currently in use. May be null if this pool doesn't track objects acquired from it.
            This will be a <see cref="T:System.Collections.Generic.HashSet`1"/> unless a different collection was provided in the constructor.
            </summary>
        </member>
        <member name="F:Weaver.ObjectPool`1.CreateItem">
            <summary>The factory delegate which is used to create new items if there are none in the pool.</summary>
        </member>
        <member name="P:Weaver.ObjectPool`1.OnRelease">
            <summary>An optional callback which is triggered by <see cref="M:Weaver.ObjectPool`1.Release(`0)"/>.</summary>
        </member>
        <member name="M:Weaver.ObjectPool`1.#ctor(System.Collections.Generic.ICollection{`0},System.Func{`0},System.Int32)">
            <summary>
            Creates a new <see cref="T:Weaver.ObjectPool`1"/> which uses the `createItem` function to create new objects
            when the pool is empty. The pool immediately creates a number of items specified by `preAllocate`.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool`1.#ctor(System.Func{`0},System.Int32)">
            <summary>
            Creates a new <see cref="T:Weaver.ObjectPool`1"/> which uses the `createItem` function to create new objects
            when the pool is empty. The pool immediately creates a number of items specified by `preAllocate`.
            </summary>
        </member>
        <member name="P:Weaver.ObjectPool`1.InactiveCount">
            <summary>
            The number of items in the <see cref="F:Weaver.ObjectPool`1.InactiveObjects"/> list.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool`1.SetMinCount(System.Int32)">
            <summary>
            Creates new items in the pool until the number of <see cref="F:Weaver.ObjectPool`1.InactiveObjects"/> reaches the specified `count`.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool`1.Acquire">
            <summary>
            Returns an available item, either by removing it from the <see cref="F:Weaver.ObjectPool`1.InactiveObjects"/> list if it contains
            any or by creating a new one. Also adds that item to the <see cref="F:Weaver.ObjectPool`1.ActiveObjects"/> collection.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool`1.Release(`0)">
            <summary>
            Puts an item back into the pool to be available for future use.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool`1.Release(`0@)">
            <summary>
            Puts an item back into the pool to be available for future use.
            Also sets the item to to avoid accidental use afterwards.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool`1.ReleaseRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Puts a collection of items back into the pool to be available for future use.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool`1.ReleaseAll">
            <summary>
            Releases all elements of this list back to the pool and clears it.
            <para></para>
            Throws a <see cref="T:System.NullReferenceException"/> if <see cref="F:Weaver.ObjectPool`1.ActiveObjects"/> is null.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool`1.AssertNotAlreadyReleased(`0)">
            <summary>[Editor-Conditional]
            Logs an error if the `item` is already the last object added to the <see cref="F:Weaver.ObjectPool`1.InactiveObjects"/> list.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool`1.ToString">
            <summary>
            Returns a string describing the contents of this pool.
            </summary>
        </member>
        <member name="M:Weaver.ObjectPool`1.DoInspectorGUI">
            <summary>[Editor-Only] Draws the details of this pool in the GUI.</summary>
        </member>
        <member name="T:Weaver.PoolableBehaviour`1">
            <summary>
            A <see cref="T:UnityEngine.MonoBehaviour"/> component which automatically detects the <see cref="T:Weaver.ObjectPool`1"/> that
            created it so it can be released back to that pool (or simply destroyed if it wasn't created by a pool) using
            the <see cref="M:Weaver.ObjectPool.TryReleaseOrDestroyGameObject``1(``0)"/> extension method.
            <para></para>
            When inheriting from this class, <typeparamref name="T"/> should always be the child class itself, I.E.
            <c>class ChildClass : PoolableBehaviour&lt;ChildClass&gt;</c>
            <para></para>
            <a href="https://kybernetik.com.au/weaver/docs/misc/object-pooling">More detailed instructons on how to use
            this class and those related to it can be found in the documentation</a>.
            </summary>
        </member>
        <member name="F:Weaver.PoolableBehaviour`1.Pool">
            <summary>The pool that created this object (or null if not created by a pool).</summary>
        </member>
        <member name="M:Weaver.PoolableBehaviour`1.OnRelease">
            <summary>
            Called by the <see cref="F:Weaver.PoolableBehaviour`1.Pool"/> when releasing this component to it.
            Asserts that the <see cref="P:UnityEngine.Component.gameObject"/> was active and deactivates it (unless overridden).
            </summary>
        </member>
        <member name="M:Weaver.PoolableBehaviour`1.AfterInspectorGUI">
            <summary>[Editor-Only] Inspector Gadgets GUI event.</summary>
        </member>
        <member name="T:Weaver.PooledList`1">
            <summary>
            A <see cref="T:System.Collections.Generic.List`1"/> of active objects backed by an <see cref="T:Weaver.ObjectPool`1"/> of inactive objects ready to
            be reused.
            <para></para>
            More detailed instructons on how to use this class and those related to it can be found at
            https://kybernetik.com.au/weaver/docs/misc/object-pooling.
            </summary>
        </member>
        <member name="F:Weaver.PooledList`1.ActiveObjects">
            <summary>The objects currently in use.</summary>
        </member>
        <member name="M:Weaver.PooledList`1.#ctor(System.Func{`0},System.Int32)">
            <summary>
            Creates a new <see cref="T:Weaver.PooledList`1"/> which will create new items as necessary using the
            `createItem` delegate.
            </summary>
        </member>
        <member name="M:Weaver.PooledList`1.ReleaseAt(System.Int32)">
            <summary>
            Puts an item back into the pool to be available for future use.
            </summary>
        </member>
        <member name="M:Weaver.PooledList`1.ReleaseRange(System.Int32,System.Int32)">
            <summary>
            Puts a range of items back into the pool to be available for future use.
            </summary>
        </member>
        <member name="T:Weaver.PooledList">
            <summary>
            Various utilities and extension methods for <see cref="T:Weaver.PooledList`1"/>.
            <para></para>
            More detailed instructons on how to use this class and those related to it can be found at
            https://kybernetik.com.au/weaver/docs/misc/object-pooling.
            </summary>
        </member>
        <member name="M:Weaver.PooledList.CreateDefaultPool``1(System.Int32)">
            <summary>
            Returns a <see cref="T:Weaver.PooledList`1"/> that creates new items using a parameterless constructor.
            </summary>
        </member>
        <member name="M:Weaver.PooledList.CreateComponentPool``1(``0,System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:Weaver.PooledList`1"/> that creates new items by instantiating a specified
            <see cref="T:UnityEngine.Component"/>. The objects will not be destroyed by scene loading.
            <para></para>
            In the Unity Editor the instantiated objects will be grouped under a common parent to keep the hierarchy
            view tidy, but this step is skipped in runtime builds for efficiency.
            </summary>
        </member>
        <member name="M:Weaver.PooledList.GetSharedComponentPool``1(``0,System.Int32,System.Boolean)">
            <summary>
            The first time this method is called for a particular `original` it will call
            <see cref="M:Weaver.PooledList.CreateComponentPool``1(``0,System.Int32,System.Boolean)"/> and cache the returned pool so that subsequent calls using the same
            `original` will return the same pool.
            </summary>
        </member>
        <member name="M:Weaver.PooledList.CreatePrefabPool(UnityEngine.GameObject,System.Int32,System.Boolean)">
            <summary>
            Creates an <see cref="T:Weaver.PooledList`1"/> that creates new items by instantiating a specified
            <see cref="T:UnityEngine.GameObject"/>. The objects will not be destroyed by scene loading.
            <para></para>
            In the Unity Editor the instantiated objects will be grouped under a common parent to keep the hierarchy
            view tidy, but this step is skipped in runtime builds for efficiency.
            </summary>
        </member>
        <member name="M:Weaver.PooledList.GetSharedPrefabPool(UnityEngine.GameObject,System.Int32,System.Boolean)">
            <summary>
            The first time this method is called for a particular `original` it will call
            <see cref="M:Weaver.PooledList.CreatePrefabPool(UnityEngine.GameObject,System.Int32,System.Boolean)"/> and cache the returned pool so that subsequent calls using the same
            `original` will return the same pool.
            </summary>
        </member>
        <member name="T:Weaver.PooledList.SharedPools`1">
            <summary>
            A static dictionary which maps an original <see cref="T:UnityEngine.Object"/> such as a prefab to a
            <see cref="T:Weaver.PooledList`1"/> that creates new items by instantiating the original.
            </summary>
        </member>
        <member name="T:Weaver.OptionalBool">
            <summary>A trinary logic value: true, false, or unspecified.</summary>
        </member>
        <member name="F:Weaver.OptionalBool.Unspecified">
            <summary>Use the default setting.</summary>
        </member>
        <member name="F:Weaver.OptionalBool.True">
            <summary>True, regardless of the default setting.</summary>
        </member>
        <member name="F:Weaver.OptionalBool.False">
            <summary>False, regardless of the default setting.</summary>
        </member>
        <member name="T:Weaver.Substring">
            <summary>
            Encapsulates a string to treat it as a variable substring without the memory allocation and garbage collection
            costs of <see cref="M:System.String.Substring(System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="F:Weaver.Substring.rawString">
            <summary>The original encapsulated string.</summary>
        </member>
        <member name="F:Weaver.Substring.startIndex">
            <summary>The character index in the <see cref="F:Weaver.Substring.rawString"/> of the start of this substring.</summary>
        </member>
        <member name="F:Weaver.Substring.endIndex">
            <summary>The character index in the <see cref="F:Weaver.Substring.rawString"/> of the character immediately after the end of this substring.</summary>
        </member>
        <member name="P:Weaver.Substring.Length">
            <summary>The number of characters in the current substring.</summary>
        </member>
        <member name="P:Weaver.Substring.IsValid">
            <summary>Returns true if the <see cref="F:Weaver.Substring.startIndex"/> and <see cref="F:Weaver.Substring.endIndex"/> denote a valid substring within the <see cref="F:Weaver.Substring.rawString"/>.</summary>
        </member>
        <member name="P:Weaver.Substring.IsAtEnd">
            <summary>Returns true if the end index is at or past the end of the <see cref="F:Weaver.Substring.rawString"/>.</summary>
        </member>
        <member name="P:Weaver.Substring.Item(System.Int32)">
            <summary>Returns <see cref="F:Weaver.Substring.rawString"/>[<see cref="F:Weaver.Substring.startIndex"/> + i]</summary>
        </member>
        <member name="M:Weaver.Substring.#ctor">
            <summary>Creates a new <see cref="T:Weaver.Substring"/> without assigning the encapsulated string or indices.</summary>
        </member>
        <member name="M:Weaver.Substring.#ctor(System.String)">
            <summary>Creates a new <see cref="T:Weaver.Substring"/> with the <see cref="F:Weaver.Substring.startIndex"/> at 0 and the <see cref="F:Weaver.Substring.endIndex"/> equal to rawString.Length.</summary>
        </member>
        <member name="M:Weaver.Substring.#ctor(System.String,System.Int32)">
            <summary>Creates a new <see cref="T:Weaver.Substring"/> with the specified <see cref="F:Weaver.Substring.startIndex"/> and the <see cref="F:Weaver.Substring.endIndex"/> equal to rawString.Length.</summary>
        </member>
        <member name="M:Weaver.Substring.#ctor(System.String,System.Int32,System.Int32)">
            <summary>Creates a new <see cref="T:Weaver.Substring"/> with the specified parameters.</summary>
        </member>
        <member name="M:Weaver.Substring.#ctor(Weaver.Substring)">
            <summary>Creates a new <see cref="T:Weaver.Substring"/> as a copy of the specified `original`.</summary>
        </member>
        <member name="M:Weaver.Substring.Set(System.String)">
            <summary>Assigns the specified <see cref="F:Weaver.Substring.rawString"/>, sets the <see cref="F:Weaver.Substring.startIndex"/> to 0, and the <see cref="F:Weaver.Substring.endIndex"/> equal to rawString.Length.</summary>
        </member>
        <member name="M:Weaver.Substring.Set(System.String,System.Int32)">
            <summary>Assigns the specified <see cref="F:Weaver.Substring.rawString"/>, sets the specified <see cref="F:Weaver.Substring.startIndex"/>, and the <see cref="F:Weaver.Substring.endIndex"/> equal to rawString.Length.</summary>
        </member>
        <member name="M:Weaver.Substring.Set(System.String,System.Int32,System.Int32)">
            <summary>Assigns the specified parameters to this <see cref="T:Weaver.Substring"/>.</summary>
        </member>
        <member name="M:Weaver.Substring.StartsWith(System.String,System.Int32,System.Int32)">
            <summary>
            The parameters denote a substring within the `fullString`.
            This method returns true if this <see cref="T:Weaver.Substring"/> starts with the same characters contained in that substring.
            </summary>
        </member>
        <member name="M:Weaver.Substring.StartsWith(Weaver.Substring)">
            <summary>
            Returns true if this <see cref="T:Weaver.Substring"/> starts with the characters in `other`.
            </summary>
        </member>
        <member name="M:Weaver.Substring.StartsWith(System.String)">
            <summary>
            Returns true if this <see cref="T:Weaver.Substring"/> starts with the characters in `fullString`.
            </summary>
        </member>
        <member name="M:Weaver.Substring.IndexOf(System.Char,System.Int32)">
            <summary>
            Returns the first index of the specified `value` within this substring, or -1 if it isn't found.
            <para></para>
            The returned value is relative to the start of the <see cref="F:Weaver.Substring.rawString"/>.
            </summary>
        </member>
        <member name="M:Weaver.Substring.IndexOfAny(System.Char[],System.Int32)">
            <summary>
            Returns the first index of any of the characters in `anyOf` within this substring, or -1 if none are found.
            <para></para>
            The returned value is relative to the start of the <see cref="F:Weaver.Substring.rawString"/>.
            </summary>
        </member>
        <member name="M:Weaver.Substring.LastIndexOf(System.Char)">
            <summary>
            Returns the last index of the specified `value` within this substring, or -1 if it isn't found.
            <para></para>
            The returned value is relative to the start of the <see cref="F:Weaver.Substring.rawString"/>.
            </summary>
        </member>
        <member name="M:Weaver.Substring.LastIndexOfAny(System.Char[])">
            <summary>
            Returns the last index of any of the characters in `anyOf` within this substring, or -1 if none are found.
            <para></para>
            The returned value is relative to the start of the <see cref="F:Weaver.Substring.rawString"/>.
            </summary>
        </member>
        <member name="M:Weaver.Substring.CopyFrom(Weaver.Substring)">
            <summary>Copies the <see cref="F:Weaver.Substring.rawString"/>, <see cref="F:Weaver.Substring.startIndex"/>, and <see cref="F:Weaver.Substring.endIndex"/> from `other`.</summary>
        </member>
        <member name="M:Weaver.Substring.Equals(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Returns true if the specified substring within `a` contains the same characters as the specified substring within `b`.
            </summary>
        </member>
        <member name="M:Weaver.Substring.Equals(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Returns true if the specified substring within `a` contains the same characters as the specified substring within `b`.
            </summary>
        </member>
        <member name="M:Weaver.Substring.op_Equality(Weaver.Substring,Weaver.Substring)">
            <summary>
            Returns true if `a` and `b` contain the same characters.
            </summary>
        </member>
        <member name="M:Weaver.Substring.op_Inequality(Weaver.Substring,Weaver.Substring)">
            <summary>
            Returns true if `a` and `b` contain different characters.
            </summary>
        </member>
        <member name="M:Weaver.Substring.op_Equality(Weaver.Substring,System.String)">
            <summary>
            Returns true if `a` and `b` contain the same characters.
            </summary>
        </member>
        <member name="M:Weaver.Substring.op_Inequality(Weaver.Substring,System.String)">
            <summary>
            Returns true if `a` and `b` contain different characters.
            </summary>
        </member>
        <member name="M:Weaver.Substring.Equals(System.Object)">
            <summary>
            Returns true if `this` contains the same characters as `obj` (as a string or <see cref="T:Weaver.Substring"/>).
            </summary>
        </member>
        <member name="M:Weaver.Substring.GetHashCode">
            <summary>
            Returns the hash code of the current value of this <see cref="T:Weaver.Substring"/>.
            </summary>
        </member>
        <member name="M:Weaver.Substring.CompareTo(Weaver.Substring)">
            <summary>
            Compares the characters in `this` to `other`.
            </summary>
        </member>
        <member name="M:Weaver.Substring.op_Implicit(Weaver.Substring)~System.String">
            <summary>
            Returns a new string containing the current value of this <see cref="T:Weaver.Substring"/>.
            </summary>
        </member>
        <member name="M:Weaver.Substring.ToString">
            <summary>
            Returns a new string containing the current value of this <see cref="T:Weaver.Substring"/>.
            </summary>
        </member>
        <member name="M:Weaver.Substring.ToDetailedString">
            <summary>
            Returns a description of the current state of this <see cref="T:Weaver.Substring"/>.
            </summary>
        </member>
        <member name="M:Weaver.Substring.AppendTo(System.Text.StringBuilder)">
            <summary>
            Appends the characters of this <see cref="T:Weaver.Substring"/> to the specified `text`.
            <para></para>
            If this <see cref="T:Weaver.Substring"/> is currently invalid, it appends '\0' (the NUL char).
            </summary>
        </member>
        <member name="M:Weaver.Substring.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns a new <see cref="T:Weaver.Substring"/> encapsulating the file name within the specified `path`, without its file extension.
            </summary>
        </member>
        <member name="M:Weaver.Substring.RemoveFileExtension">
            <summary>
            Adjusts the <see cref="F:Weaver.Substring.endIndex"/> to remove the file extension from the end of this <see cref="T:Weaver.Substring"/> (if it has one).
            </summary>
        </member>
        <member name="M:Weaver.Substring.MoveToNextDirectory">
            <summary>
            Adjusts the <see cref="F:Weaver.Substring.startIndex"/> and <see cref="F:Weaver.Substring.endIndex"/> to encapsulate the name of the next directory within the <see cref="F:Weaver.Substring.rawString"/>.
            </summary>
        </member>
        <member name="T:Weaver.IDependant`1">
            <summary>
            Indicates that a type can depend on other objects.
            Used for topological sorting.
            </summary>
        </member>
        <member name="P:Weaver.IDependant`1.Dependancies">
            <summary>Everything that this object is dependant on. Return null if there are none.</summary>
        </member>
        <member name="T:Weaver.ReflectionUtilities">
            <summary>A variety of utility methods relating to reflection.</summary>
        </member>
        <member name="T:Weaver.ReflectionUtilities.Assemblies">
            <summary>A variety of utility methods relating to the currently loaded assemblies and iterating through them.</summary>
        </member>
        <member name="F:Weaver.ReflectionUtilities.Assemblies.All">
            <summary>A list of all currently loaded assemblies. Do not modify.</summary>
        </member>
        <member name="F:Weaver.ReflectionUtilities.Assemblies.UnityCSharpRuntime">
            <summary>[Editor-Only] A reference to the assembly in which Unity compiles your runtime scripts.</summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.Assemblies.LogAllDependants">
            <summary>
            Logs all currently loaded assemblies and any others which are dependant on them.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.Assemblies.GetTypes(System.Reflection.Assembly)">
            <summary>
            Returns an array of all types in the specified assembly.
            The array is cached to avoid garbage collection.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.Assemblies.ForEachType(System.Reflection.Assembly,System.Action{System.Type})">
            <summary>
            Calls the specified method once for each type in the specified assembly.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.Assemblies.ForEachDependantAssembly(System.Reflection.Assembly,System.Action{System.Reflection.Assembly})">
            <summary>
            Calls the specified method once for each loaded assembly that references the specified assembly (including itself).
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.Assemblies.ForEachTypeInDependantAssemblies(System.Reflection.Assembly,System.Action{System.Type})">
            <summary>
            Calls the specified `method` once for each type in each loaded assembly that references the specified `assembly`.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.Assemblies.ForEachTypeInDependantAssemblies(System.Action{System.Type})">
            <summary>
            Calls the specified `method` once for each type in each loaded assembly that references the assembly in
            which the `method` is declared.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.Assemblies.FindType(System.String,System.Boolean,System.Boolean)">
            <summary>
            Tries to find a type with the specified name in any currently loaded assembly.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.IsSubclassOfGenericDefinition(System.Type,System.Type,System.Type[]@)">
            <summary>Checks if `type` is descended from `generic` (where `generic` is a generic type definition).</summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.IsSubclassOfGenericDefinition(System.Type,System.Type)">
            <summary>Checks if `type` is descended from `generic` (where `generic` is a generic type definition).</summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.GetGenericInterfaceArguments(System.Type,System.Type)">
            <summary>
            If `type` implements the `interfaceType` this method returns the generic arguments it uses for that interface.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.IsObsolete(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>Checks if `target` has an [<see cref="T:System.ObsoleteAttribute"/>].</summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.HasImplicitCast(System.Type,System.Type)">
            <summary>
            Returns true if `from` can be implicitly cast to `to`.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.CanBeConst(System.Type)">
            <summary>
            All built-in types except <see cref="T:System.Object"/> can be const.
            </summary>
        </member>
        <member name="F:Weaver.ReflectionUtilities.AnyAccessBindings">
            <summary><see cref="T:System.Reflection.BindingFlags"/> for any access modifiers.</summary>
        </member>
        <member name="F:Weaver.ReflectionUtilities.InstanceBindings">
            <summary><see cref="T:System.Reflection.BindingFlags"/> for instance access modifiers.</summary>
        </member>
        <member name="F:Weaver.ReflectionUtilities.StaticBindings">
            <summary><see cref="T:System.Reflection.BindingFlags"/> for static access modifiers.</summary>
        </member>
        <member name="F:Weaver.ReflectionUtilities.PublicStaticBindings">
            <summary><see cref="T:System.Reflection.BindingFlags"/> for public and static.</summary>
        </member>
        <member name="F:Weaver.ReflectionUtilities.PublicInstanceBindings">
            <summary><see cref="T:System.Reflection.BindingFlags"/> for public and instance.</summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.HasFlags(System.Reflection.BindingFlags,System.Reflection.BindingFlags)">
            <summary>Checks if `bindings` contains all the flags in `flags`.</summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.ForEachType(System.Action{System.Type})">
            <summary>
            Calls the specified method once for each type in every currently loaded assembly.
            <para></para>
            Most situations where you want to do something for each type are in reference to something specific.
            For example: when searching for every type with a certain attribute, you only need to look in assemblies
            that reference the assembly containing the attribute so you should instead use
            <see cref="T:Weaver.ReflectionUtilities"/>.<see cref="M:Weaver.ReflectionUtilities.Assemblies.ForEachTypeInDependantAssemblies(System.Reflection.Assembly,System.Action{System.Type})"/>.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Gets a single custom attribute of type T and casts it.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.ForEachCustomAttribute``1(System.Reflection.ICustomAttributeProvider,System.Action{``0},System.Boolean)">
            <summary>
            Calls `method` once for each attribute of the specified type on `target`.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.GetDerivedTypes(System.Type,System.Boolean)">
            <summary>
            Gets all non-abstract types in the currently loaded assemblies which derive from the specified base type
            (starting with the base type itself if it isn't abstract).
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.GetDerivedTypes(System.Type,System.Collections.Generic.ICollection{System.Type},System.Boolean)">
            <summary>
            Gets all non-abstract types in the currently loaded assemblies which derive from the specified base type
            (starting with the base type itself if it isn't abstract).
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.GetAttributedTypes``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Type},System.Boolean)">
            <summary>Gets all types with the specified attribute all currently loaded assemblies.</summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.GetAttributedFields``1(System.Type,System.Reflection.BindingFlags,System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Reflection.FieldInfo})">
            <summary>Gets all fields with the specified attribute in `type`.</summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.GetAttributedProperties``1(System.Type,System.Reflection.BindingFlags,System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Reflection.PropertyInfo})">
            <summary>Gets all properties with the specified attribute in `type`.</summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.GetAttributedMethods``1(System.Reflection.BindingFlags,System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Reflection.MethodInfo})">
            <summary>Gets all methods with the specified attribute in every type in the currently loaded assemblies.</summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.GetAttributedMethods``1(System.Type,System.Reflection.BindingFlags,System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Reflection.MethodInfo})">
            <summary>Gets all methods with the specified attribute in `type`.</summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.GetDelegate``1(System.Reflection.MethodInfo)">
            <summary>
            Creates a delegate of the specified type from `method`.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.GetDelegate``1(System.Reflection.MethodInfo,``0@)">
            <summary>
            Creates a delegate of the specified type from `method`.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.GetMemberFunc``1(System.Type,System.String,System.Object,System.String@,System.Reflection.BindingFlags)">
            <summary>
            Tries to find a field/property/method in the `declaringType` with the `name` and creates a delegate to get
            its value.
            <para></para>
            If a member is found but can't be converted to an appropriate delegate, the `error` message describes the
            problem.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.OneObject(System.Object)">
            <summary>
            Returns <see cref="T:System.Object"/>[1] { obj }.
            <para></para>
            The array is kept in a field marked with [<see cref="T:System.ThreadStaticAttribute"/>], so it is thread safe
            but cannot be used recursively within a single thread.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.TwoObjects(System.Object,System.Object)">
            <summary>
            Returns <see cref="T:System.Object"/>[2] { obj0, obj1 }.
            <para></para>
            The array is kept in a field marked with [<see cref="T:System.ThreadStaticAttribute"/>], so it is thread safe
            but cannot be used recursively within a single thread.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.OneType(System.Type)">
            <summary>
            Returns <see cref="T:System.Type"/>[1] { type }.
            <para></para>
            The array is kept in a field marked with [<see cref="T:System.ThreadStaticAttribute"/>], so it is thread safe
            but cannot be used recursively within a single thread.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.TwoTypes(System.Type,System.Type)">
            <summary>
            Returns <see cref="T:System.Type"/>[2] { type0, type1 }.
            <para></para>
            The array is kept in a field marked with [<see cref="T:System.ThreadStaticAttribute"/>], so it is thread safe
            but cannot be used recursively within a single thread.
            </summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.DeepToString(System.Object)">
            <summary>Builds a string containing the values of each of the specified object's fields.</summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.AppendDeepToString(System.Text.StringBuilder,System.Int32,System.Object,System.Int32)">
            <summary>Builds a string containing the values of each of the specified object's fields.</summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.GetQualifiedName(System.Type)">
            <summary>Returns "<see cref="P:System.Type.FullName"/>, <see cref="P:System.Reflection.AssemblyName.Name"/>".</summary>
            <remarks>This is similar to <see cref="P:System.Type.AssemblyQualifiedName"/>, but without the assembly version.</remarks>
        </member>
        <member name="M:Weaver.ReflectionUtilities.ToAccessModifier(System.Reflection.BindingFlags)">
            <summary>Returns a description of the access modifier associated with `bindings`</summary>
        </member>
        <member name="M:Weaver.ReflectionUtilities.GetInheritanceModifier(System.Type,System.String,System.Type[])">
            <summary>
            Returns null, "override" or "new" as appropriate for a method called `methodName` in a child of `baseType`.
            </summary>
        </member>
    </members>
</doc>
